'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("qbDataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class qbDataSet
    Inherits System.Data.DataSet
    
    Private tableAssemblies As AssembliesDataTable
    
    Private tableAssemblyManufacturer As AssemblyManufacturerDataTable
    
    Private tableAssemblySizes As AssemblySizesDataTable
    
    Private tableAssemblyTypes As AssemblyTypesDataTable
    
    Private tableAssemblyUsage As AssemblyUsageDataTable
    
    Private tableAssemblyUsagePrice As AssemblyUsagePriceDataTable
    
    Private tableDates As DatesDataTable
    
    Private tableManagers As ManagersDataTable
    
    Private tableMunicipalities As MunicipalitiesDataTable
    
    Private tablePrice As PriceDataTable
    
    Private tablePricingSchemes As PricingSchemesDataTable
    
    Private tableProperties As PropertiesDataTable
    
    Private tableTesters As TestersDataTable
    
    Private tableTests As TestsDataTable
    
    Private tableAssembliesWOutDeleted_VW As AssembliesWOutDeleted_VWDataTable
    
    Private tableDeviceTestsInLastYear_VW As DeviceTestsInLastYear_VWDataTable
    
    Private tableManagersWOutDeleted_VW As ManagersWOutDeleted_VWDataTable
    
    Private tableManagersXPropertiesXAssemblies_VW As ManagersXPropertiesXAssemblies_VWDataTable
    
    Private tableManagersXPropertiesXAssembliesXTests_VW As ManagersXPropertiesXAssembliesXTests_VWDataTable
    
    Private tablePricingSchemeView As PricingSchemeViewDataTable
    
    Private tablePropertiesWOutDeleted_VW As PropertiesWOutDeleted_VWDataTable
    
    Private tableAssemblyInfoByPrimaryKey As AssemblyInfoByPrimaryKeyDataTable
    
    Private tableGetManagersList As GetManagersListDataTable
    
    Private tableManagerInfoByPrimaryKey As ManagerInfoByPrimaryKeyDataTable
    
    Private tableManagerNameNoStrtSuite_sel As ManagerNameNoStrtSuite_selDataTable
    
    Private tablePricingList As PricingListDataTable
    
    Private tablePropertyInfoByPrimaryKey As PropertyInfoByPrimaryKeyDataTable
    
    Private tableSelectTestInfo As SelectTestInfoDataTable
    
    Private tableTestReports_SEL As TestReports_SELDataTable
    
    Private tableTreeView_SP As TreeView_SPDataTable
    
    Private tableTreeViewAssembliesSearchQuery As TreeViewAssembliesSearchQueryDataTable
    
    Private tableTreeViewManagersSearchQuery As TreeViewManagersSearchQueryDataTable
    
    Private tableTreeViewPropertiesSearchQuery As TreeViewPropertiesSearchQueryDataTable
    
    Private tablef_ManXPropXAssemSearch As f_ManXPropXAssemSearchDataTable
    
    Private tableManagersWOutDeletedList As ManagersWOutDeletedListDataTable
    
    Private tableMunicipalitiesList As MunicipalitiesListDataTable
    
    Private relationAssemblies_FK00 As System.Data.DataRelation
    
    Private relationAssemblies_FK01 As System.Data.DataRelation
    
    Private relationAssemblyUsage_FK00 As System.Data.DataRelation
    
    Private relationManagers_FK00 As System.Data.DataRelation
    
    Private relationPrice_FK00 As System.Data.DataRelation
    
    Private relationPrice_FK01 As System.Data.DataRelation
    
    Private relationPrice_FK02 As System.Data.DataRelation
    
    Private relationProperties_FK00 As System.Data.DataRelation
    
    Private relationProperties_FK01 As System.Data.DataRelation
    
    Private relationTests_FK00 As System.Data.DataRelation
    
    Private relationProperties_FK011 As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Assemblies")) Is Nothing) Then
                MyBase.Tables.Add(New AssembliesDataTable(ds.Tables("Assemblies")))
            End If
            If (Not (ds.Tables("AssemblyManufacturer")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyManufacturerDataTable(ds.Tables("AssemblyManufacturer")))
            End If
            If (Not (ds.Tables("AssemblySizes")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblySizesDataTable(ds.Tables("AssemblySizes")))
            End If
            If (Not (ds.Tables("AssemblyTypes")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyTypesDataTable(ds.Tables("AssemblyTypes")))
            End If
            If (Not (ds.Tables("AssemblyUsage")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyUsageDataTable(ds.Tables("AssemblyUsage")))
            End If
            If (Not (ds.Tables("AssemblyUsagePrice")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyUsagePriceDataTable(ds.Tables("AssemblyUsagePrice")))
            End If
            If (Not (ds.Tables("Dates")) Is Nothing) Then
                MyBase.Tables.Add(New DatesDataTable(ds.Tables("Dates")))
            End If
            If (Not (ds.Tables("Managers")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersDataTable(ds.Tables("Managers")))
            End If
            If (Not (ds.Tables("Municipalities")) Is Nothing) Then
                MyBase.Tables.Add(New MunicipalitiesDataTable(ds.Tables("Municipalities")))
            End If
            If (Not (ds.Tables("Price")) Is Nothing) Then
                MyBase.Tables.Add(New PriceDataTable(ds.Tables("Price")))
            End If
            If (Not (ds.Tables("PricingSchemes")) Is Nothing) Then
                MyBase.Tables.Add(New PricingSchemesDataTable(ds.Tables("PricingSchemes")))
            End If
            If (Not (ds.Tables("Properties")) Is Nothing) Then
                MyBase.Tables.Add(New PropertiesDataTable(ds.Tables("Properties")))
            End If
            If (Not (ds.Tables("Testers")) Is Nothing) Then
                MyBase.Tables.Add(New TestersDataTable(ds.Tables("Testers")))
            End If
            If (Not (ds.Tables("Tests")) Is Nothing) Then
                MyBase.Tables.Add(New TestsDataTable(ds.Tables("Tests")))
            End If
            If (Not (ds.Tables("AssembliesWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New AssembliesWOutDeleted_VWDataTable(ds.Tables("AssembliesWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("DeviceTestsInLastYear_VW")) Is Nothing) Then
                MyBase.Tables.Add(New DeviceTestsInLastYear_VWDataTable(ds.Tables("DeviceTestsInLastYear_VW")))
            End If
            If (Not (ds.Tables("ManagersWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersWOutDeleted_VWDataTable(ds.Tables("ManagersWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("ManagersXPropertiesXAssemblies_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersXPropertiesXAssemblies_VWDataTable(ds.Tables("ManagersXPropertiesXAssemblies_VW")))
            End If
            If (Not (ds.Tables("ManagersXPropertiesXAssembliesXTests_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersXPropertiesXAssembliesXTests_VWDataTable(ds.Tables("ManagersXPropertiesXAssembliesXTests_VW")))
            End If
            If (Not (ds.Tables("PricingSchemeView")) Is Nothing) Then
                MyBase.Tables.Add(New PricingSchemeViewDataTable(ds.Tables("PricingSchemeView")))
            End If
            If (Not (ds.Tables("PropertiesWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New PropertiesWOutDeleted_VWDataTable(ds.Tables("PropertiesWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("AssemblyInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyInfoByPrimaryKeyDataTable(ds.Tables("AssemblyInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("GetManagersList")) Is Nothing) Then
                MyBase.Tables.Add(New GetManagersListDataTable(ds.Tables("GetManagersList")))
            End If
            If (Not (ds.Tables("ManagerInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New ManagerInfoByPrimaryKeyDataTable(ds.Tables("ManagerInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("ManagerNameNoStrtSuite_sel")) Is Nothing) Then
                MyBase.Tables.Add(New ManagerNameNoStrtSuite_selDataTable(ds.Tables("ManagerNameNoStrtSuite_sel")))
            End If
            If (Not (ds.Tables("PricingList")) Is Nothing) Then
                MyBase.Tables.Add(New PricingListDataTable(ds.Tables("PricingList")))
            End If
            If (Not (ds.Tables("PropertyInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New PropertyInfoByPrimaryKeyDataTable(ds.Tables("PropertyInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("SelectTestInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SelectTestInfoDataTable(ds.Tables("SelectTestInfo")))
            End If
            If (Not (ds.Tables("TestReports_SEL")) Is Nothing) Then
                MyBase.Tables.Add(New TestReports_SELDataTable(ds.Tables("TestReports_SEL")))
            End If
            If (Not (ds.Tables("TreeView_SP")) Is Nothing) Then
                MyBase.Tables.Add(New TreeView_SPDataTable(ds.Tables("TreeView_SP")))
            End If
            If (Not (ds.Tables("TreeViewAssembliesSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewAssembliesSearchQueryDataTable(ds.Tables("TreeViewAssembliesSearchQuery")))
            End If
            If (Not (ds.Tables("TreeViewManagersSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewManagersSearchQueryDataTable(ds.Tables("TreeViewManagersSearchQuery")))
            End If
            If (Not (ds.Tables("TreeViewPropertiesSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewPropertiesSearchQueryDataTable(ds.Tables("TreeViewPropertiesSearchQuery")))
            End If
            If (Not (ds.Tables("f_ManXPropXAssemSearch")) Is Nothing) Then
                MyBase.Tables.Add(New f_ManXPropXAssemSearchDataTable(ds.Tables("f_ManXPropXAssemSearch")))
            End If
            If (Not (ds.Tables("ManagersWOutDeletedList")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersWOutDeletedListDataTable(ds.Tables("ManagersWOutDeletedList")))
            End If
            If (Not (ds.Tables("MunicipalitiesList")) Is Nothing) Then
                MyBase.Tables.Add(New MunicipalitiesListDataTable(ds.Tables("MunicipalitiesList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Assemblies() As AssembliesDataTable
        Get
            Return Me.tableAssemblies
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblyManufacturer() As AssemblyManufacturerDataTable
        Get
            Return Me.tableAssemblyManufacturer
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblySizes() As AssemblySizesDataTable
        Get
            Return Me.tableAssemblySizes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblyTypes() As AssemblyTypesDataTable
        Get
            Return Me.tableAssemblyTypes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblyUsage() As AssemblyUsageDataTable
        Get
            Return Me.tableAssemblyUsage
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblyUsagePrice() As AssemblyUsagePriceDataTable
        Get
            Return Me.tableAssemblyUsagePrice
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Dates() As DatesDataTable
        Get
            Return Me.tableDates
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Managers() As ManagersDataTable
        Get
            Return Me.tableManagers
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Municipalities() As MunicipalitiesDataTable
        Get
            Return Me.tableMunicipalities
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Price() As PriceDataTable
        Get
            Return Me.tablePrice
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PricingSchemes() As PricingSchemesDataTable
        Get
            Return Me.tablePricingSchemes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Properties() As PropertiesDataTable
        Get
            Return Me.tableProperties
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Testers() As TestersDataTable
        Get
            Return Me.tableTesters
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Tests() As TestsDataTable
        Get
            Return Me.tableTests
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssembliesWOutDeleted_VW() As AssembliesWOutDeleted_VWDataTable
        Get
            Return Me.tableAssembliesWOutDeleted_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DeviceTestsInLastYear_VW() As DeviceTestsInLastYear_VWDataTable
        Get
            Return Me.tableDeviceTestsInLastYear_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagersWOutDeleted_VW() As ManagersWOutDeleted_VWDataTable
        Get
            Return Me.tableManagersWOutDeleted_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagersXPropertiesXAssemblies_VW() As ManagersXPropertiesXAssemblies_VWDataTable
        Get
            Return Me.tableManagersXPropertiesXAssemblies_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagersXPropertiesXAssembliesXTests_VW() As ManagersXPropertiesXAssembliesXTests_VWDataTable
        Get
            Return Me.tableManagersXPropertiesXAssembliesXTests_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PricingSchemeView() As PricingSchemeViewDataTable
        Get
            Return Me.tablePricingSchemeView
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PropertiesWOutDeleted_VW() As PropertiesWOutDeleted_VWDataTable
        Get
            Return Me.tablePropertiesWOutDeleted_VW
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AssemblyInfoByPrimaryKey() As AssemblyInfoByPrimaryKeyDataTable
        Get
            Return Me.tableAssemblyInfoByPrimaryKey
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property GetManagersList() As GetManagersListDataTable
        Get
            Return Me.tableGetManagersList
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagerInfoByPrimaryKey() As ManagerInfoByPrimaryKeyDataTable
        Get
            Return Me.tableManagerInfoByPrimaryKey
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagerNameNoStrtSuite_sel() As ManagerNameNoStrtSuite_selDataTable
        Get
            Return Me.tableManagerNameNoStrtSuite_sel
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PricingList() As PricingListDataTable
        Get
            Return Me.tablePricingList
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PropertyInfoByPrimaryKey() As PropertyInfoByPrimaryKeyDataTable
        Get
            Return Me.tablePropertyInfoByPrimaryKey
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SelectTestInfo() As SelectTestInfoDataTable
        Get
            Return Me.tableSelectTestInfo
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TestReports_SEL() As TestReports_SELDataTable
        Get
            Return Me.tableTestReports_SEL
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TreeView_SP() As TreeView_SPDataTable
        Get
            Return Me.tableTreeView_SP
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TreeViewAssembliesSearchQuery() As TreeViewAssembliesSearchQueryDataTable
        Get
            Return Me.tableTreeViewAssembliesSearchQuery
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TreeViewManagersSearchQuery() As TreeViewManagersSearchQueryDataTable
        Get
            Return Me.tableTreeViewManagersSearchQuery
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TreeViewPropertiesSearchQuery() As TreeViewPropertiesSearchQueryDataTable
        Get
            Return Me.tableTreeViewPropertiesSearchQuery
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property f_ManXPropXAssemSearch() As f_ManXPropXAssemSearchDataTable
        Get
            Return Me.tablef_ManXPropXAssemSearch
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ManagersWOutDeletedList() As ManagersWOutDeletedListDataTable
        Get
            Return Me.tableManagersWOutDeletedList
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MunicipalitiesList() As MunicipalitiesListDataTable
        Get
            Return Me.tableMunicipalitiesList
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As qbDataSet = CType(MyBase.Clone,qbDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Assemblies")) Is Nothing) Then
                MyBase.Tables.Add(New AssembliesDataTable(ds.Tables("Assemblies")))
            End If
            If (Not (ds.Tables("AssemblyManufacturer")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyManufacturerDataTable(ds.Tables("AssemblyManufacturer")))
            End If
            If (Not (ds.Tables("AssemblySizes")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblySizesDataTable(ds.Tables("AssemblySizes")))
            End If
            If (Not (ds.Tables("AssemblyTypes")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyTypesDataTable(ds.Tables("AssemblyTypes")))
            End If
            If (Not (ds.Tables("AssemblyUsage")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyUsageDataTable(ds.Tables("AssemblyUsage")))
            End If
            If (Not (ds.Tables("AssemblyUsagePrice")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyUsagePriceDataTable(ds.Tables("AssemblyUsagePrice")))
            End If
            If (Not (ds.Tables("Dates")) Is Nothing) Then
                MyBase.Tables.Add(New DatesDataTable(ds.Tables("Dates")))
            End If
            If (Not (ds.Tables("Managers")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersDataTable(ds.Tables("Managers")))
            End If
            If (Not (ds.Tables("Municipalities")) Is Nothing) Then
                MyBase.Tables.Add(New MunicipalitiesDataTable(ds.Tables("Municipalities")))
            End If
            If (Not (ds.Tables("Price")) Is Nothing) Then
                MyBase.Tables.Add(New PriceDataTable(ds.Tables("Price")))
            End If
            If (Not (ds.Tables("PricingSchemes")) Is Nothing) Then
                MyBase.Tables.Add(New PricingSchemesDataTable(ds.Tables("PricingSchemes")))
            End If
            If (Not (ds.Tables("Properties")) Is Nothing) Then
                MyBase.Tables.Add(New PropertiesDataTable(ds.Tables("Properties")))
            End If
            If (Not (ds.Tables("Testers")) Is Nothing) Then
                MyBase.Tables.Add(New TestersDataTable(ds.Tables("Testers")))
            End If
            If (Not (ds.Tables("Tests")) Is Nothing) Then
                MyBase.Tables.Add(New TestsDataTable(ds.Tables("Tests")))
            End If
            If (Not (ds.Tables("AssembliesWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New AssembliesWOutDeleted_VWDataTable(ds.Tables("AssembliesWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("DeviceTestsInLastYear_VW")) Is Nothing) Then
                MyBase.Tables.Add(New DeviceTestsInLastYear_VWDataTable(ds.Tables("DeviceTestsInLastYear_VW")))
            End If
            If (Not (ds.Tables("ManagersWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersWOutDeleted_VWDataTable(ds.Tables("ManagersWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("ManagersXPropertiesXAssemblies_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersXPropertiesXAssemblies_VWDataTable(ds.Tables("ManagersXPropertiesXAssemblies_VW")))
            End If
            If (Not (ds.Tables("ManagersXPropertiesXAssembliesXTests_VW")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersXPropertiesXAssembliesXTests_VWDataTable(ds.Tables("ManagersXPropertiesXAssembliesXTests_VW")))
            End If
            If (Not (ds.Tables("PricingSchemeView")) Is Nothing) Then
                MyBase.Tables.Add(New PricingSchemeViewDataTable(ds.Tables("PricingSchemeView")))
            End If
            If (Not (ds.Tables("PropertiesWOutDeleted_VW")) Is Nothing) Then
                MyBase.Tables.Add(New PropertiesWOutDeleted_VWDataTable(ds.Tables("PropertiesWOutDeleted_VW")))
            End If
            If (Not (ds.Tables("AssemblyInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New AssemblyInfoByPrimaryKeyDataTable(ds.Tables("AssemblyInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("GetManagersList")) Is Nothing) Then
                MyBase.Tables.Add(New GetManagersListDataTable(ds.Tables("GetManagersList")))
            End If
            If (Not (ds.Tables("ManagerInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New ManagerInfoByPrimaryKeyDataTable(ds.Tables("ManagerInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("ManagerNameNoStrtSuite_sel")) Is Nothing) Then
                MyBase.Tables.Add(New ManagerNameNoStrtSuite_selDataTable(ds.Tables("ManagerNameNoStrtSuite_sel")))
            End If
            If (Not (ds.Tables("PricingList")) Is Nothing) Then
                MyBase.Tables.Add(New PricingListDataTable(ds.Tables("PricingList")))
            End If
            If (Not (ds.Tables("PropertyInfoByPrimaryKey")) Is Nothing) Then
                MyBase.Tables.Add(New PropertyInfoByPrimaryKeyDataTable(ds.Tables("PropertyInfoByPrimaryKey")))
            End If
            If (Not (ds.Tables("SelectTestInfo")) Is Nothing) Then
                MyBase.Tables.Add(New SelectTestInfoDataTable(ds.Tables("SelectTestInfo")))
            End If
            If (Not (ds.Tables("TestReports_SEL")) Is Nothing) Then
                MyBase.Tables.Add(New TestReports_SELDataTable(ds.Tables("TestReports_SEL")))
            End If
            If (Not (ds.Tables("TreeView_SP")) Is Nothing) Then
                MyBase.Tables.Add(New TreeView_SPDataTable(ds.Tables("TreeView_SP")))
            End If
            If (Not (ds.Tables("TreeViewAssembliesSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewAssembliesSearchQueryDataTable(ds.Tables("TreeViewAssembliesSearchQuery")))
            End If
            If (Not (ds.Tables("TreeViewManagersSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewManagersSearchQueryDataTable(ds.Tables("TreeViewManagersSearchQuery")))
            End If
            If (Not (ds.Tables("TreeViewPropertiesSearchQuery")) Is Nothing) Then
                MyBase.Tables.Add(New TreeViewPropertiesSearchQueryDataTable(ds.Tables("TreeViewPropertiesSearchQuery")))
            End If
            If (Not (ds.Tables("f_ManXPropXAssemSearch")) Is Nothing) Then
                MyBase.Tables.Add(New f_ManXPropXAssemSearchDataTable(ds.Tables("f_ManXPropXAssemSearch")))
            End If
            If (Not (ds.Tables("ManagersWOutDeletedList")) Is Nothing) Then
                MyBase.Tables.Add(New ManagersWOutDeletedListDataTable(ds.Tables("ManagersWOutDeletedList")))
            End If
            If (Not (ds.Tables("MunicipalitiesList")) Is Nothing) Then
                MyBase.Tables.Add(New MunicipalitiesListDataTable(ds.Tables("MunicipalitiesList")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAssemblies = CType(MyBase.Tables("Assemblies"),AssembliesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblies) Is Nothing) Then
                Me.tableAssemblies.InitVars
            End If
        End If
        Me.tableAssemblyManufacturer = CType(MyBase.Tables("AssemblyManufacturer"),AssemblyManufacturerDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblyManufacturer) Is Nothing) Then
                Me.tableAssemblyManufacturer.InitVars
            End If
        End If
        Me.tableAssemblySizes = CType(MyBase.Tables("AssemblySizes"),AssemblySizesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblySizes) Is Nothing) Then
                Me.tableAssemblySizes.InitVars
            End If
        End If
        Me.tableAssemblyTypes = CType(MyBase.Tables("AssemblyTypes"),AssemblyTypesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblyTypes) Is Nothing) Then
                Me.tableAssemblyTypes.InitVars
            End If
        End If
        Me.tableAssemblyUsage = CType(MyBase.Tables("AssemblyUsage"),AssemblyUsageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblyUsage) Is Nothing) Then
                Me.tableAssemblyUsage.InitVars
            End If
        End If
        Me.tableAssemblyUsagePrice = CType(MyBase.Tables("AssemblyUsagePrice"),AssemblyUsagePriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblyUsagePrice) Is Nothing) Then
                Me.tableAssemblyUsagePrice.InitVars
            End If
        End If
        Me.tableDates = CType(MyBase.Tables("Dates"),DatesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDates) Is Nothing) Then
                Me.tableDates.InitVars
            End If
        End If
        Me.tableManagers = CType(MyBase.Tables("Managers"),ManagersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagers) Is Nothing) Then
                Me.tableManagers.InitVars
            End If
        End If
        Me.tableMunicipalities = CType(MyBase.Tables("Municipalities"),MunicipalitiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMunicipalities) Is Nothing) Then
                Me.tableMunicipalities.InitVars
            End If
        End If
        Me.tablePrice = CType(MyBase.Tables("Price"),PriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePrice) Is Nothing) Then
                Me.tablePrice.InitVars
            End If
        End If
        Me.tablePricingSchemes = CType(MyBase.Tables("PricingSchemes"),PricingSchemesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePricingSchemes) Is Nothing) Then
                Me.tablePricingSchemes.InitVars
            End If
        End If
        Me.tableProperties = CType(MyBase.Tables("Properties"),PropertiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProperties) Is Nothing) Then
                Me.tableProperties.InitVars
            End If
        End If
        Me.tableTesters = CType(MyBase.Tables("Testers"),TestersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTesters) Is Nothing) Then
                Me.tableTesters.InitVars
            End If
        End If
        Me.tableTests = CType(MyBase.Tables("Tests"),TestsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTests) Is Nothing) Then
                Me.tableTests.InitVars
            End If
        End If
        Me.tableAssembliesWOutDeleted_VW = CType(MyBase.Tables("AssembliesWOutDeleted_VW"),AssembliesWOutDeleted_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssembliesWOutDeleted_VW) Is Nothing) Then
                Me.tableAssembliesWOutDeleted_VW.InitVars
            End If
        End If
        Me.tableDeviceTestsInLastYear_VW = CType(MyBase.Tables("DeviceTestsInLastYear_VW"),DeviceTestsInLastYear_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDeviceTestsInLastYear_VW) Is Nothing) Then
                Me.tableDeviceTestsInLastYear_VW.InitVars
            End If
        End If
        Me.tableManagersWOutDeleted_VW = CType(MyBase.Tables("ManagersWOutDeleted_VW"),ManagersWOutDeleted_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagersWOutDeleted_VW) Is Nothing) Then
                Me.tableManagersWOutDeleted_VW.InitVars
            End If
        End If
        Me.tableManagersXPropertiesXAssemblies_VW = CType(MyBase.Tables("ManagersXPropertiesXAssemblies_VW"),ManagersXPropertiesXAssemblies_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagersXPropertiesXAssemblies_VW) Is Nothing) Then
                Me.tableManagersXPropertiesXAssemblies_VW.InitVars
            End If
        End If
        Me.tableManagersXPropertiesXAssembliesXTests_VW = CType(MyBase.Tables("ManagersXPropertiesXAssembliesXTests_VW"),ManagersXPropertiesXAssembliesXTests_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagersXPropertiesXAssembliesXTests_VW) Is Nothing) Then
                Me.tableManagersXPropertiesXAssembliesXTests_VW.InitVars
            End If
        End If
        Me.tablePricingSchemeView = CType(MyBase.Tables("PricingSchemeView"),PricingSchemeViewDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePricingSchemeView) Is Nothing) Then
                Me.tablePricingSchemeView.InitVars
            End If
        End If
        Me.tablePropertiesWOutDeleted_VW = CType(MyBase.Tables("PropertiesWOutDeleted_VW"),PropertiesWOutDeleted_VWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePropertiesWOutDeleted_VW) Is Nothing) Then
                Me.tablePropertiesWOutDeleted_VW.InitVars
            End If
        End If
        Me.tableAssemblyInfoByPrimaryKey = CType(MyBase.Tables("AssemblyInfoByPrimaryKey"),AssemblyInfoByPrimaryKeyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAssemblyInfoByPrimaryKey) Is Nothing) Then
                Me.tableAssemblyInfoByPrimaryKey.InitVars
            End If
        End If
        Me.tableGetManagersList = CType(MyBase.Tables("GetManagersList"),GetManagersListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableGetManagersList) Is Nothing) Then
                Me.tableGetManagersList.InitVars
            End If
        End If
        Me.tableManagerInfoByPrimaryKey = CType(MyBase.Tables("ManagerInfoByPrimaryKey"),ManagerInfoByPrimaryKeyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagerInfoByPrimaryKey) Is Nothing) Then
                Me.tableManagerInfoByPrimaryKey.InitVars
            End If
        End If
        Me.tableManagerNameNoStrtSuite_sel = CType(MyBase.Tables("ManagerNameNoStrtSuite_sel"),ManagerNameNoStrtSuite_selDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagerNameNoStrtSuite_sel) Is Nothing) Then
                Me.tableManagerNameNoStrtSuite_sel.InitVars
            End If
        End If
        Me.tablePricingList = CType(MyBase.Tables("PricingList"),PricingListDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePricingList) Is Nothing) Then
                Me.tablePricingList.InitVars
            End If
        End If
        Me.tablePropertyInfoByPrimaryKey = CType(MyBase.Tables("PropertyInfoByPrimaryKey"),PropertyInfoByPrimaryKeyDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePropertyInfoByPrimaryKey) Is Nothing) Then
                Me.tablePropertyInfoByPrimaryKey.InitVars
            End If
        End If
        Me.tableSelectTestInfo = CType(MyBase.Tables("SelectTestInfo"),SelectTestInfoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSelectTestInfo) Is Nothing) Then
                Me.tableSelectTestInfo.InitVars
            End If
        End If
        Me.tableTestReports_SEL = CType(MyBase.Tables("TestReports_SEL"),TestReports_SELDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTestReports_SEL) Is Nothing) Then
                Me.tableTestReports_SEL.InitVars
            End If
        End If
        Me.tableTreeView_SP = CType(MyBase.Tables("TreeView_SP"),TreeView_SPDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTreeView_SP) Is Nothing) Then
                Me.tableTreeView_SP.InitVars
            End If
        End If
        Me.tableTreeViewAssembliesSearchQuery = CType(MyBase.Tables("TreeViewAssembliesSearchQuery"),TreeViewAssembliesSearchQueryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTreeViewAssembliesSearchQuery) Is Nothing) Then
                Me.tableTreeViewAssembliesSearchQuery.InitVars
            End If
        End If
        Me.tableTreeViewManagersSearchQuery = CType(MyBase.Tables("TreeViewManagersSearchQuery"),TreeViewManagersSearchQueryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTreeViewManagersSearchQuery) Is Nothing) Then
                Me.tableTreeViewManagersSearchQuery.InitVars
            End If
        End If
        Me.tableTreeViewPropertiesSearchQuery = CType(MyBase.Tables("TreeViewPropertiesSearchQuery"),TreeViewPropertiesSearchQueryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTreeViewPropertiesSearchQuery) Is Nothing) Then
                Me.tableTreeViewPropertiesSearchQuery.InitVars
            End If
        End If
        Me.tablef_ManXPropXAssemSearch = CType(MyBase.Tables("f_ManXPropXAssemSearch"),f_ManXPropXAssemSearchDataTable)
        If (initTable = true) Then
            If (Not (Me.tablef_ManXPropXAssemSearch) Is Nothing) Then
                Me.tablef_ManXPropXAssemSearch.InitVars
            End If
        End If
        Me.tableManagersWOutDeletedList = CType(MyBase.Tables("ManagersWOutDeletedList"),ManagersWOutDeletedListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableManagersWOutDeletedList) Is Nothing) Then
                Me.tableManagersWOutDeletedList.InitVars
            End If
        End If
        Me.tableMunicipalitiesList = CType(MyBase.Tables("MunicipalitiesList"),MunicipalitiesListDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMunicipalitiesList) Is Nothing) Then
                Me.tableMunicipalitiesList.InitVars
            End If
        End If
        Me.relationAssemblies_FK00 = Me.Relations("Assemblies_FK00")
        Me.relationAssemblies_FK01 = Me.Relations("Assemblies_FK01")
        Me.relationAssemblyUsage_FK00 = Me.Relations("AssemblyUsage_FK00")
        Me.relationManagers_FK00 = Me.Relations("Managers_FK00")
        Me.relationPrice_FK00 = Me.Relations("Price_FK00")
        Me.relationPrice_FK01 = Me.Relations("Price_FK01")
        Me.relationPrice_FK02 = Me.Relations("Price_FK02")
        Me.relationProperties_FK00 = Me.Relations("Properties_FK00")
        Me.relationProperties_FK01 = Me.Relations("Properties_FK01")
        Me.relationTests_FK00 = Me.Relations("Tests_FK00")
        Me.relationProperties_FK011 = Me.Relations("Properties_FK011")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "qbDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/qbDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAssemblies = New AssembliesDataTable
        MyBase.Tables.Add(Me.tableAssemblies)
        Me.tableAssemblyManufacturer = New AssemblyManufacturerDataTable
        MyBase.Tables.Add(Me.tableAssemblyManufacturer)
        Me.tableAssemblySizes = New AssemblySizesDataTable
        MyBase.Tables.Add(Me.tableAssemblySizes)
        Me.tableAssemblyTypes = New AssemblyTypesDataTable
        MyBase.Tables.Add(Me.tableAssemblyTypes)
        Me.tableAssemblyUsage = New AssemblyUsageDataTable
        MyBase.Tables.Add(Me.tableAssemblyUsage)
        Me.tableAssemblyUsagePrice = New AssemblyUsagePriceDataTable
        MyBase.Tables.Add(Me.tableAssemblyUsagePrice)
        Me.tableDates = New DatesDataTable
        MyBase.Tables.Add(Me.tableDates)
        Me.tableManagers = New ManagersDataTable
        MyBase.Tables.Add(Me.tableManagers)
        Me.tableMunicipalities = New MunicipalitiesDataTable
        MyBase.Tables.Add(Me.tableMunicipalities)
        Me.tablePrice = New PriceDataTable
        MyBase.Tables.Add(Me.tablePrice)
        Me.tablePricingSchemes = New PricingSchemesDataTable
        MyBase.Tables.Add(Me.tablePricingSchemes)
        Me.tableProperties = New PropertiesDataTable
        MyBase.Tables.Add(Me.tableProperties)
        Me.tableTesters = New TestersDataTable
        MyBase.Tables.Add(Me.tableTesters)
        Me.tableTests = New TestsDataTable
        MyBase.Tables.Add(Me.tableTests)
        Me.tableAssembliesWOutDeleted_VW = New AssembliesWOutDeleted_VWDataTable
        MyBase.Tables.Add(Me.tableAssembliesWOutDeleted_VW)
        Me.tableDeviceTestsInLastYear_VW = New DeviceTestsInLastYear_VWDataTable
        MyBase.Tables.Add(Me.tableDeviceTestsInLastYear_VW)
        Me.tableManagersWOutDeleted_VW = New ManagersWOutDeleted_VWDataTable
        MyBase.Tables.Add(Me.tableManagersWOutDeleted_VW)
        Me.tableManagersXPropertiesXAssemblies_VW = New ManagersXPropertiesXAssemblies_VWDataTable
        MyBase.Tables.Add(Me.tableManagersXPropertiesXAssemblies_VW)
        Me.tableManagersXPropertiesXAssembliesXTests_VW = New ManagersXPropertiesXAssembliesXTests_VWDataTable
        MyBase.Tables.Add(Me.tableManagersXPropertiesXAssembliesXTests_VW)
        Me.tablePricingSchemeView = New PricingSchemeViewDataTable
        MyBase.Tables.Add(Me.tablePricingSchemeView)
        Me.tablePropertiesWOutDeleted_VW = New PropertiesWOutDeleted_VWDataTable
        MyBase.Tables.Add(Me.tablePropertiesWOutDeleted_VW)
        Me.tableAssemblyInfoByPrimaryKey = New AssemblyInfoByPrimaryKeyDataTable
        MyBase.Tables.Add(Me.tableAssemblyInfoByPrimaryKey)
        Me.tableGetManagersList = New GetManagersListDataTable
        MyBase.Tables.Add(Me.tableGetManagersList)
        Me.tableManagerInfoByPrimaryKey = New ManagerInfoByPrimaryKeyDataTable
        MyBase.Tables.Add(Me.tableManagerInfoByPrimaryKey)
        Me.tableManagerNameNoStrtSuite_sel = New ManagerNameNoStrtSuite_selDataTable
        MyBase.Tables.Add(Me.tableManagerNameNoStrtSuite_sel)
        Me.tablePricingList = New PricingListDataTable
        MyBase.Tables.Add(Me.tablePricingList)
        Me.tablePropertyInfoByPrimaryKey = New PropertyInfoByPrimaryKeyDataTable
        MyBase.Tables.Add(Me.tablePropertyInfoByPrimaryKey)
        Me.tableSelectTestInfo = New SelectTestInfoDataTable
        MyBase.Tables.Add(Me.tableSelectTestInfo)
        Me.tableTestReports_SEL = New TestReports_SELDataTable
        MyBase.Tables.Add(Me.tableTestReports_SEL)
        Me.tableTreeView_SP = New TreeView_SPDataTable
        MyBase.Tables.Add(Me.tableTreeView_SP)
        Me.tableTreeViewAssembliesSearchQuery = New TreeViewAssembliesSearchQueryDataTable
        MyBase.Tables.Add(Me.tableTreeViewAssembliesSearchQuery)
        Me.tableTreeViewManagersSearchQuery = New TreeViewManagersSearchQueryDataTable
        MyBase.Tables.Add(Me.tableTreeViewManagersSearchQuery)
        Me.tableTreeViewPropertiesSearchQuery = New TreeViewPropertiesSearchQueryDataTable
        MyBase.Tables.Add(Me.tableTreeViewPropertiesSearchQuery)
        Me.tablef_ManXPropXAssemSearch = New f_ManXPropXAssemSearchDataTable
        MyBase.Tables.Add(Me.tablef_ManXPropXAssemSearch)
        Me.tableManagersWOutDeletedList = New ManagersWOutDeletedListDataTable
        MyBase.Tables.Add(Me.tableManagersWOutDeletedList)
        Me.tableMunicipalitiesList = New MunicipalitiesListDataTable
        MyBase.Tables.Add(Me.tableMunicipalitiesList)
        Me.relationAssemblies_FK00 = New System.Data.DataRelation("Assemblies_FK00", New System.Data.DataColumn() {Me.tableAssemblySizes.AssemSizeNoColumn}, New System.Data.DataColumn() {Me.tableAssemblies.assemSizeNoColumn}, false)
        Me.Relations.Add(Me.relationAssemblies_FK00)
        Me.relationAssemblies_FK01 = New System.Data.DataRelation("Assemblies_FK01", New System.Data.DataColumn() {Me.tableProperties.propNoColumn}, New System.Data.DataColumn() {Me.tableAssemblies.propNoColumn}, false)
        Me.Relations.Add(Me.relationAssemblies_FK01)
        Me.relationAssemblyUsage_FK00 = New System.Data.DataRelation("AssemblyUsage_FK00", New System.Data.DataColumn() {Me.tableAssemblyUsagePrice.assemUsagePriceNoColumn}, New System.Data.DataColumn() {Me.tableAssemblyUsage.assemUsagePriceNoColumn}, false)
        Me.Relations.Add(Me.relationAssemblyUsage_FK00)
        Me.relationManagers_FK00 = New System.Data.DataRelation("Managers_FK00", New System.Data.DataColumn() {Me.tablePricingSchemes.manSchemeNoColumn}, New System.Data.DataColumn() {Me.tableManagers.manSchemeNoColumn}, false)
        Me.Relations.Add(Me.relationManagers_FK00)
        Me.relationPrice_FK00 = New System.Data.DataRelation("Price_FK00", New System.Data.DataColumn() {Me.tableAssemblySizes.AssemSizeNoColumn}, New System.Data.DataColumn() {Me.tablePrice.assemSizeNoColumn}, false)
        Me.Relations.Add(Me.relationPrice_FK00)
        Me.relationPrice_FK01 = New System.Data.DataRelation("Price_FK01", New System.Data.DataColumn() {Me.tableAssemblyUsagePrice.assemUsagePriceNoColumn}, New System.Data.DataColumn() {Me.tablePrice.assemUsagePriceNoColumn}, false)
        Me.Relations.Add(Me.relationPrice_FK01)
        Me.relationPrice_FK02 = New System.Data.DataRelation("Price_FK02", New System.Data.DataColumn() {Me.tablePricingSchemes.manSchemeNoColumn}, New System.Data.DataColumn() {Me.tablePrice.manSchemeNoColumn}, false)
        Me.Relations.Add(Me.relationPrice_FK02)
        Me.relationProperties_FK00 = New System.Data.DataRelation("Properties_FK00", New System.Data.DataColumn() {Me.tableManagers.manNoColumn}, New System.Data.DataColumn() {Me.tableProperties.manNoColumn}, false)
        Me.Relations.Add(Me.relationProperties_FK00)
        Me.relationProperties_FK01 = New System.Data.DataRelation("Properties_FK01", New System.Data.DataColumn() {Me.tableMunicipalities.munNoColumn}, New System.Data.DataColumn() {Me.tableProperties.munNoColumn}, false)
        Me.Relations.Add(Me.relationProperties_FK01)
        Me.relationTests_FK00 = New System.Data.DataRelation("Tests_FK00", New System.Data.DataColumn() {Me.tableAssemblies.assemNoColumn}, New System.Data.DataColumn() {Me.tableTests.assemNoColumn}, false)
        Me.Relations.Add(Me.relationTests_FK00)
        Me.relationProperties_FK011 = New System.Data.DataRelation("Properties_FK011", New System.Data.DataColumn() {Me.tableMunicipalitiesList.munNoColumn}, New System.Data.DataColumn() {Me.tableProperties.munNoColumn}, false)
        Me.Relations.Add(Me.relationProperties_FK011)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblies() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblyManufacturer() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblySizes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblyTypes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblyUsage() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblyUsagePrice() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDates() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagers() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMunicipalities() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePrice() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePricingSchemes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProperties() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTesters() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTests() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssembliesWOutDeleted_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDeviceTestsInLastYear_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagersWOutDeleted_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagersXPropertiesXAssemblies_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagersXPropertiesXAssembliesXTests_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePricingSchemeView() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePropertiesWOutDeleted_VW() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeAssemblyInfoByPrimaryKey() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeGetManagersList() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagerInfoByPrimaryKey() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagerNameNoStrtSuite_sel() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePricingList() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePropertyInfoByPrimaryKey() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSelectTestInfo() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTestReports_SEL() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTreeView_SP() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTreeViewAssembliesSearchQuery() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTreeViewManagersSearchQuery() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTreeViewPropertiesSearchQuery() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializef_ManXPropXAssemSearch() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeManagersWOutDeletedList() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMunicipalitiesList() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As qbDataSet = New qbDataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub AssembliesRowChangeEventHandler(ByVal sender As Object, ByVal e As AssembliesRowChangeEvent)
    
    Public Delegate Sub AssemblyManufacturerRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblyManufacturerRowChangeEvent)
    
    Public Delegate Sub AssemblySizesRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblySizesRowChangeEvent)
    
    Public Delegate Sub AssemblyTypesRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblyTypesRowChangeEvent)
    
    Public Delegate Sub AssemblyUsageRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblyUsageRowChangeEvent)
    
    Public Delegate Sub AssemblyUsagePriceRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblyUsagePriceRowChangeEvent)
    
    Public Delegate Sub DatesRowChangeEventHandler(ByVal sender As Object, ByVal e As DatesRowChangeEvent)
    
    Public Delegate Sub ManagersRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagersRowChangeEvent)
    
    Public Delegate Sub MunicipalitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As MunicipalitiesRowChangeEvent)
    
    Public Delegate Sub PriceRowChangeEventHandler(ByVal sender As Object, ByVal e As PriceRowChangeEvent)
    
    Public Delegate Sub PricingSchemesRowChangeEventHandler(ByVal sender As Object, ByVal e As PricingSchemesRowChangeEvent)
    
    Public Delegate Sub PropertiesRowChangeEventHandler(ByVal sender As Object, ByVal e As PropertiesRowChangeEvent)
    
    Public Delegate Sub TestersRowChangeEventHandler(ByVal sender As Object, ByVal e As TestersRowChangeEvent)
    
    Public Delegate Sub TestsRowChangeEventHandler(ByVal sender As Object, ByVal e As TestsRowChangeEvent)
    
    Public Delegate Sub AssembliesWOutDeleted_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As AssembliesWOutDeleted_VWRowChangeEvent)
    
    Public Delegate Sub DeviceTestsInLastYear_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As DeviceTestsInLastYear_VWRowChangeEvent)
    
    Public Delegate Sub ManagersWOutDeleted_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagersWOutDeleted_VWRowChangeEvent)
    
    Public Delegate Sub ManagersXPropertiesXAssemblies_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagersXPropertiesXAssemblies_VWRowChangeEvent)
    
    Public Delegate Sub ManagersXPropertiesXAssembliesXTests_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent)
    
    Public Delegate Sub PricingSchemeViewRowChangeEventHandler(ByVal sender As Object, ByVal e As PricingSchemeViewRowChangeEvent)
    
    Public Delegate Sub PropertiesWOutDeleted_VWRowChangeEventHandler(ByVal sender As Object, ByVal e As PropertiesWOutDeleted_VWRowChangeEvent)
    
    Public Delegate Sub AssemblyInfoByPrimaryKeyRowChangeEventHandler(ByVal sender As Object, ByVal e As AssemblyInfoByPrimaryKeyRowChangeEvent)
    
    Public Delegate Sub GetManagersListRowChangeEventHandler(ByVal sender As Object, ByVal e As GetManagersListRowChangeEvent)
    
    Public Delegate Sub ManagerInfoByPrimaryKeyRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagerInfoByPrimaryKeyRowChangeEvent)
    
    Public Delegate Sub ManagerNameNoStrtSuite_selRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagerNameNoStrtSuite_selRowChangeEvent)
    
    Public Delegate Sub PricingListRowChangeEventHandler(ByVal sender As Object, ByVal e As PricingListRowChangeEvent)
    
    Public Delegate Sub PropertyInfoByPrimaryKeyRowChangeEventHandler(ByVal sender As Object, ByVal e As PropertyInfoByPrimaryKeyRowChangeEvent)
    
    Public Delegate Sub SelectTestInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As SelectTestInfoRowChangeEvent)
    
    Public Delegate Sub TestReports_SELRowChangeEventHandler(ByVal sender As Object, ByVal e As TestReports_SELRowChangeEvent)
    
    Public Delegate Sub TreeView_SPRowChangeEventHandler(ByVal sender As Object, ByVal e As TreeView_SPRowChangeEvent)
    
    Public Delegate Sub TreeViewAssembliesSearchQueryRowChangeEventHandler(ByVal sender As Object, ByVal e As TreeViewAssembliesSearchQueryRowChangeEvent)
    
    Public Delegate Sub TreeViewManagersSearchQueryRowChangeEventHandler(ByVal sender As Object, ByVal e As TreeViewManagersSearchQueryRowChangeEvent)
    
    Public Delegate Sub TreeViewPropertiesSearchQueryRowChangeEventHandler(ByVal sender As Object, ByVal e As TreeViewPropertiesSearchQueryRowChangeEvent)
    
    Public Delegate Sub f_ManXPropXAssemSearchRowChangeEventHandler(ByVal sender As Object, ByVal e As f_ManXPropXAssemSearchRowChangeEvent)
    
    Public Delegate Sub ManagersWOutDeletedListRowChangeEventHandler(ByVal sender As Object, ByVal e As ManagersWOutDeletedListRowChangeEvent)
    
    Public Delegate Sub MunicipalitiesListRowChangeEventHandler(ByVal sender As Object, ByVal e As MunicipalitiesListRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssembliesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        Private columnassemMan As System.Data.DataColumn
        
        Private columnassemMod As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnassemInstDt As System.Data.DataColumn
        
        Private columnassemLoc As System.Data.DataColumn
        
        Private columnassemNotes As System.Data.DataColumn
        
        Private columnassemDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        Private columnAssemManNo As System.Data.DataColumn
        
        Private columnassemTypeNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Assemblies"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemModColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemInstDtColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemInstDt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemLocColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemLoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemTypeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssembliesRow
            Get
                Return CType(Me.Rows(index),AssembliesRow)
            End Get
        End Property
        
        Public Event AssembliesRowChanging As AssembliesRowChangeEventHandler
        
        Public Event AssembliesRowChanged As AssembliesRowChangeEventHandler
        
        Public Event AssembliesRowDeleting As AssembliesRowChangeEventHandler
        
        Public Event AssembliesRowDeleted As AssembliesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssembliesRow(ByVal row As AssembliesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssembliesRow(ByVal parentPropertiesRowByAssemblies_FK01 As PropertiesRow, ByVal assemType As String, ByVal assemMan As String, ByVal assemMod As String, ByVal parentAssemblySizesRowByAssemblies_FK00 As AssemblySizesRow, ByVal assemSerial As String, ByVal assemUsage As String, ByVal assemUsagePriceNo As Integer, ByVal assemInstDt As Date, ByVal assemLoc As String, ByVal assemNotes As String, ByVal assemDeleted As Boolean, ByVal upsize_ts() As Byte, ByVal AssemManNo As Integer, ByVal assemTypeNo As Integer) As AssembliesRow
            Dim rowAssembliesRow As AssembliesRow = CType(Me.NewRow,AssembliesRow)
            rowAssembliesRow.ItemArray = New Object() {Nothing, parentPropertiesRowByAssemblies_FK01(0), assemType, assemMan, assemMod, parentAssemblySizesRowByAssemblies_FK00(0), assemSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, upsize_ts, AssemManNo, assemTypeNo}
            Me.Rows.Add(rowAssembliesRow)
            Return rowAssembliesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemNo(ByVal assemNo As Integer) As AssembliesRow
            Return CType(Me.Rows.Find(New Object() {assemNo}),AssembliesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssembliesDataTable = CType(MyBase.Clone,AssembliesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssembliesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnassemType = MyBase.Columns("assemType")
            Me.columnassemMan = MyBase.Columns("assemMan")
            Me.columnassemMod = MyBase.Columns("assemMod")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnassemInstDt = MyBase.Columns("assemInstDt")
            Me.columnassemLoc = MyBase.Columns("assemLoc")
            Me.columnassemNotes = MyBase.Columns("assemNotes")
            Me.columnassemDeleted = MyBase.Columns("assemDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
            Me.columnAssemManNo = MyBase.Columns("AssemManNo")
            Me.columnassemTypeNo = MyBase.Columns("assemTypeNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.columnassemMan = New System.Data.DataColumn("assemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMan)
            Me.columnassemMod = New System.Data.DataColumn("assemMod", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMod)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnassemInstDt = New System.Data.DataColumn("assemInstDt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemInstDt)
            Me.columnassemLoc = New System.Data.DataColumn("assemLoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemLoc)
            Me.columnassemNotes = New System.Data.DataColumn("assemNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNotes)
            Me.columnassemDeleted = New System.Data.DataColumn("assemDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.columnAssemManNo = New System.Data.DataColumn("AssemManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemManNo)
            Me.columnassemTypeNo = New System.Data.DataColumn("assemTypeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemTypeNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemNo}, true))
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.AllowDBNull = false
            Me.columnassemNo.ReadOnly = true
            Me.columnassemNo.Unique = true
            Me.columnassemType.MaxLength = 50
            Me.columnassemMan.MaxLength = 50
            Me.columnassemMod.MaxLength = 60
            Me.columnassemSerial.MaxLength = 50
            Me.columnassemUsage.MaxLength = 100
            Me.columnassemLoc.MaxLength = 150
            Me.columnassemNotes.MaxLength = 1073741823
            Me.columnassemDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssembliesRow() As AssembliesRow
            Return CType(Me.NewRow,AssembliesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssembliesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssembliesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssembliesRowChangedEvent) Is Nothing) Then
                RaiseEvent AssembliesRowChanged(Me, New AssembliesRowChangeEvent(CType(e.Row,AssembliesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssembliesRowChangingEvent) Is Nothing) Then
                RaiseEvent AssembliesRowChanging(Me, New AssembliesRowChangeEvent(CType(e.Row,AssembliesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssembliesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssembliesRowDeleted(Me, New AssembliesRowChangeEvent(CType(e.Row,AssembliesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssembliesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssembliesRowDeleting(Me, New AssembliesRowChangeEvent(CType(e.Row,AssembliesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssembliesRow(ByVal row As AssembliesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssembliesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblyManufacturerDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssemManNo As System.Data.DataColumn
        
        Private columnAssemMan As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblyManufacturer"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblyManufacturerRow
            Get
                Return CType(Me.Rows(index),AssemblyManufacturerRow)
            End Get
        End Property
        
        Public Event AssemblyManufacturerRowChanging As AssemblyManufacturerRowChangeEventHandler
        
        Public Event AssemblyManufacturerRowChanged As AssemblyManufacturerRowChangeEventHandler
        
        Public Event AssemblyManufacturerRowDeleting As AssemblyManufacturerRowChangeEventHandler
        
        Public Event AssemblyManufacturerRowDeleted As AssemblyManufacturerRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblyManufacturerRow(ByVal row As AssemblyManufacturerRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblyManufacturerRow(ByVal AssemMan As String) As AssemblyManufacturerRow
            Dim rowAssemblyManufacturerRow As AssemblyManufacturerRow = CType(Me.NewRow,AssemblyManufacturerRow)
            rowAssemblyManufacturerRow.ItemArray = New Object() {Nothing, AssemMan}
            Me.Rows.Add(rowAssemblyManufacturerRow)
            Return rowAssemblyManufacturerRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAssemManNo(ByVal AssemManNo As Integer) As AssemblyManufacturerRow
            Return CType(Me.Rows.Find(New Object() {AssemManNo}),AssemblyManufacturerRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblyManufacturerDataTable = CType(MyBase.Clone,AssemblyManufacturerDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblyManufacturerDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAssemManNo = MyBase.Columns("AssemManNo")
            Me.columnAssemMan = MyBase.Columns("AssemMan")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAssemManNo = New System.Data.DataColumn("AssemManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemManNo)
            Me.columnAssemMan = New System.Data.DataColumn("AssemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemMan)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAssemManNo}, true))
            Me.columnAssemManNo.AutoIncrement = true
            Me.columnAssemManNo.AllowDBNull = false
            Me.columnAssemManNo.ReadOnly = true
            Me.columnAssemManNo.Unique = true
            Me.columnAssemMan.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblyManufacturerRow() As AssemblyManufacturerRow
            Return CType(Me.NewRow,AssemblyManufacturerRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblyManufacturerRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblyManufacturerRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblyManufacturerRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblyManufacturerRowChanged(Me, New AssemblyManufacturerRowChangeEvent(CType(e.Row,AssemblyManufacturerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblyManufacturerRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblyManufacturerRowChanging(Me, New AssemblyManufacturerRowChangeEvent(CType(e.Row,AssemblyManufacturerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblyManufacturerRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblyManufacturerRowDeleted(Me, New AssemblyManufacturerRowChangeEvent(CType(e.Row,AssemblyManufacturerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblyManufacturerRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblyManufacturerRowDeleting(Me, New AssemblyManufacturerRowChangeEvent(CType(e.Row,AssemblyManufacturerRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblyManufacturerRow(ByVal row As AssemblyManufacturerRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblyManufacturerDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblySizesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssemSizeNo As System.Data.DataColumn
        
        Private columnAssemSize As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblySizes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemSizeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemSize
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblySizesRow
            Get
                Return CType(Me.Rows(index),AssemblySizesRow)
            End Get
        End Property
        
        Public Event AssemblySizesRowChanging As AssemblySizesRowChangeEventHandler
        
        Public Event AssemblySizesRowChanged As AssemblySizesRowChangeEventHandler
        
        Public Event AssemblySizesRowDeleting As AssemblySizesRowChangeEventHandler
        
        Public Event AssemblySizesRowDeleted As AssemblySizesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblySizesRow(ByVal row As AssemblySizesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblySizesRow(ByVal AssemSize As String) As AssemblySizesRow
            Dim rowAssemblySizesRow As AssemblySizesRow = CType(Me.NewRow,AssemblySizesRow)
            rowAssemblySizesRow.ItemArray = New Object() {Nothing, AssemSize}
            Me.Rows.Add(rowAssemblySizesRow)
            Return rowAssemblySizesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByAssemSizeNo(ByVal AssemSizeNo As Integer) As AssemblySizesRow
            Return CType(Me.Rows.Find(New Object() {AssemSizeNo}),AssemblySizesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblySizesDataTable = CType(MyBase.Clone,AssemblySizesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblySizesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAssemSizeNo = MyBase.Columns("AssemSizeNo")
            Me.columnAssemSize = MyBase.Columns("AssemSize")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAssemSizeNo = New System.Data.DataColumn("AssemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemSizeNo)
            Me.columnAssemSize = New System.Data.DataColumn("AssemSize", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemSize)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAssemSizeNo}, true))
            Me.columnAssemSizeNo.AutoIncrement = true
            Me.columnAssemSizeNo.AllowDBNull = false
            Me.columnAssemSizeNo.ReadOnly = true
            Me.columnAssemSizeNo.Unique = true
            Me.columnAssemSize.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblySizesRow() As AssemblySizesRow
            Return CType(Me.NewRow,AssemblySizesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblySizesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblySizesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblySizesRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblySizesRowChanged(Me, New AssemblySizesRowChangeEvent(CType(e.Row,AssemblySizesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblySizesRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblySizesRowChanging(Me, New AssemblySizesRowChangeEvent(CType(e.Row,AssemblySizesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblySizesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblySizesRowDeleted(Me, New AssemblySizesRowChangeEvent(CType(e.Row,AssemblySizesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblySizesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblySizesRowDeleting(Me, New AssemblySizesRowChangeEvent(CType(e.Row,AssemblySizesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblySizesRow(ByVal row As AssemblySizesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblySizesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblyTypesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemTypeNo As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblyTypes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemTypeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblyTypesRow
            Get
                Return CType(Me.Rows(index),AssemblyTypesRow)
            End Get
        End Property
        
        Public Event AssemblyTypesRowChanging As AssemblyTypesRowChangeEventHandler
        
        Public Event AssemblyTypesRowChanged As AssemblyTypesRowChangeEventHandler
        
        Public Event AssemblyTypesRowDeleting As AssemblyTypesRowChangeEventHandler
        
        Public Event AssemblyTypesRowDeleted As AssemblyTypesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblyTypesRow(ByVal row As AssemblyTypesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblyTypesRow(ByVal assemType As String) As AssemblyTypesRow
            Dim rowAssemblyTypesRow As AssemblyTypesRow = CType(Me.NewRow,AssemblyTypesRow)
            rowAssemblyTypesRow.ItemArray = New Object() {Nothing, assemType}
            Me.Rows.Add(rowAssemblyTypesRow)
            Return rowAssemblyTypesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemTypeNo(ByVal assemTypeNo As Integer) As AssemblyTypesRow
            Return CType(Me.Rows.Find(New Object() {assemTypeNo}),AssemblyTypesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblyTypesDataTable = CType(MyBase.Clone,AssemblyTypesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblyTypesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemTypeNo = MyBase.Columns("assemTypeNo")
            Me.columnassemType = MyBase.Columns("assemType")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemTypeNo = New System.Data.DataColumn("assemTypeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemTypeNo)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemTypeNo}, true))
            Me.columnassemTypeNo.AutoIncrement = true
            Me.columnassemTypeNo.AllowDBNull = false
            Me.columnassemTypeNo.ReadOnly = true
            Me.columnassemTypeNo.Unique = true
            Me.columnassemType.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblyTypesRow() As AssemblyTypesRow
            Return CType(Me.NewRow,AssemblyTypesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblyTypesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblyTypesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblyTypesRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblyTypesRowChanged(Me, New AssemblyTypesRowChangeEvent(CType(e.Row,AssemblyTypesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblyTypesRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblyTypesRowChanging(Me, New AssemblyTypesRowChangeEvent(CType(e.Row,AssemblyTypesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblyTypesRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblyTypesRowDeleted(Me, New AssemblyTypesRowChangeEvent(CType(e.Row,AssemblyTypesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblyTypesRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblyTypesRowDeleting(Me, New AssemblyTypesRowChangeEvent(CType(e.Row,AssemblyTypesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblyTypesRow(ByVal row As AssemblyTypesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblyTypesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblyUsageDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemUsageNo As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblyUsage"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsageNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblyUsageRow
            Get
                Return CType(Me.Rows(index),AssemblyUsageRow)
            End Get
        End Property
        
        Public Event AssemblyUsageRowChanging As AssemblyUsageRowChangeEventHandler
        
        Public Event AssemblyUsageRowChanged As AssemblyUsageRowChangeEventHandler
        
        Public Event AssemblyUsageRowDeleting As AssemblyUsageRowChangeEventHandler
        
        Public Event AssemblyUsageRowDeleted As AssemblyUsageRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblyUsageRow(ByVal row As AssemblyUsageRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblyUsageRow(ByVal assemUsage As String, ByVal parentAssemblyUsagePriceRowByAssemblyUsage_FK00 As AssemblyUsagePriceRow) As AssemblyUsageRow
            Dim rowAssemblyUsageRow As AssemblyUsageRow = CType(Me.NewRow,AssemblyUsageRow)
            rowAssemblyUsageRow.ItemArray = New Object() {Nothing, assemUsage, parentAssemblyUsagePriceRowByAssemblyUsage_FK00(0)}
            Me.Rows.Add(rowAssemblyUsageRow)
            Return rowAssemblyUsageRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemUsageNo(ByVal assemUsageNo As Integer) As AssemblyUsageRow
            Return CType(Me.Rows.Find(New Object() {assemUsageNo}),AssemblyUsageRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblyUsageDataTable = CType(MyBase.Clone,AssemblyUsageDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblyUsageDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemUsageNo = MyBase.Columns("assemUsageNo")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemUsageNo = New System.Data.DataColumn("assemUsageNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsageNo)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemUsageNo}, true))
            Me.columnassemUsageNo.AutoIncrement = true
            Me.columnassemUsageNo.AllowDBNull = false
            Me.columnassemUsageNo.ReadOnly = true
            Me.columnassemUsageNo.Unique = true
            Me.columnassemUsage.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblyUsageRow() As AssemblyUsageRow
            Return CType(Me.NewRow,AssemblyUsageRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblyUsageRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblyUsageRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblyUsageRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblyUsageRowChanged(Me, New AssemblyUsageRowChangeEvent(CType(e.Row,AssemblyUsageRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblyUsageRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblyUsageRowChanging(Me, New AssemblyUsageRowChangeEvent(CType(e.Row,AssemblyUsageRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblyUsageRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblyUsageRowDeleted(Me, New AssemblyUsageRowChangeEvent(CType(e.Row,AssemblyUsageRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblyUsageRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblyUsageRowDeleting(Me, New AssemblyUsageRowChangeEvent(CType(e.Row,AssemblyUsageRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblyUsageRow(ByVal row As AssemblyUsageRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblyUsageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblyUsagePriceDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnassemUsagePriceName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblyUsagePrice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblyUsagePriceRow
            Get
                Return CType(Me.Rows(index),AssemblyUsagePriceRow)
            End Get
        End Property
        
        Public Event AssemblyUsagePriceRowChanging As AssemblyUsagePriceRowChangeEventHandler
        
        Public Event AssemblyUsagePriceRowChanged As AssemblyUsagePriceRowChangeEventHandler
        
        Public Event AssemblyUsagePriceRowDeleting As AssemblyUsagePriceRowChangeEventHandler
        
        Public Event AssemblyUsagePriceRowDeleted As AssemblyUsagePriceRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblyUsagePriceRow(ByVal row As AssemblyUsagePriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblyUsagePriceRow(ByVal assemUsagePriceName As String) As AssemblyUsagePriceRow
            Dim rowAssemblyUsagePriceRow As AssemblyUsagePriceRow = CType(Me.NewRow,AssemblyUsagePriceRow)
            rowAssemblyUsagePriceRow.ItemArray = New Object() {Nothing, assemUsagePriceName}
            Me.Rows.Add(rowAssemblyUsagePriceRow)
            Return rowAssemblyUsagePriceRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemUsagePriceNo(ByVal assemUsagePriceNo As Integer) As AssemblyUsagePriceRow
            Return CType(Me.Rows.Find(New Object() {assemUsagePriceNo}),AssemblyUsagePriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblyUsagePriceDataTable = CType(MyBase.Clone,AssemblyUsagePriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblyUsagePriceDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnassemUsagePriceName = MyBase.Columns("assemUsagePriceName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnassemUsagePriceName = New System.Data.DataColumn("assemUsagePriceName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemUsagePriceNo}, true))
            Me.columnassemUsagePriceNo.AutoIncrement = true
            Me.columnassemUsagePriceNo.AllowDBNull = false
            Me.columnassemUsagePriceNo.ReadOnly = true
            Me.columnassemUsagePriceNo.Unique = true
            Me.columnassemUsagePriceName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblyUsagePriceRow() As AssemblyUsagePriceRow
            Return CType(Me.NewRow,AssemblyUsagePriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblyUsagePriceRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblyUsagePriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblyUsagePriceRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblyUsagePriceRowChanged(Me, New AssemblyUsagePriceRowChangeEvent(CType(e.Row,AssemblyUsagePriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblyUsagePriceRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblyUsagePriceRowChanging(Me, New AssemblyUsagePriceRowChangeEvent(CType(e.Row,AssemblyUsagePriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblyUsagePriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblyUsagePriceRowDeleted(Me, New AssemblyUsagePriceRowChangeEvent(CType(e.Row,AssemblyUsagePriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblyUsagePriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblyUsagePriceRowDeleting(Me, New AssemblyUsagePriceRowChangeEvent(CType(e.Row,AssemblyUsagePriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblyUsagePriceRow(ByVal row As AssemblyUsagePriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblyUsagePriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnRecord As System.Data.DataColumn
        
        Private columnStartDate As System.Data.DataColumn
        
        Private columnFinishDate As System.Data.DataColumn
        
        Private columnSingleDate As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Dates"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordColumn() As System.Data.DataColumn
            Get
                Return Me.columnRecord
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinishDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnFinishDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SingleDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnSingleDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatesRow
            Get
                Return CType(Me.Rows(index),DatesRow)
            End Get
        End Property
        
        Public Event DatesRowChanging As DatesRowChangeEventHandler
        
        Public Event DatesRowChanged As DatesRowChangeEventHandler
        
        Public Event DatesRowDeleting As DatesRowChangeEventHandler
        
        Public Event DatesRowDeleted As DatesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatesRow(ByVal row As DatesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatesRow(ByVal Record As Integer, ByVal StartDate As Date, ByVal FinishDate As Date, ByVal SingleDate As Date) As DatesRow
            Dim rowDatesRow As DatesRow = CType(Me.NewRow,DatesRow)
            rowDatesRow.ItemArray = New Object() {Record, StartDate, FinishDate, SingleDate}
            Me.Rows.Add(rowDatesRow)
            Return rowDatesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRecord(ByVal Record As Integer) As DatesRow
            Return CType(Me.Rows.Find(New Object() {Record}),DatesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DatesDataTable = CType(MyBase.Clone,DatesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DatesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRecord = MyBase.Columns("Record")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnFinishDate = MyBase.Columns("FinishDate")
            Me.columnSingleDate = MyBase.Columns("SingleDate")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRecord = New System.Data.DataColumn("Record", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecord)
            Me.columnStartDate = New System.Data.DataColumn("StartDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnFinishDate = New System.Data.DataColumn("FinishDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinishDate)
            Me.columnSingleDate = New System.Data.DataColumn("SingleDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSingleDate)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnRecord}, true))
            Me.columnRecord.AllowDBNull = false
            Me.columnRecord.Unique = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatesRow() As DatesRow
            Return CType(Me.NewRow,DatesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DatesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DatesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatesRowChangedEvent) Is Nothing) Then
                RaiseEvent DatesRowChanged(Me, New DatesRowChangeEvent(CType(e.Row,DatesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatesRowChangingEvent) Is Nothing) Then
                RaiseEvent DatesRowChanging(Me, New DatesRowChangeEvent(CType(e.Row,DatesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatesRowDeleted(Me, New DatesRowChangeEvent(CType(e.Row,DatesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatesRowDeleting(Me, New DatesRowChangeEvent(CType(e.Row,DatesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatesRow(ByVal row As DatesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagersDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanFax As System.Data.DataColumn
        
        Private columnmanEmail As System.Data.DataColumn
        
        Private columnmanNotes As System.Data.DataColumn
        
        Private columnmanCurAcct As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        Private columnmanLogoPath As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Managers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCurAcctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCurAcct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manLogoPathColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanLogoPath
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagersRow
            Get
                Return CType(Me.Rows(index),ManagersRow)
            End Get
        End Property
        
        Public Event ManagersRowChanging As ManagersRowChangeEventHandler
        
        Public Event ManagersRowChanged As ManagersRowChangeEventHandler
        
        Public Event ManagersRowDeleting As ManagersRowChangeEventHandler
        
        Public Event ManagersRowDeleted As ManagersRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagersRow(ByVal row As ManagersRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagersRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manSuite As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal manCntct As String,  _
                    ByVal manPhone As String,  _
                    ByVal manFax As String,  _
                    ByVal manEmail As String,  _
                    ByVal manNotes As String,  _
                    ByVal manCurAcct As Boolean,  _
                    ByVal parentPricingSchemesRowByManagers_FK00 As PricingSchemesRow,  _
                    ByVal manDeleted As Boolean,  _
                    ByVal upsize_ts() As Byte,  _
                    ByVal manLogoPath As String) As ManagersRow
            Dim rowManagersRow As ManagersRow = CType(Me.NewRow,ManagersRow)
            rowManagersRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, manNotes, manCurAcct, parentPricingSchemesRowByManagers_FK00(0), manDeleted, upsize_ts, manLogoPath}
            Me.Rows.Add(rowManagersRow)
            Return rowManagersRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As ManagersRow
            Return CType(Me.Rows.Find(New Object() {manNo}),ManagersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagersDataTable = CType(MyBase.Clone,ManagersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagersDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanFax = MyBase.Columns("manFax")
            Me.columnmanEmail = MyBase.Columns("manEmail")
            Me.columnmanNotes = MyBase.Columns("manNotes")
            Me.columnmanCurAcct = MyBase.Columns("manCurAcct")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
            Me.columnmanLogoPath = MyBase.Columns("manLogoPath")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanFax = New System.Data.DataColumn("manFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanFax)
            Me.columnmanEmail = New System.Data.DataColumn("manEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanEmail)
            Me.columnmanNotes = New System.Data.DataColumn("manNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNotes)
            Me.columnmanCurAcct = New System.Data.DataColumn("manCurAcct", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCurAcct)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.columnmanLogoPath = New System.Data.DataColumn("manLogoPath", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanLogoPath)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanFax.MaxLength = 30
            Me.columnmanEmail.MaxLength = 50
            Me.columnmanNotes.MaxLength = 1073741823
            Me.columnmanCurAcct.AllowDBNull = false
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
            Me.columnmanLogoPath.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagersRow() As ManagersRow
            Return CType(Me.NewRow,ManagersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagersRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagersRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagersRowChanged(Me, New ManagersRowChangeEvent(CType(e.Row,ManagersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagersRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagersRowChanging(Me, New ManagersRowChangeEvent(CType(e.Row,ManagersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagersRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagersRowDeleted(Me, New ManagersRowChangeEvent(CType(e.Row,ManagersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagersRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagersRowDeleting(Me, New ManagersRowChangeEvent(CType(e.Row,ManagersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagersRow(ByVal row As ManagersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MunicipalitiesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnmunName As System.Data.DataColumn
        
        Private columnmunStrtAddr As System.Data.DataColumn
        
        Private columnmunCity As System.Data.DataColumn
        
        Private columnmunState As System.Data.DataColumn
        
        Private columnmunZip As System.Data.DataColumn
        
        Private columnmunPhone As System.Data.DataColumn
        
        Private columnmunFax As System.Data.DataColumn
        
        Private columnmunCntct As System.Data.DataColumn
        
        Private columnmunEmail As System.Data.DataColumn
        
        Private columnmunDept As System.Data.DataColumn
        
        Private columnmunPref As System.Data.DataColumn
        
        Private columnmunDeleted As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Municipalities"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munStrtAddrColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunStrtAddr
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munDeptColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunDept
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munPrefColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunPref
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MunicipalitiesRow
            Get
                Return CType(Me.Rows(index),MunicipalitiesRow)
            End Get
        End Property
        
        Public Event MunicipalitiesRowChanging As MunicipalitiesRowChangeEventHandler
        
        Public Event MunicipalitiesRowChanged As MunicipalitiesRowChangeEventHandler
        
        Public Event MunicipalitiesRowDeleting As MunicipalitiesRowChangeEventHandler
        
        Public Event MunicipalitiesRowDeleted As MunicipalitiesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMunicipalitiesRow(ByVal row As MunicipalitiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMunicipalitiesRow(ByVal munName As String, ByVal munStrtAddr As String, ByVal munCity As String, ByVal munState As String, ByVal munZip As String, ByVal munPhone As String, ByVal munFax As String, ByVal munCntct As String, ByVal munEmail As String, ByVal munDept As String, ByVal munPref As String, ByVal munDeleted As Boolean) As MunicipalitiesRow
            Dim rowMunicipalitiesRow As MunicipalitiesRow = CType(Me.NewRow,MunicipalitiesRow)
            rowMunicipalitiesRow.ItemArray = New Object() {Nothing, munName, munStrtAddr, munCity, munState, munZip, munPhone, munFax, munCntct, munEmail, munDept, munPref, munDeleted}
            Me.Rows.Add(rowMunicipalitiesRow)
            Return rowMunicipalitiesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymunNo(ByVal munNo As Integer) As MunicipalitiesRow
            Return CType(Me.Rows.Find(New Object() {munNo}),MunicipalitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MunicipalitiesDataTable = CType(MyBase.Clone,MunicipalitiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MunicipalitiesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnmunName = MyBase.Columns("munName")
            Me.columnmunStrtAddr = MyBase.Columns("munStrtAddr")
            Me.columnmunCity = MyBase.Columns("munCity")
            Me.columnmunState = MyBase.Columns("munState")
            Me.columnmunZip = MyBase.Columns("munZip")
            Me.columnmunPhone = MyBase.Columns("munPhone")
            Me.columnmunFax = MyBase.Columns("munFax")
            Me.columnmunCntct = MyBase.Columns("munCntct")
            Me.columnmunEmail = MyBase.Columns("munEmail")
            Me.columnmunDept = MyBase.Columns("munDept")
            Me.columnmunPref = MyBase.Columns("munPref")
            Me.columnmunDeleted = MyBase.Columns("munDeleted")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnmunName = New System.Data.DataColumn("munName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunName)
            Me.columnmunStrtAddr = New System.Data.DataColumn("munStrtAddr", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunStrtAddr)
            Me.columnmunCity = New System.Data.DataColumn("munCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunCity)
            Me.columnmunState = New System.Data.DataColumn("munState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunState)
            Me.columnmunZip = New System.Data.DataColumn("munZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunZip)
            Me.columnmunPhone = New System.Data.DataColumn("munPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunPhone)
            Me.columnmunFax = New System.Data.DataColumn("munFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunFax)
            Me.columnmunCntct = New System.Data.DataColumn("munCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunCntct)
            Me.columnmunEmail = New System.Data.DataColumn("munEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunEmail)
            Me.columnmunDept = New System.Data.DataColumn("munDept", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunDept)
            Me.columnmunPref = New System.Data.DataColumn("munPref", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunPref)
            Me.columnmunDeleted = New System.Data.DataColumn("munDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunDeleted)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmunNo}, true))
            Me.columnmunNo.AutoIncrement = true
            Me.columnmunNo.AllowDBNull = false
            Me.columnmunNo.ReadOnly = true
            Me.columnmunNo.Unique = true
            Me.columnmunName.MaxLength = 255
            Me.columnmunStrtAddr.MaxLength = 255
            Me.columnmunCity.MaxLength = 255
            Me.columnmunState.MaxLength = 255
            Me.columnmunZip.MaxLength = 255
            Me.columnmunPhone.MaxLength = 255
            Me.columnmunFax.MaxLength = 255
            Me.columnmunCntct.MaxLength = 255
            Me.columnmunEmail.MaxLength = 255
            Me.columnmunDept.MaxLength = 255
            Me.columnmunPref.MaxLength = 50
            Me.columnmunDeleted.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMunicipalitiesRow() As MunicipalitiesRow
            Return CType(Me.NewRow,MunicipalitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MunicipalitiesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MunicipalitiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MunicipalitiesRowChangedEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesRowChanged(Me, New MunicipalitiesRowChangeEvent(CType(e.Row,MunicipalitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MunicipalitiesRowChangingEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesRowChanging(Me, New MunicipalitiesRowChangeEvent(CType(e.Row,MunicipalitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MunicipalitiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesRowDeleted(Me, New MunicipalitiesRowChangeEvent(CType(e.Row,MunicipalitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MunicipalitiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesRowDeleting(Me, New MunicipalitiesRowChangeEvent(CType(e.Row,MunicipalitiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMunicipalitiesRow(ByVal row As MunicipalitiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MunicipalitiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PriceDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpriceNo As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnprice As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Price"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceColumn() As System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PriceRow
            Get
                Return CType(Me.Rows(index),PriceRow)
            End Get
        End Property
        
        Public Event PriceRowChanging As PriceRowChangeEventHandler
        
        Public Event PriceRowChanged As PriceRowChangeEventHandler
        
        Public Event PriceRowDeleting As PriceRowChangeEventHandler
        
        Public Event PriceRowDeleted As PriceRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPriceRow(ByVal row As PriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPriceRow(ByVal parentPricingSchemesRowByPrice_FK02 As PricingSchemesRow, ByVal parentAssemblySizesRowByPrice_FK00 As AssemblySizesRow, ByVal parentAssemblyUsagePriceRowByPrice_FK01 As AssemblyUsagePriceRow, ByVal price As Double, ByVal upsize_ts() As Byte) As PriceRow
            Dim rowPriceRow As PriceRow = CType(Me.NewRow,PriceRow)
            rowPriceRow.ItemArray = New Object() {Nothing, parentPricingSchemesRowByPrice_FK02(0), parentAssemblySizesRowByPrice_FK00(0), parentAssemblyUsagePriceRowByPrice_FK01(0), price, upsize_ts}
            Me.Rows.Add(rowPriceRow)
            Return rowPriceRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypriceNo(ByVal priceNo As Integer) As PriceRow
            Return CType(Me.Rows.Find(New Object() {priceNo}),PriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PriceDataTable = CType(MyBase.Clone,PriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PriceDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpriceNo = MyBase.Columns("priceNo")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnprice = MyBase.Columns("price")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpriceNo = New System.Data.DataColumn("priceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriceNo)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnprice = New System.Data.DataColumn("price", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpriceNo}, true))
            Me.columnpriceNo.AutoIncrement = true
            Me.columnpriceNo.AllowDBNull = false
            Me.columnpriceNo.ReadOnly = true
            Me.columnpriceNo.Unique = true
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPriceRow() As PriceRow
            Return CType(Me.NewRow,PriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PriceRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PriceRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PriceRowChangedEvent) Is Nothing) Then
                RaiseEvent PriceRowChanged(Me, New PriceRowChangeEvent(CType(e.Row,PriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PriceRowChangingEvent) Is Nothing) Then
                RaiseEvent PriceRowChanging(Me, New PriceRowChangeEvent(CType(e.Row,PriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent PriceRowDeleted(Me, New PriceRowChangeEvent(CType(e.Row,PriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent PriceRowDeleting(Me, New PriceRowChangeEvent(CType(e.Row,PriceRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePriceRow(ByVal row As PriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PricingSchemesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanSchemeName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PricingSchemes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PricingSchemesRow
            Get
                Return CType(Me.Rows(index),PricingSchemesRow)
            End Get
        End Property
        
        Public Event PricingSchemesRowChanging As PricingSchemesRowChangeEventHandler
        
        Public Event PricingSchemesRowChanged As PricingSchemesRowChangeEventHandler
        
        Public Event PricingSchemesRowDeleting As PricingSchemesRowChangeEventHandler
        
        Public Event PricingSchemesRowDeleted As PricingSchemesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPricingSchemesRow(ByVal row As PricingSchemesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPricingSchemesRow(ByVal manSchemeName As String) As PricingSchemesRow
            Dim rowPricingSchemesRow As PricingSchemesRow = CType(Me.NewRow,PricingSchemesRow)
            rowPricingSchemesRow.ItemArray = New Object() {Nothing, manSchemeName}
            Me.Rows.Add(rowPricingSchemesRow)
            Return rowPricingSchemesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanSchemeNo(ByVal manSchemeNo As Integer) As PricingSchemesRow
            Return CType(Me.Rows.Find(New Object() {manSchemeNo}),PricingSchemesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PricingSchemesDataTable = CType(MyBase.Clone,PricingSchemesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PricingSchemesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanSchemeName = MyBase.Columns("manSchemeName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanSchemeName = New System.Data.DataColumn("manSchemeName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanSchemeNo}, true))
            Me.columnmanSchemeNo.AutoIncrement = true
            Me.columnmanSchemeNo.AllowDBNull = false
            Me.columnmanSchemeNo.ReadOnly = true
            Me.columnmanSchemeNo.Unique = true
            Me.columnmanSchemeName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPricingSchemesRow() As PricingSchemesRow
            Return CType(Me.NewRow,PricingSchemesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PricingSchemesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PricingSchemesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PricingSchemesRowChangedEvent) Is Nothing) Then
                RaiseEvent PricingSchemesRowChanged(Me, New PricingSchemesRowChangeEvent(CType(e.Row,PricingSchemesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PricingSchemesRowChangingEvent) Is Nothing) Then
                RaiseEvent PricingSchemesRowChanging(Me, New PricingSchemesRowChangeEvent(CType(e.Row,PricingSchemesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PricingSchemesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PricingSchemesRowDeleted(Me, New PricingSchemesRowChangeEvent(CType(e.Row,PricingSchemesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PricingSchemesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PricingSchemesRowDeleting(Me, New PricingSchemesRowChangeEvent(CType(e.Row,PricingSchemesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePricingSchemesRow(ByVal row As PricingSchemesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PricingSchemesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PropertiesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropCon As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnpropPhone As System.Data.DataColumn
        
        Private columnpropFax As System.Data.DataColumn
        
        Private columnpropEmail As System.Data.DataColumn
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnpropPrevManNo As System.Data.DataColumn
        
        Private columnretestTo As System.Data.DataColumn
        
        Private columnpropNotes As System.Data.DataColumn
        
        Private columnpropDeleted As System.Data.DataColumn
        
        Private columnpropAdded As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Properties"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propConColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPrevManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPrevManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property retestToColumn() As System.Data.DataColumn
            Get
                Return Me.columnretestTo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PropertiesRow
            Get
                Return CType(Me.Rows(index),PropertiesRow)
            End Get
        End Property
        
        Public Event PropertiesRowChanging As PropertiesRowChangeEventHandler
        
        Public Event PropertiesRowChanged As PropertiesRowChangeEventHandler
        
        Public Event PropertiesRowDeleting As PropertiesRowChangeEventHandler
        
        Public Event PropertiesRowDeleted As PropertiesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPropertiesRow(ByVal row As PropertiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPropertiesRow( _
                    ByVal parentManagersRowByProperties_FK00 As ManagersRow,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal parentMunicipalitiesRowByProperties_FK01 As MunicipalitiesRow,  _
                    ByVal propPrevManNo As Integer,  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As Date,  _
                    ByVal upsize_ts() As Byte) As PropertiesRow
            Dim rowPropertiesRow As PropertiesRow = CType(Me.NewRow,PropertiesRow)
            rowPropertiesRow.ItemArray = New Object() {Nothing, parentManagersRowByProperties_FK00(0), propName, storeNo, propCon, propStrt, propCity, propState, propZip, propPhone, propFax, propEmail, parentMunicipalitiesRowByProperties_FK01(0), propPrevManNo, retestTo, propNotes, propDeleted, propAdded, upsize_ts}
            Me.Rows.Add(rowPropertiesRow)
            Return rowPropertiesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypropNo(ByVal propNo As Integer) As PropertiesRow
            Return CType(Me.Rows.Find(New Object() {propNo}),PropertiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PropertiesDataTable = CType(MyBase.Clone,PropertiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PropertiesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropCon = MyBase.Columns("propCon")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnpropPhone = MyBase.Columns("propPhone")
            Me.columnpropFax = MyBase.Columns("propFax")
            Me.columnpropEmail = MyBase.Columns("propEmail")
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnpropPrevManNo = MyBase.Columns("propPrevManNo")
            Me.columnretestTo = MyBase.Columns("retestTo")
            Me.columnpropNotes = MyBase.Columns("propNotes")
            Me.columnpropDeleted = MyBase.Columns("propDeleted")
            Me.columnpropAdded = MyBase.Columns("propAdded")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropCon = New System.Data.DataColumn("propCon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCon)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnpropPhone = New System.Data.DataColumn("propPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPhone)
            Me.columnpropFax = New System.Data.DataColumn("propFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropFax)
            Me.columnpropEmail = New System.Data.DataColumn("propEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropEmail)
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnpropPrevManNo = New System.Data.DataColumn("propPrevManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPrevManNo)
            Me.columnretestTo = New System.Data.DataColumn("retestTo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretestTo)
            Me.columnpropNotes = New System.Data.DataColumn("propNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNotes)
            Me.columnpropDeleted = New System.Data.DataColumn("propDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropDeleted)
            Me.columnpropAdded = New System.Data.DataColumn("propAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropAdded)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpropNo}, true))
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.AllowDBNull = false
            Me.columnpropNo.ReadOnly = true
            Me.columnpropNo.Unique = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropCon.MaxLength = 150
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnpropPhone.MaxLength = 30
            Me.columnpropFax.MaxLength = 30
            Me.columnpropEmail.MaxLength = 50
            Me.columnretestTo.MaxLength = 30
            Me.columnpropNotes.MaxLength = 1073741823
            Me.columnpropDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPropertiesRow() As PropertiesRow
            Return CType(Me.NewRow,PropertiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PropertiesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PropertiesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PropertiesRowChangedEvent) Is Nothing) Then
                RaiseEvent PropertiesRowChanged(Me, New PropertiesRowChangeEvent(CType(e.Row,PropertiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PropertiesRowChangingEvent) Is Nothing) Then
                RaiseEvent PropertiesRowChanging(Me, New PropertiesRowChangeEvent(CType(e.Row,PropertiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PropertiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PropertiesRowDeleted(Me, New PropertiesRowChangeEvent(CType(e.Row,PropertiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PropertiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PropertiesRowDeleting(Me, New PropertiesRowChangeEvent(CType(e.Row,PropertiesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePropertiesRow(ByVal row As PropertiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PropertiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TestersDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columntstrNo As System.Data.DataColumn
        
        Private columntstrName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Testers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNameColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TestersRow
            Get
                Return CType(Me.Rows(index),TestersRow)
            End Get
        End Property
        
        Public Event TestersRowChanging As TestersRowChangeEventHandler
        
        Public Event TestersRowChanged As TestersRowChangeEventHandler
        
        Public Event TestersRowDeleting As TestersRowChangeEventHandler
        
        Public Event TestersRowDeleted As TestersRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTestersRow(ByVal row As TestersRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTestersRow(ByVal tstrName As String) As TestersRow
            Dim rowTestersRow As TestersRow = CType(Me.NewRow,TestersRow)
            rowTestersRow.ItemArray = New Object() {Nothing, tstrName}
            Me.Rows.Add(rowTestersRow)
            Return rowTestersRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBytstrNo(ByVal tstrNo As Integer) As TestersRow
            Return CType(Me.Rows.Find(New Object() {tstrNo}),TestersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TestersDataTable = CType(MyBase.Clone,TestersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TestersDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntstrNo = MyBase.Columns("tstrNo")
            Me.columntstrName = MyBase.Columns("tstrName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntstrNo = New System.Data.DataColumn("tstrNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrNo)
            Me.columntstrName = New System.Data.DataColumn("tstrName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columntstrNo}, true))
            Me.columntstrNo.AutoIncrement = true
            Me.columntstrNo.AllowDBNull = false
            Me.columntstrNo.ReadOnly = true
            Me.columntstrNo.Unique = true
            Me.columntstrName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTestersRow() As TestersRow
            Return CType(Me.NewRow,TestersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TestersRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TestersRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TestersRowChangedEvent) Is Nothing) Then
                RaiseEvent TestersRowChanged(Me, New TestersRowChangeEvent(CType(e.Row,TestersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TestersRowChangingEvent) Is Nothing) Then
                RaiseEvent TestersRowChanging(Me, New TestersRowChangeEvent(CType(e.Row,TestersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TestersRowDeletedEvent) Is Nothing) Then
                RaiseEvent TestersRowDeleted(Me, New TestersRowChangeEvent(CType(e.Row,TestersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TestersRowDeletingEvent) Is Nothing) Then
                RaiseEvent TestersRowDeleting(Me, New TestersRowChangeEvent(CType(e.Row,TestersRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTestersRow(ByVal row As TestersRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TestersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TestsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columntestNo As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columntestDate As System.Data.DataColumn
        
        Private columntestPerformed As System.Data.DataColumn
        
        Private columntestPass As System.Data.DataColumn
        
        Private columntestHours As System.Data.DataColumn
        
        Private columnPONo As System.Data.DataColumn
        
        Private columntstrName As System.Data.DataColumn
        
        Private columnNotes As System.Data.DataColumn
        
        Private columntestDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        Private columntstrNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Tests"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntestNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPerformedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPerformed
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPassColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testHoursColumn() As System.Data.DataColumn
            Get
                Return Me.columntestHours
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNameColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TestsRow
            Get
                Return CType(Me.Rows(index),TestsRow)
            End Get
        End Property
        
        Public Event TestsRowChanging As TestsRowChangeEventHandler
        
        Public Event TestsRowChanged As TestsRowChangeEventHandler
        
        Public Event TestsRowDeleting As TestsRowChangeEventHandler
        
        Public Event TestsRowDeleted As TestsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTestsRow(ByVal row As TestsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTestsRow(ByVal parentAssembliesRowByTests_FK00 As AssembliesRow, ByVal testDate As Date, ByVal testPerformed As Boolean, ByVal testPass As Boolean, ByVal testHours As Double, ByVal PONo As String, ByVal tstrName As String, ByVal Notes As String, ByVal testDeleted As Boolean, ByVal upsize_ts() As Byte, ByVal tstrNo As Integer) As TestsRow
            Dim rowTestsRow As TestsRow = CType(Me.NewRow,TestsRow)
            rowTestsRow.ItemArray = New Object() {Nothing, parentAssembliesRowByTests_FK00(0), testDate, testPerformed, testPass, testHours, PONo, tstrName, Notes, testDeleted, upsize_ts, tstrNo}
            Me.Rows.Add(rowTestsRow)
            Return rowTestsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBytestNo(ByVal testNo As Integer) As TestsRow
            Return CType(Me.Rows.Find(New Object() {testNo}),TestsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TestsDataTable = CType(MyBase.Clone,TestsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TestsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntestNo = MyBase.Columns("testNo")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columntestPerformed = MyBase.Columns("testPerformed")
            Me.columntestPass = MyBase.Columns("testPass")
            Me.columntestHours = MyBase.Columns("testHours")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columntstrName = MyBase.Columns("tstrName")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columntestDeleted = MyBase.Columns("testDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
            Me.columntstrNo = MyBase.Columns("tstrNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntestNo = New System.Data.DataColumn("testNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestNo)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columntestDate = New System.Data.DataColumn("testDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columntestPerformed = New System.Data.DataColumn("testPerformed", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPerformed)
            Me.columntestPass = New System.Data.DataColumn("testPass", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPass)
            Me.columntestHours = New System.Data.DataColumn("testHours", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestHours)
            Me.columnPONo = New System.Data.DataColumn("PONo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columntstrName = New System.Data.DataColumn("tstrName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrName)
            Me.columnNotes = New System.Data.DataColumn("Notes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columntestDeleted = New System.Data.DataColumn("testDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.columntstrNo = New System.Data.DataColumn("tstrNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columntestNo}, true))
            Me.columntestNo.AutoIncrement = true
            Me.columntestNo.AllowDBNull = false
            Me.columntestNo.ReadOnly = true
            Me.columntestNo.Unique = true
            Me.columntestPerformed.AllowDBNull = false
            Me.columntestPass.AllowDBNull = false
            Me.columnPONo.AllowDBNull = false
            Me.columnPONo.MaxLength = 30
            Me.columntstrName.MaxLength = 50
            Me.columnNotes.MaxLength = 1073741823
            Me.columntestDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTestsRow() As TestsRow
            Return CType(Me.NewRow,TestsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TestsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TestsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TestsRowChangedEvent) Is Nothing) Then
                RaiseEvent TestsRowChanged(Me, New TestsRowChangeEvent(CType(e.Row,TestsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TestsRowChangingEvent) Is Nothing) Then
                RaiseEvent TestsRowChanging(Me, New TestsRowChangeEvent(CType(e.Row,TestsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TestsRowDeletedEvent) Is Nothing) Then
                RaiseEvent TestsRowDeleted(Me, New TestsRowChangeEvent(CType(e.Row,TestsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TestsRowDeletingEvent) Is Nothing) Then
                RaiseEvent TestsRowDeleting(Me, New TestsRowChangeEvent(CType(e.Row,TestsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTestsRow(ByVal row As TestsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TestsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssembliesWOutDeleted_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        Private columnassemMan As System.Data.DataColumn
        
        Private columnassemMod As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnassemInstDt As System.Data.DataColumn
        
        Private columnassemLoc As System.Data.DataColumn
        
        Private columnassemNotes As System.Data.DataColumn
        
        Private columnassemDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        Private columnAssemManNo As System.Data.DataColumn
        
        Private columnassemTypeNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssembliesWOutDeleted_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemModColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemInstDtColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemInstDt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemLocColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemLoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemTypeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssembliesWOutDeleted_VWRow
            Get
                Return CType(Me.Rows(index),AssembliesWOutDeleted_VWRow)
            End Get
        End Property
        
        Public Event AssembliesWOutDeleted_VWRowChanging As AssembliesWOutDeleted_VWRowChangeEventHandler
        
        Public Event AssembliesWOutDeleted_VWRowChanged As AssembliesWOutDeleted_VWRowChangeEventHandler
        
        Public Event AssembliesWOutDeleted_VWRowDeleting As AssembliesWOutDeleted_VWRowChangeEventHandler
        
        Public Event AssembliesWOutDeleted_VWRowDeleted As AssembliesWOutDeleted_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssembliesWOutDeleted_VWRow(ByVal row As AssembliesWOutDeleted_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssembliesWOutDeleted_VWRow(ByVal propNo As Integer, ByVal assemType As String, ByVal assemMan As String, ByVal assemMod As String, ByVal assemSizeNo As Integer, ByVal assemSerial As String, ByVal assemUsage As String, ByVal assemUsagePriceNo As Integer, ByVal assemInstDt As Date, ByVal assemLoc As String, ByVal assemNotes As String, ByVal assemDeleted As Boolean, ByVal upsize_ts() As Byte, ByVal AssemManNo As Integer, ByVal assemTypeNo As Integer) As AssembliesWOutDeleted_VWRow
            Dim rowAssembliesWOutDeleted_VWRow As AssembliesWOutDeleted_VWRow = CType(Me.NewRow,AssembliesWOutDeleted_VWRow)
            rowAssembliesWOutDeleted_VWRow.ItemArray = New Object() {Nothing, propNo, assemType, assemMan, assemMod, assemSizeNo, assemSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, upsize_ts, AssemManNo, assemTypeNo}
            Me.Rows.Add(rowAssembliesWOutDeleted_VWRow)
            Return rowAssembliesWOutDeleted_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemNo(ByVal assemNo As Integer) As AssembliesWOutDeleted_VWRow
            Return CType(Me.Rows.Find(New Object() {assemNo}),AssembliesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssembliesWOutDeleted_VWDataTable = CType(MyBase.Clone,AssembliesWOutDeleted_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssembliesWOutDeleted_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnassemType = MyBase.Columns("assemType")
            Me.columnassemMan = MyBase.Columns("assemMan")
            Me.columnassemMod = MyBase.Columns("assemMod")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnassemInstDt = MyBase.Columns("assemInstDt")
            Me.columnassemLoc = MyBase.Columns("assemLoc")
            Me.columnassemNotes = MyBase.Columns("assemNotes")
            Me.columnassemDeleted = MyBase.Columns("assemDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
            Me.columnAssemManNo = MyBase.Columns("AssemManNo")
            Me.columnassemTypeNo = MyBase.Columns("assemTypeNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.columnassemMan = New System.Data.DataColumn("assemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMan)
            Me.columnassemMod = New System.Data.DataColumn("assemMod", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMod)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnassemInstDt = New System.Data.DataColumn("assemInstDt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemInstDt)
            Me.columnassemLoc = New System.Data.DataColumn("assemLoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemLoc)
            Me.columnassemNotes = New System.Data.DataColumn("assemNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNotes)
            Me.columnassemDeleted = New System.Data.DataColumn("assemDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.columnAssemManNo = New System.Data.DataColumn("AssemManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemManNo)
            Me.columnassemTypeNo = New System.Data.DataColumn("assemTypeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemTypeNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemNo}, true))
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.AllowDBNull = false
            Me.columnassemNo.ReadOnly = true
            Me.columnassemNo.Unique = true
            Me.columnassemType.MaxLength = 50
            Me.columnassemMan.MaxLength = 50
            Me.columnassemMod.MaxLength = 60
            Me.columnassemSerial.MaxLength = 50
            Me.columnassemUsage.MaxLength = 100
            Me.columnassemLoc.MaxLength = 150
            Me.columnassemNotes.MaxLength = 1073741823
            Me.columnassemDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssembliesWOutDeleted_VWRow() As AssembliesWOutDeleted_VWRow
            Return CType(Me.NewRow,AssembliesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssembliesWOutDeleted_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssembliesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssembliesWOutDeleted_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent AssembliesWOutDeleted_VWRowChanged(Me, New AssembliesWOutDeleted_VWRowChangeEvent(CType(e.Row,AssembliesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssembliesWOutDeleted_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent AssembliesWOutDeleted_VWRowChanging(Me, New AssembliesWOutDeleted_VWRowChangeEvent(CType(e.Row,AssembliesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssembliesWOutDeleted_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssembliesWOutDeleted_VWRowDeleted(Me, New AssembliesWOutDeleted_VWRowChangeEvent(CType(e.Row,AssembliesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssembliesWOutDeleted_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssembliesWOutDeleted_VWRowDeleting(Me, New AssembliesWOutDeleted_VWRowChangeEvent(CType(e.Row,AssembliesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssembliesWOutDeleted_VWRow(ByVal row As AssembliesWOutDeleted_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssembliesWOutDeleted_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DeviceTestsInLastYear_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanFax As System.Data.DataColumn
        
        Private columnmanEmail As System.Data.DataColumn
        
        Private columnmanNotes As System.Data.DataColumn
        
        Private columnmanCurAcct As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnmanLogoPath As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropCon As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnpropPhone As System.Data.DataColumn
        
        Private columnpropFax As System.Data.DataColumn
        
        Private columnpropEmail As System.Data.DataColumn
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnpropPrevManNo As System.Data.DataColumn
        
        Private columnretestTo As System.Data.DataColumn
        
        Private columnpropNotes As System.Data.DataColumn
        
        Private columnpropDeleted As System.Data.DataColumn
        
        Private columnpropAdded As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        Private columnassemMan As System.Data.DataColumn
        
        Private columnassemMod As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnassemInstDt As System.Data.DataColumn
        
        Private columnassemLoc As System.Data.DataColumn
        
        Private columnassemNotes As System.Data.DataColumn
        
        Private columnassemDeleted As System.Data.DataColumn
        
        Private columnAssemManNo As System.Data.DataColumn
        
        Private columnassemTypeNo As System.Data.DataColumn
        
        Private columntestNo As System.Data.DataColumn
        
        Private columntestDate As System.Data.DataColumn
        
        Private columntestPerformed As System.Data.DataColumn
        
        Private columntestPass As System.Data.DataColumn
        
        Private columntestHours As System.Data.DataColumn
        
        Private columnPONo As System.Data.DataColumn
        
        Private columntstrName As System.Data.DataColumn
        
        Private columnNotes As System.Data.DataColumn
        
        Private columntestDeleted As System.Data.DataColumn
        
        Private columntstrNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DeviceTestsInLastYear_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCurAcctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCurAcct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manLogoPathColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanLogoPath
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propConColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPrevManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPrevManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property retestToColumn() As System.Data.DataColumn
            Get
                Return Me.columnretestTo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemModColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemInstDtColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemInstDt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemLocColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemLoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemTypeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntestNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPerformedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPerformed
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPassColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testHoursColumn() As System.Data.DataColumn
            Get
                Return Me.columntestHours
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPONo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNameColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DeviceTestsInLastYear_VWRow
            Get
                Return CType(Me.Rows(index),DeviceTestsInLastYear_VWRow)
            End Get
        End Property
        
        Public Event DeviceTestsInLastYear_VWRowChanging As DeviceTestsInLastYear_VWRowChangeEventHandler
        
        Public Event DeviceTestsInLastYear_VWRowChanged As DeviceTestsInLastYear_VWRowChangeEventHandler
        
        Public Event DeviceTestsInLastYear_VWRowDeleting As DeviceTestsInLastYear_VWRowChangeEventHandler
        
        Public Event DeviceTestsInLastYear_VWRowDeleted As DeviceTestsInLastYear_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDeviceTestsInLastYear_VWRow(ByVal row As DeviceTestsInLastYear_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDeviceTestsInLastYear_VWRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manSuite As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal manCntct As String,  _
                    ByVal manPhone As String,  _
                    ByVal manFax As String,  _
                    ByVal manEmail As String,  _
                    ByVal manNotes As String,  _
                    ByVal manCurAcct As Boolean,  _
                    ByVal manSchemeNo As Integer,  _
                    ByVal manDeleted As Boolean,  _
                    ByVal manLogoPath As String,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal munNo As Integer,  _
                    ByVal propPrevManNo As Integer,  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As Date,  _
                    ByVal assemType As String,  _
                    ByVal assemMan As String,  _
                    ByVal assemMod As String,  _
                    ByVal assemSizeNo As Integer,  _
                    ByVal assemSerial As String,  _
                    ByVal assemUsage As String,  _
                    ByVal assemUsagePriceNo As Integer,  _
                    ByVal assemInstDt As Date,  _
                    ByVal assemLoc As String,  _
                    ByVal assemNotes As String,  _
                    ByVal assemDeleted As Boolean,  _
                    ByVal AssemManNo As Integer,  _
                    ByVal assemTypeNo As Integer,  _
                    ByVal testDate As Date,  _
                    ByVal testPerformed As Boolean,  _
                    ByVal testPass As Boolean,  _
                    ByVal testHours As Double,  _
                    ByVal PONo As String,  _
                    ByVal tstrName As String,  _
                    ByVal Notes As String,  _
                    ByVal testDeleted As Boolean,  _
                    ByVal tstrNo As Integer) As DeviceTestsInLastYear_VWRow
            Dim rowDeviceTestsInLastYear_VWRow As DeviceTestsInLastYear_VWRow = CType(Me.NewRow,DeviceTestsInLastYear_VWRow)
            rowDeviceTestsInLastYear_VWRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, manLogoPath, Nothing, propName, storeNo, propCon, propStrt, propCity, propState, propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNotes, propDeleted, propAdded, Nothing, assemType, assemMan, assemMod, assemSizeNo, assemSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, AssemManNo, assemTypeNo, Nothing, testDate, testPerformed, testPass, testHours, PONo, tstrName, Notes, testDeleted, tstrNo}
            Me.Rows.Add(rowDeviceTestsInLastYear_VWRow)
            Return rowDeviceTestsInLastYear_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNopropNoassemNotestNo(ByVal manNo As Integer, ByVal propNo As Integer, ByVal assemNo As Integer, ByVal testNo As Integer) As DeviceTestsInLastYear_VWRow
            Return CType(Me.Rows.Find(New Object() {manNo, propNo, assemNo, testNo}),DeviceTestsInLastYear_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DeviceTestsInLastYear_VWDataTable = CType(MyBase.Clone,DeviceTestsInLastYear_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DeviceTestsInLastYear_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanFax = MyBase.Columns("manFax")
            Me.columnmanEmail = MyBase.Columns("manEmail")
            Me.columnmanNotes = MyBase.Columns("manNotes")
            Me.columnmanCurAcct = MyBase.Columns("manCurAcct")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnmanLogoPath = MyBase.Columns("manLogoPath")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropCon = MyBase.Columns("propCon")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnpropPhone = MyBase.Columns("propPhone")
            Me.columnpropFax = MyBase.Columns("propFax")
            Me.columnpropEmail = MyBase.Columns("propEmail")
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnpropPrevManNo = MyBase.Columns("propPrevManNo")
            Me.columnretestTo = MyBase.Columns("retestTo")
            Me.columnpropNotes = MyBase.Columns("propNotes")
            Me.columnpropDeleted = MyBase.Columns("propDeleted")
            Me.columnpropAdded = MyBase.Columns("propAdded")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemType = MyBase.Columns("assemType")
            Me.columnassemMan = MyBase.Columns("assemMan")
            Me.columnassemMod = MyBase.Columns("assemMod")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnassemInstDt = MyBase.Columns("assemInstDt")
            Me.columnassemLoc = MyBase.Columns("assemLoc")
            Me.columnassemNotes = MyBase.Columns("assemNotes")
            Me.columnassemDeleted = MyBase.Columns("assemDeleted")
            Me.columnAssemManNo = MyBase.Columns("AssemManNo")
            Me.columnassemTypeNo = MyBase.Columns("assemTypeNo")
            Me.columntestNo = MyBase.Columns("testNo")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columntestPerformed = MyBase.Columns("testPerformed")
            Me.columntestPass = MyBase.Columns("testPass")
            Me.columntestHours = MyBase.Columns("testHours")
            Me.columnPONo = MyBase.Columns("PONo")
            Me.columntstrName = MyBase.Columns("tstrName")
            Me.columnNotes = MyBase.Columns("Notes")
            Me.columntestDeleted = MyBase.Columns("testDeleted")
            Me.columntstrNo = MyBase.Columns("tstrNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanFax = New System.Data.DataColumn("manFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanFax)
            Me.columnmanEmail = New System.Data.DataColumn("manEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanEmail)
            Me.columnmanNotes = New System.Data.DataColumn("manNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNotes)
            Me.columnmanCurAcct = New System.Data.DataColumn("manCurAcct", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCurAcct)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnmanLogoPath = New System.Data.DataColumn("manLogoPath", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanLogoPath)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropCon = New System.Data.DataColumn("propCon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCon)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnpropPhone = New System.Data.DataColumn("propPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPhone)
            Me.columnpropFax = New System.Data.DataColumn("propFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropFax)
            Me.columnpropEmail = New System.Data.DataColumn("propEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropEmail)
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnpropPrevManNo = New System.Data.DataColumn("propPrevManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPrevManNo)
            Me.columnretestTo = New System.Data.DataColumn("retestTo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretestTo)
            Me.columnpropNotes = New System.Data.DataColumn("propNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNotes)
            Me.columnpropDeleted = New System.Data.DataColumn("propDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropDeleted)
            Me.columnpropAdded = New System.Data.DataColumn("propAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropAdded)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.columnassemMan = New System.Data.DataColumn("assemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMan)
            Me.columnassemMod = New System.Data.DataColumn("assemMod", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMod)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnassemInstDt = New System.Data.DataColumn("assemInstDt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemInstDt)
            Me.columnassemLoc = New System.Data.DataColumn("assemLoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemLoc)
            Me.columnassemNotes = New System.Data.DataColumn("assemNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNotes)
            Me.columnassemDeleted = New System.Data.DataColumn("assemDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemDeleted)
            Me.columnAssemManNo = New System.Data.DataColumn("AssemManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemManNo)
            Me.columnassemTypeNo = New System.Data.DataColumn("assemTypeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemTypeNo)
            Me.columntestNo = New System.Data.DataColumn("testNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestNo)
            Me.columntestDate = New System.Data.DataColumn("testDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columntestPerformed = New System.Data.DataColumn("testPerformed", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPerformed)
            Me.columntestPass = New System.Data.DataColumn("testPass", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPass)
            Me.columntestHours = New System.Data.DataColumn("testHours", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestHours)
            Me.columnPONo = New System.Data.DataColumn("PONo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONo)
            Me.columntstrName = New System.Data.DataColumn("tstrName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrName)
            Me.columnNotes = New System.Data.DataColumn("Notes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotes)
            Me.columntestDeleted = New System.Data.DataColumn("testDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDeleted)
            Me.columntstrNo = New System.Data.DataColumn("tstrNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo, Me.columnpropNo, Me.columnassemNo, Me.columntestNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanFax.MaxLength = 30
            Me.columnmanEmail.MaxLength = 50
            Me.columnmanNotes.MaxLength = 1073741823
            Me.columnmanCurAcct.AllowDBNull = false
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnmanLogoPath.MaxLength = 255
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.AllowDBNull = false
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropCon.MaxLength = 150
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnpropPhone.MaxLength = 30
            Me.columnpropFax.MaxLength = 30
            Me.columnpropEmail.MaxLength = 50
            Me.columnretestTo.MaxLength = 30
            Me.columnpropNotes.MaxLength = 1073741823
            Me.columnpropDeleted.AllowDBNull = false
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.AllowDBNull = false
            Me.columnassemNo.ReadOnly = true
            Me.columnassemType.MaxLength = 50
            Me.columnassemMan.MaxLength = 50
            Me.columnassemMod.MaxLength = 60
            Me.columnassemSerial.MaxLength = 50
            Me.columnassemUsage.MaxLength = 100
            Me.columnassemLoc.MaxLength = 150
            Me.columnassemNotes.MaxLength = 1073741823
            Me.columnassemDeleted.AllowDBNull = false
            Me.columntestNo.AutoIncrement = true
            Me.columntestNo.AllowDBNull = false
            Me.columntestNo.ReadOnly = true
            Me.columntestPerformed.AllowDBNull = false
            Me.columntestPass.AllowDBNull = false
            Me.columnPONo.AllowDBNull = false
            Me.columnPONo.MaxLength = 30
            Me.columntstrName.MaxLength = 50
            Me.columnNotes.MaxLength = 1073741823
            Me.columntestDeleted.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDeviceTestsInLastYear_VWRow() As DeviceTestsInLastYear_VWRow
            Return CType(Me.NewRow,DeviceTestsInLastYear_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DeviceTestsInLastYear_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DeviceTestsInLastYear_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DeviceTestsInLastYear_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent DeviceTestsInLastYear_VWRowChanged(Me, New DeviceTestsInLastYear_VWRowChangeEvent(CType(e.Row,DeviceTestsInLastYear_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DeviceTestsInLastYear_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent DeviceTestsInLastYear_VWRowChanging(Me, New DeviceTestsInLastYear_VWRowChangeEvent(CType(e.Row,DeviceTestsInLastYear_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DeviceTestsInLastYear_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent DeviceTestsInLastYear_VWRowDeleted(Me, New DeviceTestsInLastYear_VWRowChangeEvent(CType(e.Row,DeviceTestsInLastYear_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DeviceTestsInLastYear_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent DeviceTestsInLastYear_VWRowDeleting(Me, New DeviceTestsInLastYear_VWRowChangeEvent(CType(e.Row,DeviceTestsInLastYear_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDeviceTestsInLastYear_VWRow(ByVal row As DeviceTestsInLastYear_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DeviceTestsInLastYear_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagersWOutDeleted_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanFax As System.Data.DataColumn
        
        Private columnmanEmail As System.Data.DataColumn
        
        Private columnmanNotes As System.Data.DataColumn
        
        Private columnmanCurAcct As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnmanLogoPath As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagersWOutDeleted_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCurAcctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCurAcct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manLogoPathColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanLogoPath
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagersWOutDeleted_VWRow
            Get
                Return CType(Me.Rows(index),ManagersWOutDeleted_VWRow)
            End Get
        End Property
        
        Public Event ManagersWOutDeleted_VWRowChanging As ManagersWOutDeleted_VWRowChangeEventHandler
        
        Public Event ManagersWOutDeleted_VWRowChanged As ManagersWOutDeleted_VWRowChangeEventHandler
        
        Public Event ManagersWOutDeleted_VWRowDeleting As ManagersWOutDeleted_VWRowChangeEventHandler
        
        Public Event ManagersWOutDeleted_VWRowDeleted As ManagersWOutDeleted_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagersWOutDeleted_VWRow(ByVal row As ManagersWOutDeleted_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagersWOutDeleted_VWRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manSuite As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal manCntct As String,  _
                    ByVal manPhone As String,  _
                    ByVal manFax As String,  _
                    ByVal manEmail As String,  _
                    ByVal manNotes As String,  _
                    ByVal manCurAcct As Boolean,  _
                    ByVal manSchemeNo As Integer,  _
                    ByVal manDeleted As Boolean,  _
                    ByVal manLogoPath As String,  _
                    ByVal upsize_ts() As Byte) As ManagersWOutDeleted_VWRow
            Dim rowManagersWOutDeleted_VWRow As ManagersWOutDeleted_VWRow = CType(Me.NewRow,ManagersWOutDeleted_VWRow)
            rowManagersWOutDeleted_VWRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, manLogoPath, upsize_ts}
            Me.Rows.Add(rowManagersWOutDeleted_VWRow)
            Return rowManagersWOutDeleted_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As ManagersWOutDeleted_VWRow
            Return CType(Me.Rows.Find(New Object() {manNo}),ManagersWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagersWOutDeleted_VWDataTable = CType(MyBase.Clone,ManagersWOutDeleted_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagersWOutDeleted_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanFax = MyBase.Columns("manFax")
            Me.columnmanEmail = MyBase.Columns("manEmail")
            Me.columnmanNotes = MyBase.Columns("manNotes")
            Me.columnmanCurAcct = MyBase.Columns("manCurAcct")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnmanLogoPath = MyBase.Columns("manLogoPath")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanFax = New System.Data.DataColumn("manFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanFax)
            Me.columnmanEmail = New System.Data.DataColumn("manEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanEmail)
            Me.columnmanNotes = New System.Data.DataColumn("manNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNotes)
            Me.columnmanCurAcct = New System.Data.DataColumn("manCurAcct", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCurAcct)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnmanLogoPath = New System.Data.DataColumn("manLogoPath", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanLogoPath)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanFax.MaxLength = 30
            Me.columnmanEmail.MaxLength = 50
            Me.columnmanNotes.MaxLength = 1073741823
            Me.columnmanCurAcct.AllowDBNull = false
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnmanLogoPath.MaxLength = 255
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagersWOutDeleted_VWRow() As ManagersWOutDeleted_VWRow
            Return CType(Me.NewRow,ManagersWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagersWOutDeleted_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagersWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagersWOutDeleted_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeleted_VWRowChanged(Me, New ManagersWOutDeleted_VWRowChangeEvent(CType(e.Row,ManagersWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagersWOutDeleted_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeleted_VWRowChanging(Me, New ManagersWOutDeleted_VWRowChangeEvent(CType(e.Row,ManagersWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagersWOutDeleted_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeleted_VWRowDeleted(Me, New ManagersWOutDeleted_VWRowChangeEvent(CType(e.Row,ManagersWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagersWOutDeleted_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeleted_VWRowDeleting(Me, New ManagersWOutDeleted_VWRowChangeEvent(CType(e.Row,ManagersWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagersWOutDeleted_VWRow(ByVal row As ManagersWOutDeleted_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagersWOutDeleted_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagersXPropertiesXAssemblies_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagersXPropertiesXAssemblies_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagersXPropertiesXAssemblies_VWRow
            Get
                Return CType(Me.Rows(index),ManagersXPropertiesXAssemblies_VWRow)
            End Get
        End Property
        
        Public Event ManagersXPropertiesXAssemblies_VWRowChanging As ManagersXPropertiesXAssemblies_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssemblies_VWRowChanged As ManagersXPropertiesXAssemblies_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssemblies_VWRowDeleting As ManagersXPropertiesXAssemblies_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssemblies_VWRowDeleted As ManagersXPropertiesXAssemblies_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagersXPropertiesXAssemblies_VWRow(ByVal row As ManagersXPropertiesXAssemblies_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagersXPropertiesXAssemblies_VWRow(ByVal manName As String, ByVal manStrtAdd As String, ByVal manCity As String, ByVal manState As String, ByVal manZip As String, ByVal propName As String, ByVal storeNo As String, ByVal propStrt As String, ByVal propCity As String, ByVal propState As String, ByVal propZip As String, ByVal assemSerial As String) As ManagersXPropertiesXAssemblies_VWRow
            Dim rowManagersXPropertiesXAssemblies_VWRow As ManagersXPropertiesXAssemblies_VWRow = CType(Me.NewRow,ManagersXPropertiesXAssemblies_VWRow)
            rowManagersXPropertiesXAssemblies_VWRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manCity, manState, manZip, Nothing, propName, storeNo, propStrt, propCity, propState, propZip, Nothing, assemSerial}
            Me.Rows.Add(rowManagersXPropertiesXAssemblies_VWRow)
            Return rowManagersXPropertiesXAssemblies_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagersXPropertiesXAssemblies_VWDataTable = CType(MyBase.Clone,ManagersXPropertiesXAssemblies_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagersXPropertiesXAssemblies_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo, Me.columnpropNo, Me.columnassemNo}, false))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagersXPropertiesXAssemblies_VWRow() As ManagersXPropertiesXAssemblies_VWRow
            Return CType(Me.NewRow,ManagersXPropertiesXAssemblies_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagersXPropertiesXAssemblies_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagersXPropertiesXAssemblies_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagersXPropertiesXAssemblies_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssemblies_VWRowChanged(Me, New ManagersXPropertiesXAssemblies_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssemblies_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagersXPropertiesXAssemblies_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssemblies_VWRowChanging(Me, New ManagersXPropertiesXAssemblies_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssemblies_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagersXPropertiesXAssemblies_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssemblies_VWRowDeleted(Me, New ManagersXPropertiesXAssemblies_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssemblies_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagersXPropertiesXAssemblies_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssemblies_VWRowDeleting(Me, New ManagersXPropertiesXAssemblies_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssemblies_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagersXPropertiesXAssemblies_VWRow(ByVal row As ManagersXPropertiesXAssemblies_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagersXPropertiesXAssemblies_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagersXPropertiesXAssembliesXTests_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columntestNo As System.Data.DataColumn
        
        Private columntestPerformed As System.Data.DataColumn
        
        Private columntestPass As System.Data.DataColumn
        
        Private columntstrNo As System.Data.DataColumn
        
        Private columntestDate As System.Data.DataColumn
        
        Private columntstrName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagersXPropertiesXAssembliesXTests_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntestNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPerformedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPerformed
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPassColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNameColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagersXPropertiesXAssembliesXTests_VWRow
            Get
                Return CType(Me.Rows(index),ManagersXPropertiesXAssembliesXTests_VWRow)
            End Get
        End Property
        
        Public Event ManagersXPropertiesXAssembliesXTests_VWRowChanging As ManagersXPropertiesXAssembliesXTests_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssembliesXTests_VWRowChanged As ManagersXPropertiesXAssembliesXTests_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssembliesXTests_VWRowDeleting As ManagersXPropertiesXAssembliesXTests_VWRowChangeEventHandler
        
        Public Event ManagersXPropertiesXAssembliesXTests_VWRowDeleted As ManagersXPropertiesXAssembliesXTests_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagersXPropertiesXAssembliesXTests_VWRow(ByVal row As ManagersXPropertiesXAssembliesXTests_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagersXPropertiesXAssembliesXTests_VWRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal assemSerial As String,  _
                    ByVal testPerformed As Boolean,  _
                    ByVal testPass As Boolean,  _
                    ByVal tstrNo As Integer,  _
                    ByVal testDate As Date,  _
                    ByVal tstrName As String) As ManagersXPropertiesXAssembliesXTests_VWRow
            Dim rowManagersXPropertiesXAssembliesXTests_VWRow As ManagersXPropertiesXAssembliesXTests_VWRow = CType(Me.NewRow,ManagersXPropertiesXAssembliesXTests_VWRow)
            rowManagersXPropertiesXAssembliesXTests_VWRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manCity, manState, manZip, Nothing, propName, storeNo, propStrt, propCity, propState, propZip, Nothing, assemSerial, Nothing, testPerformed, testPass, tstrNo, testDate, tstrName}
            Me.Rows.Add(rowManagersXPropertiesXAssembliesXTests_VWRow)
            Return rowManagersXPropertiesXAssembliesXTests_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagersXPropertiesXAssembliesXTests_VWDataTable = CType(MyBase.Clone,ManagersXPropertiesXAssembliesXTests_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagersXPropertiesXAssembliesXTests_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columntestNo = MyBase.Columns("testNo")
            Me.columntestPerformed = MyBase.Columns("testPerformed")
            Me.columntestPass = MyBase.Columns("testPass")
            Me.columntstrNo = MyBase.Columns("tstrNo")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columntstrName = MyBase.Columns("tstrName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columntestNo = New System.Data.DataColumn("testNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestNo)
            Me.columntestPerformed = New System.Data.DataColumn("testPerformed", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPerformed)
            Me.columntestPass = New System.Data.DataColumn("testPass", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPass)
            Me.columntstrNo = New System.Data.DataColumn("tstrNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrNo)
            Me.columntestDate = New System.Data.DataColumn("testDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columntstrName = New System.Data.DataColumn("tstrName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrName)
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
            Me.columntestNo.AutoIncrement = true
            Me.columntestNo.ReadOnly = true
            Me.columntstrName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagersXPropertiesXAssembliesXTests_VWRow() As ManagersXPropertiesXAssembliesXTests_VWRow
            Return CType(Me.NewRow,ManagersXPropertiesXAssembliesXTests_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagersXPropertiesXAssembliesXTests_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagersXPropertiesXAssembliesXTests_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagersXPropertiesXAssembliesXTests_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssembliesXTests_VWRowChanged(Me, New ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssembliesXTests_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagersXPropertiesXAssembliesXTests_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssembliesXTests_VWRowChanging(Me, New ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssembliesXTests_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagersXPropertiesXAssembliesXTests_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssembliesXTests_VWRowDeleted(Me, New ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssembliesXTests_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagersXPropertiesXAssembliesXTests_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagersXPropertiesXAssembliesXTests_VWRowDeleting(Me, New ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent(CType(e.Row,ManagersXPropertiesXAssembliesXTests_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagersXPropertiesXAssembliesXTests_VWRow(ByVal row As ManagersXPropertiesXAssembliesXTests_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagersXPropertiesXAssembliesXTests_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PricingSchemeViewDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpriceNo As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnprice As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PricingSchemeView"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceColumn() As System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PricingSchemeViewRow
            Get
                Return CType(Me.Rows(index),PricingSchemeViewRow)
            End Get
        End Property
        
        Public Event PricingSchemeViewRowChanging As PricingSchemeViewRowChangeEventHandler
        
        Public Event PricingSchemeViewRowChanged As PricingSchemeViewRowChangeEventHandler
        
        Public Event PricingSchemeViewRowDeleting As PricingSchemeViewRowChangeEventHandler
        
        Public Event PricingSchemeViewRowDeleted As PricingSchemeViewRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPricingSchemeViewRow(ByVal row As PricingSchemeViewRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPricingSchemeViewRow(ByVal manSchemeNo As Integer, ByVal assemSizeNo As Integer, ByVal assemUsagePriceNo As Integer, ByVal price As Double, ByVal upsize_ts() As Byte) As PricingSchemeViewRow
            Dim rowPricingSchemeViewRow As PricingSchemeViewRow = CType(Me.NewRow,PricingSchemeViewRow)
            rowPricingSchemeViewRow.ItemArray = New Object() {Nothing, manSchemeNo, assemSizeNo, assemUsagePriceNo, price, upsize_ts}
            Me.Rows.Add(rowPricingSchemeViewRow)
            Return rowPricingSchemeViewRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypriceNo(ByVal priceNo As Integer) As PricingSchemeViewRow
            Return CType(Me.Rows.Find(New Object() {priceNo}),PricingSchemeViewRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PricingSchemeViewDataTable = CType(MyBase.Clone,PricingSchemeViewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PricingSchemeViewDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpriceNo = MyBase.Columns("priceNo")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnprice = MyBase.Columns("price")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpriceNo = New System.Data.DataColumn("priceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriceNo)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnprice = New System.Data.DataColumn("price", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpriceNo}, true))
            Me.columnpriceNo.AutoIncrement = true
            Me.columnpriceNo.AllowDBNull = false
            Me.columnpriceNo.ReadOnly = true
            Me.columnpriceNo.Unique = true
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPricingSchemeViewRow() As PricingSchemeViewRow
            Return CType(Me.NewRow,PricingSchemeViewRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PricingSchemeViewRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PricingSchemeViewRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PricingSchemeViewRowChangedEvent) Is Nothing) Then
                RaiseEvent PricingSchemeViewRowChanged(Me, New PricingSchemeViewRowChangeEvent(CType(e.Row,PricingSchemeViewRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PricingSchemeViewRowChangingEvent) Is Nothing) Then
                RaiseEvent PricingSchemeViewRowChanging(Me, New PricingSchemeViewRowChangeEvent(CType(e.Row,PricingSchemeViewRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PricingSchemeViewRowDeletedEvent) Is Nothing) Then
                RaiseEvent PricingSchemeViewRowDeleted(Me, New PricingSchemeViewRowChangeEvent(CType(e.Row,PricingSchemeViewRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PricingSchemeViewRowDeletingEvent) Is Nothing) Then
                RaiseEvent PricingSchemeViewRowDeleting(Me, New PricingSchemeViewRowChangeEvent(CType(e.Row,PricingSchemeViewRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePricingSchemeViewRow(ByVal row As PricingSchemeViewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PricingSchemeViewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PropertiesWOutDeleted_VWDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropCon As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnpropPhone As System.Data.DataColumn
        
        Private columnpropFax As System.Data.DataColumn
        
        Private columnpropEmail As System.Data.DataColumn
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnpropPrevManNo As System.Data.DataColumn
        
        Private columnretestTo As System.Data.DataColumn
        
        Private columnpropNotes As System.Data.DataColumn
        
        Private columnpropDeleted As System.Data.DataColumn
        
        Private columnpropAdded As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PropertiesWOutDeleted_VW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propConColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPrevManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPrevManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property retestToColumn() As System.Data.DataColumn
            Get
                Return Me.columnretestTo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PropertiesWOutDeleted_VWRow
            Get
                Return CType(Me.Rows(index),PropertiesWOutDeleted_VWRow)
            End Get
        End Property
        
        Public Event PropertiesWOutDeleted_VWRowChanging As PropertiesWOutDeleted_VWRowChangeEventHandler
        
        Public Event PropertiesWOutDeleted_VWRowChanged As PropertiesWOutDeleted_VWRowChangeEventHandler
        
        Public Event PropertiesWOutDeleted_VWRowDeleting As PropertiesWOutDeleted_VWRowChangeEventHandler
        
        Public Event PropertiesWOutDeleted_VWRowDeleted As PropertiesWOutDeleted_VWRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPropertiesWOutDeleted_VWRow(ByVal row As PropertiesWOutDeleted_VWRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPropertiesWOutDeleted_VWRow( _
                    ByVal manNo As Integer,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal munNo As Integer,  _
                    ByVal propPrevManNo As Integer,  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As Date,  _
                    ByVal upsize_ts() As Byte) As PropertiesWOutDeleted_VWRow
            Dim rowPropertiesWOutDeleted_VWRow As PropertiesWOutDeleted_VWRow = CType(Me.NewRow,PropertiesWOutDeleted_VWRow)
            rowPropertiesWOutDeleted_VWRow.ItemArray = New Object() {Nothing, manNo, propName, storeNo, propCon, propStrt, propCity, propState, propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNotes, propDeleted, propAdded, upsize_ts}
            Me.Rows.Add(rowPropertiesWOutDeleted_VWRow)
            Return rowPropertiesWOutDeleted_VWRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypropNo(ByVal propNo As Integer) As PropertiesWOutDeleted_VWRow
            Return CType(Me.Rows.Find(New Object() {propNo}),PropertiesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PropertiesWOutDeleted_VWDataTable = CType(MyBase.Clone,PropertiesWOutDeleted_VWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PropertiesWOutDeleted_VWDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropCon = MyBase.Columns("propCon")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnpropPhone = MyBase.Columns("propPhone")
            Me.columnpropFax = MyBase.Columns("propFax")
            Me.columnpropEmail = MyBase.Columns("propEmail")
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnpropPrevManNo = MyBase.Columns("propPrevManNo")
            Me.columnretestTo = MyBase.Columns("retestTo")
            Me.columnpropNotes = MyBase.Columns("propNotes")
            Me.columnpropDeleted = MyBase.Columns("propDeleted")
            Me.columnpropAdded = MyBase.Columns("propAdded")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropCon = New System.Data.DataColumn("propCon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCon)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnpropPhone = New System.Data.DataColumn("propPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPhone)
            Me.columnpropFax = New System.Data.DataColumn("propFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropFax)
            Me.columnpropEmail = New System.Data.DataColumn("propEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropEmail)
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnpropPrevManNo = New System.Data.DataColumn("propPrevManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPrevManNo)
            Me.columnretestTo = New System.Data.DataColumn("retestTo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretestTo)
            Me.columnpropNotes = New System.Data.DataColumn("propNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNotes)
            Me.columnpropDeleted = New System.Data.DataColumn("propDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropDeleted)
            Me.columnpropAdded = New System.Data.DataColumn("propAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropAdded)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpropNo}, true))
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.AllowDBNull = false
            Me.columnpropNo.ReadOnly = true
            Me.columnpropNo.Unique = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropCon.MaxLength = 150
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnpropPhone.MaxLength = 30
            Me.columnpropFax.MaxLength = 30
            Me.columnpropEmail.MaxLength = 50
            Me.columnretestTo.MaxLength = 30
            Me.columnpropNotes.MaxLength = 1073741823
            Me.columnpropDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPropertiesWOutDeleted_VWRow() As PropertiesWOutDeleted_VWRow
            Return CType(Me.NewRow,PropertiesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PropertiesWOutDeleted_VWRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PropertiesWOutDeleted_VWRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PropertiesWOutDeleted_VWRowChangedEvent) Is Nothing) Then
                RaiseEvent PropertiesWOutDeleted_VWRowChanged(Me, New PropertiesWOutDeleted_VWRowChangeEvent(CType(e.Row,PropertiesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PropertiesWOutDeleted_VWRowChangingEvent) Is Nothing) Then
                RaiseEvent PropertiesWOutDeleted_VWRowChanging(Me, New PropertiesWOutDeleted_VWRowChangeEvent(CType(e.Row,PropertiesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PropertiesWOutDeleted_VWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PropertiesWOutDeleted_VWRowDeleted(Me, New PropertiesWOutDeleted_VWRowChangeEvent(CType(e.Row,PropertiesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PropertiesWOutDeleted_VWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PropertiesWOutDeleted_VWRowDeleting(Me, New PropertiesWOutDeleted_VWRowChangeEvent(CType(e.Row,PropertiesWOutDeleted_VWRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePropertiesWOutDeleted_VWRow(ByVal row As PropertiesWOutDeleted_VWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PropertiesWOutDeleted_VWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AssemblyInfoByPrimaryKeyDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        Private columnassemMan As System.Data.DataColumn
        
        Private columnassemMod As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnassemInstDt As System.Data.DataColumn
        
        Private columnassemLoc As System.Data.DataColumn
        
        Private columnassemNotes As System.Data.DataColumn
        
        Private columnassemDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        Private columnAssemManNo As System.Data.DataColumn
        
        Private columnassemTypeNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AssemblyInfoByPrimaryKey"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemModColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemInstDtColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemInstDt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemLocColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemLoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemTypeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AssemblyInfoByPrimaryKeyRow
            Get
                Return CType(Me.Rows(index),AssemblyInfoByPrimaryKeyRow)
            End Get
        End Property
        
        Public Event AssemblyInfoByPrimaryKeyRowChanging As AssemblyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event AssemblyInfoByPrimaryKeyRowChanged As AssemblyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event AssemblyInfoByPrimaryKeyRowDeleting As AssemblyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event AssemblyInfoByPrimaryKeyRowDeleted As AssemblyInfoByPrimaryKeyRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddAssemblyInfoByPrimaryKeyRow(ByVal row As AssemblyInfoByPrimaryKeyRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddAssemblyInfoByPrimaryKeyRow(ByVal propNo As Integer, ByVal assemType As String, ByVal assemMan As String, ByVal assemMod As String, ByVal assemSizeNo As Integer, ByVal assemSerial As String, ByVal assemUsage As String, ByVal assemUsagePriceNo As Integer, ByVal assemInstDt As Date, ByVal assemLoc As String, ByVal assemNotes As String, ByVal assemDeleted As Boolean, ByVal upsize_ts() As Byte, ByVal AssemManNo As Integer, ByVal assemTypeNo As Integer) As AssemblyInfoByPrimaryKeyRow
            Dim rowAssemblyInfoByPrimaryKeyRow As AssemblyInfoByPrimaryKeyRow = CType(Me.NewRow,AssemblyInfoByPrimaryKeyRow)
            rowAssemblyInfoByPrimaryKeyRow.ItemArray = New Object() {Nothing, propNo, assemType, assemMan, assemMod, assemSizeNo, assemSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, upsize_ts, AssemManNo, assemTypeNo}
            Me.Rows.Add(rowAssemblyInfoByPrimaryKeyRow)
            Return rowAssemblyInfoByPrimaryKeyRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByassemNo(ByVal assemNo As Integer) As AssemblyInfoByPrimaryKeyRow
            Return CType(Me.Rows.Find(New Object() {assemNo}),AssemblyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AssemblyInfoByPrimaryKeyDataTable = CType(MyBase.Clone,AssemblyInfoByPrimaryKeyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AssemblyInfoByPrimaryKeyDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnassemType = MyBase.Columns("assemType")
            Me.columnassemMan = MyBase.Columns("assemMan")
            Me.columnassemMod = MyBase.Columns("assemMod")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnassemInstDt = MyBase.Columns("assemInstDt")
            Me.columnassemLoc = MyBase.Columns("assemLoc")
            Me.columnassemNotes = MyBase.Columns("assemNotes")
            Me.columnassemDeleted = MyBase.Columns("assemDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
            Me.columnAssemManNo = MyBase.Columns("AssemManNo")
            Me.columnassemTypeNo = MyBase.Columns("assemTypeNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.columnassemMan = New System.Data.DataColumn("assemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMan)
            Me.columnassemMod = New System.Data.DataColumn("assemMod", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMod)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnassemInstDt = New System.Data.DataColumn("assemInstDt", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemInstDt)
            Me.columnassemLoc = New System.Data.DataColumn("assemLoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemLoc)
            Me.columnassemNotes = New System.Data.DataColumn("assemNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNotes)
            Me.columnassemDeleted = New System.Data.DataColumn("assemDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.columnAssemManNo = New System.Data.DataColumn("AssemManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemManNo)
            Me.columnassemTypeNo = New System.Data.DataColumn("assemTypeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemTypeNo)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnassemNo}, true))
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.AllowDBNull = false
            Me.columnassemNo.ReadOnly = true
            Me.columnassemNo.Unique = true
            Me.columnassemType.MaxLength = 50
            Me.columnassemMan.MaxLength = 50
            Me.columnassemMod.MaxLength = 60
            Me.columnassemSerial.MaxLength = 50
            Me.columnassemUsage.MaxLength = 100
            Me.columnassemLoc.MaxLength = 150
            Me.columnassemNotes.MaxLength = 1073741823
            Me.columnassemDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewAssemblyInfoByPrimaryKeyRow() As AssemblyInfoByPrimaryKeyRow
            Return CType(Me.NewRow,AssemblyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AssemblyInfoByPrimaryKeyRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AssemblyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AssemblyInfoByPrimaryKeyRowChangedEvent) Is Nothing) Then
                RaiseEvent AssemblyInfoByPrimaryKeyRowChanged(Me, New AssemblyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,AssemblyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AssemblyInfoByPrimaryKeyRowChangingEvent) Is Nothing) Then
                RaiseEvent AssemblyInfoByPrimaryKeyRowChanging(Me, New AssemblyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,AssemblyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AssemblyInfoByPrimaryKeyRowDeletedEvent) Is Nothing) Then
                RaiseEvent AssemblyInfoByPrimaryKeyRowDeleted(Me, New AssemblyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,AssemblyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AssemblyInfoByPrimaryKeyRowDeletingEvent) Is Nothing) Then
                RaiseEvent AssemblyInfoByPrimaryKeyRowDeleting(Me, New AssemblyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,AssemblyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveAssemblyInfoByPrimaryKeyRow(ByVal row As AssemblyInfoByPrimaryKeyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AssemblyInfoByPrimaryKeyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class GetManagersListDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanFax As System.Data.DataColumn
        
        Private columnmanEmail As System.Data.DataColumn
        
        Private columnmanNotes As System.Data.DataColumn
        
        Private columnmanCurAcct As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "GetManagersList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCurAcctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCurAcct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As GetManagersListRow
            Get
                Return CType(Me.Rows(index),GetManagersListRow)
            End Get
        End Property
        
        Public Event GetManagersListRowChanging As GetManagersListRowChangeEventHandler
        
        Public Event GetManagersListRowChanged As GetManagersListRowChangeEventHandler
        
        Public Event GetManagersListRowDeleting As GetManagersListRowChangeEventHandler
        
        Public Event GetManagersListRowDeleted As GetManagersListRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddGetManagersListRow(ByVal row As GetManagersListRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddGetManagersListRow(ByVal manName As String, ByVal manStrtAdd As String, ByVal manSuite As String, ByVal manCity As String, ByVal manState As String, ByVal manZip As String, ByVal manCntct As String, ByVal manPhone As String, ByVal manFax As String, ByVal manEmail As String, ByVal manNotes As String, ByVal manCurAcct As Boolean, ByVal manSchemeNo As Integer, ByVal manDeleted As Boolean, ByVal upsize_ts() As Byte) As GetManagersListRow
            Dim rowGetManagersListRow As GetManagersListRow = CType(Me.NewRow,GetManagersListRow)
            rowGetManagersListRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, upsize_ts}
            Me.Rows.Add(rowGetManagersListRow)
            Return rowGetManagersListRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As GetManagersListRow
            Return CType(Me.Rows.Find(New Object() {manNo}),GetManagersListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As GetManagersListDataTable = CType(MyBase.Clone,GetManagersListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New GetManagersListDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanFax = MyBase.Columns("manFax")
            Me.columnmanEmail = MyBase.Columns("manEmail")
            Me.columnmanNotes = MyBase.Columns("manNotes")
            Me.columnmanCurAcct = MyBase.Columns("manCurAcct")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanFax = New System.Data.DataColumn("manFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanFax)
            Me.columnmanEmail = New System.Data.DataColumn("manEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanEmail)
            Me.columnmanNotes = New System.Data.DataColumn("manNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNotes)
            Me.columnmanCurAcct = New System.Data.DataColumn("manCurAcct", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCurAcct)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanFax.MaxLength = 30
            Me.columnmanEmail.MaxLength = 50
            Me.columnmanNotes.MaxLength = 1073741823
            Me.columnmanCurAcct.AllowDBNull = false
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewGetManagersListRow() As GetManagersListRow
            Return CType(Me.NewRow,GetManagersListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New GetManagersListRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(GetManagersListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.GetManagersListRowChangedEvent) Is Nothing) Then
                RaiseEvent GetManagersListRowChanged(Me, New GetManagersListRowChangeEvent(CType(e.Row,GetManagersListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.GetManagersListRowChangingEvent) Is Nothing) Then
                RaiseEvent GetManagersListRowChanging(Me, New GetManagersListRowChangeEvent(CType(e.Row,GetManagersListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.GetManagersListRowDeletedEvent) Is Nothing) Then
                RaiseEvent GetManagersListRowDeleted(Me, New GetManagersListRowChangeEvent(CType(e.Row,GetManagersListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.GetManagersListRowDeletingEvent) Is Nothing) Then
                RaiseEvent GetManagersListRowDeleting(Me, New GetManagersListRowChangeEvent(CType(e.Row,GetManagersListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveGetManagersListRow(ByVal row As GetManagersListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "GetManagersListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagerInfoByPrimaryKeyDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanFax As System.Data.DataColumn
        
        Private columnmanEmail As System.Data.DataColumn
        
        Private columnmanNotes As System.Data.DataColumn
        
        Private columnmanCurAcct As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagerInfoByPrimaryKey"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCurAcctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCurAcct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagerInfoByPrimaryKeyRow
            Get
                Return CType(Me.Rows(index),ManagerInfoByPrimaryKeyRow)
            End Get
        End Property
        
        Public Event ManagerInfoByPrimaryKeyRowChanging As ManagerInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event ManagerInfoByPrimaryKeyRowChanged As ManagerInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event ManagerInfoByPrimaryKeyRowDeleting As ManagerInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event ManagerInfoByPrimaryKeyRowDeleted As ManagerInfoByPrimaryKeyRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagerInfoByPrimaryKeyRow(ByVal row As ManagerInfoByPrimaryKeyRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagerInfoByPrimaryKeyRow(ByVal manName As String, ByVal manStrtAdd As String, ByVal manSuite As String, ByVal manCity As String, ByVal manState As String, ByVal manZip As String, ByVal manCntct As String, ByVal manPhone As String, ByVal manFax As String, ByVal manEmail As String, ByVal manNotes As String, ByVal manCurAcct As Boolean, ByVal manSchemeNo As Integer, ByVal manDeleted As Boolean, ByVal upsize_ts() As Byte) As ManagerInfoByPrimaryKeyRow
            Dim rowManagerInfoByPrimaryKeyRow As ManagerInfoByPrimaryKeyRow = CType(Me.NewRow,ManagerInfoByPrimaryKeyRow)
            rowManagerInfoByPrimaryKeyRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, upsize_ts}
            Me.Rows.Add(rowManagerInfoByPrimaryKeyRow)
            Return rowManagerInfoByPrimaryKeyRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As ManagerInfoByPrimaryKeyRow
            Return CType(Me.Rows.Find(New Object() {manNo}),ManagerInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagerInfoByPrimaryKeyDataTable = CType(MyBase.Clone,ManagerInfoByPrimaryKeyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagerInfoByPrimaryKeyDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanFax = MyBase.Columns("manFax")
            Me.columnmanEmail = MyBase.Columns("manEmail")
            Me.columnmanNotes = MyBase.Columns("manNotes")
            Me.columnmanCurAcct = MyBase.Columns("manCurAcct")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanFax = New System.Data.DataColumn("manFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanFax)
            Me.columnmanEmail = New System.Data.DataColumn("manEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanEmail)
            Me.columnmanNotes = New System.Data.DataColumn("manNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNotes)
            Me.columnmanCurAcct = New System.Data.DataColumn("manCurAcct", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCurAcct)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanFax.MaxLength = 30
            Me.columnmanEmail.MaxLength = 50
            Me.columnmanNotes.MaxLength = 1073741823
            Me.columnmanCurAcct.AllowDBNull = false
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagerInfoByPrimaryKeyRow() As ManagerInfoByPrimaryKeyRow
            Return CType(Me.NewRow,ManagerInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagerInfoByPrimaryKeyRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagerInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagerInfoByPrimaryKeyRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagerInfoByPrimaryKeyRowChanged(Me, New ManagerInfoByPrimaryKeyRowChangeEvent(CType(e.Row,ManagerInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagerInfoByPrimaryKeyRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagerInfoByPrimaryKeyRowChanging(Me, New ManagerInfoByPrimaryKeyRowChangeEvent(CType(e.Row,ManagerInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagerInfoByPrimaryKeyRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagerInfoByPrimaryKeyRowDeleted(Me, New ManagerInfoByPrimaryKeyRowChangeEvent(CType(e.Row,ManagerInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagerInfoByPrimaryKeyRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagerInfoByPrimaryKeyRowDeleting(Me, New ManagerInfoByPrimaryKeyRowChangeEvent(CType(e.Row,ManagerInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagerInfoByPrimaryKeyRow(ByVal row As ManagerInfoByPrimaryKeyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagerInfoByPrimaryKeyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagerNameNoStrtSuite_selDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanSuite As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagerNameNoStrtSuite_sel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSuiteColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSuite
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagerNameNoStrtSuite_selRow
            Get
                Return CType(Me.Rows(index),ManagerNameNoStrtSuite_selRow)
            End Get
        End Property
        
        Public Event ManagerNameNoStrtSuite_selRowChanging As ManagerNameNoStrtSuite_selRowChangeEventHandler
        
        Public Event ManagerNameNoStrtSuite_selRowChanged As ManagerNameNoStrtSuite_selRowChangeEventHandler
        
        Public Event ManagerNameNoStrtSuite_selRowDeleting As ManagerNameNoStrtSuite_selRowChangeEventHandler
        
        Public Event ManagerNameNoStrtSuite_selRowDeleted As ManagerNameNoStrtSuite_selRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagerNameNoStrtSuite_selRow(ByVal row As ManagerNameNoStrtSuite_selRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagerNameNoStrtSuite_selRow(ByVal manName As String, ByVal manStrtAdd As String, ByVal manSuite As String) As ManagerNameNoStrtSuite_selRow
            Dim rowManagerNameNoStrtSuite_selRow As ManagerNameNoStrtSuite_selRow = CType(Me.NewRow,ManagerNameNoStrtSuite_selRow)
            rowManagerNameNoStrtSuite_selRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manSuite}
            Me.Rows.Add(rowManagerNameNoStrtSuite_selRow)
            Return rowManagerNameNoStrtSuite_selRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As ManagerNameNoStrtSuite_selRow
            Return CType(Me.Rows.Find(New Object() {manNo}),ManagerNameNoStrtSuite_selRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagerNameNoStrtSuite_selDataTable = CType(MyBase.Clone,ManagerNameNoStrtSuite_selDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagerNameNoStrtSuite_selDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanSuite = MyBase.Columns("manSuite")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanSuite = New System.Data.DataColumn("manSuite", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSuite)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanSuite.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagerNameNoStrtSuite_selRow() As ManagerNameNoStrtSuite_selRow
            Return CType(Me.NewRow,ManagerNameNoStrtSuite_selRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagerNameNoStrtSuite_selRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagerNameNoStrtSuite_selRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagerNameNoStrtSuite_selRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagerNameNoStrtSuite_selRowChanged(Me, New ManagerNameNoStrtSuite_selRowChangeEvent(CType(e.Row,ManagerNameNoStrtSuite_selRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagerNameNoStrtSuite_selRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagerNameNoStrtSuite_selRowChanging(Me, New ManagerNameNoStrtSuite_selRowChangeEvent(CType(e.Row,ManagerNameNoStrtSuite_selRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagerNameNoStrtSuite_selRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagerNameNoStrtSuite_selRowDeleted(Me, New ManagerNameNoStrtSuite_selRowChangeEvent(CType(e.Row,ManagerNameNoStrtSuite_selRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagerNameNoStrtSuite_selRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagerNameNoStrtSuite_selRowDeleting(Me, New ManagerNameNoStrtSuite_selRowChangeEvent(CType(e.Row,ManagerNameNoStrtSuite_selRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagerNameNoStrtSuite_selRow(ByVal row As ManagerNameNoStrtSuite_selRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagerNameNoStrtSuite_selDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PricingListDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAssemSize As System.Data.DataColumn
        
        Private columnpriceNo As System.Data.DataColumn
        
        Private columnmanSchemeNo As System.Data.DataColumn
        
        Private columnassemSizeNo As System.Data.DataColumn
        
        Private columnassemUsagePriceNo As System.Data.DataColumn
        
        Private columnprice As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PricingList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssemSizeColumn() As System.Data.DataColumn
            Get
                Return Me.columnAssemSize
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manSchemeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanSchemeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSizeNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsagePriceNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsagePriceNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property priceColumn() As System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PricingListRow
            Get
                Return CType(Me.Rows(index),PricingListRow)
            End Get
        End Property
        
        Public Event PricingListRowChanging As PricingListRowChangeEventHandler
        
        Public Event PricingListRowChanged As PricingListRowChangeEventHandler
        
        Public Event PricingListRowDeleting As PricingListRowChangeEventHandler
        
        Public Event PricingListRowDeleted As PricingListRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPricingListRow(ByVal row As PricingListRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPricingListRow(ByVal AssemSize As String, ByVal manSchemeNo As Integer, ByVal assemSizeNo As Integer, ByVal assemUsagePriceNo As Integer, ByVal price As Double, ByVal upsize_ts() As Byte) As PricingListRow
            Dim rowPricingListRow As PricingListRow = CType(Me.NewRow,PricingListRow)
            rowPricingListRow.ItemArray = New Object() {AssemSize, Nothing, manSchemeNo, assemSizeNo, assemUsagePriceNo, price, upsize_ts}
            Me.Rows.Add(rowPricingListRow)
            Return rowPricingListRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypriceNo(ByVal priceNo As Integer) As PricingListRow
            Return CType(Me.Rows.Find(New Object() {priceNo}),PricingListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PricingListDataTable = CType(MyBase.Clone,PricingListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PricingListDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnAssemSize = MyBase.Columns("AssemSize")
            Me.columnpriceNo = MyBase.Columns("priceNo")
            Me.columnmanSchemeNo = MyBase.Columns("manSchemeNo")
            Me.columnassemSizeNo = MyBase.Columns("assemSizeNo")
            Me.columnassemUsagePriceNo = MyBase.Columns("assemUsagePriceNo")
            Me.columnprice = MyBase.Columns("price")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnAssemSize = New System.Data.DataColumn("AssemSize", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssemSize)
            Me.columnpriceNo = New System.Data.DataColumn("priceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpriceNo)
            Me.columnmanSchemeNo = New System.Data.DataColumn("manSchemeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanSchemeNo)
            Me.columnassemSizeNo = New System.Data.DataColumn("assemSizeNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSizeNo)
            Me.columnassemUsagePriceNo = New System.Data.DataColumn("assemUsagePriceNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsagePriceNo)
            Me.columnprice = New System.Data.DataColumn("price", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpriceNo}, true))
            Me.columnAssemSize.MaxLength = 10
            Me.columnpriceNo.AutoIncrement = true
            Me.columnpriceNo.AllowDBNull = false
            Me.columnpriceNo.ReadOnly = true
            Me.columnpriceNo.Unique = true
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPricingListRow() As PricingListRow
            Return CType(Me.NewRow,PricingListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PricingListRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PricingListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PricingListRowChangedEvent) Is Nothing) Then
                RaiseEvent PricingListRowChanged(Me, New PricingListRowChangeEvent(CType(e.Row,PricingListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PricingListRowChangingEvent) Is Nothing) Then
                RaiseEvent PricingListRowChanging(Me, New PricingListRowChangeEvent(CType(e.Row,PricingListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PricingListRowDeletedEvent) Is Nothing) Then
                RaiseEvent PricingListRowDeleted(Me, New PricingListRowChangeEvent(CType(e.Row,PricingListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PricingListRowDeletingEvent) Is Nothing) Then
                RaiseEvent PricingListRowDeleting(Me, New PricingListRowChangeEvent(CType(e.Row,PricingListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePricingListRow(ByVal row As PricingListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PricingListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PropertyInfoByPrimaryKeyDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropCon As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnpropPhone As System.Data.DataColumn
        
        Private columnpropFax As System.Data.DataColumn
        
        Private columnpropEmail As System.Data.DataColumn
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnpropPrevManNo As System.Data.DataColumn
        
        Private columnretestTo As System.Data.DataColumn
        
        Private columnpropNotes As System.Data.DataColumn
        
        Private columnpropDeleted As System.Data.DataColumn
        
        Private columnpropAdded As System.Data.DataColumn
        
        Private columnupsize_ts As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PropertyInfoByPrimaryKey"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propConColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propEmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropEmail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPrevManNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPrevManNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property retestToColumn() As System.Data.DataColumn
            Get
                Return Me.columnretestTo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNotesColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNotes
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upsize_tsColumn() As System.Data.DataColumn
            Get
                Return Me.columnupsize_ts
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PropertyInfoByPrimaryKeyRow
            Get
                Return CType(Me.Rows(index),PropertyInfoByPrimaryKeyRow)
            End Get
        End Property
        
        Public Event PropertyInfoByPrimaryKeyRowChanging As PropertyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event PropertyInfoByPrimaryKeyRowChanged As PropertyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event PropertyInfoByPrimaryKeyRowDeleting As PropertyInfoByPrimaryKeyRowChangeEventHandler
        
        Public Event PropertyInfoByPrimaryKeyRowDeleted As PropertyInfoByPrimaryKeyRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPropertyInfoByPrimaryKeyRow(ByVal row As PropertyInfoByPrimaryKeyRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPropertyInfoByPrimaryKeyRow( _
                    ByVal manNo As Integer,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal munNo As Integer,  _
                    ByVal propPrevManNo As Integer,  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As Date,  _
                    ByVal upsize_ts() As Byte) As PropertyInfoByPrimaryKeyRow
            Dim rowPropertyInfoByPrimaryKeyRow As PropertyInfoByPrimaryKeyRow = CType(Me.NewRow,PropertyInfoByPrimaryKeyRow)
            rowPropertyInfoByPrimaryKeyRow.ItemArray = New Object() {Nothing, manNo, propName, storeNo, propCon, propStrt, propCity, propState, propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNotes, propDeleted, propAdded, upsize_ts}
            Me.Rows.Add(rowPropertyInfoByPrimaryKeyRow)
            Return rowPropertyInfoByPrimaryKeyRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBypropNo(ByVal propNo As Integer) As PropertyInfoByPrimaryKeyRow
            Return CType(Me.Rows.Find(New Object() {propNo}),PropertyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PropertyInfoByPrimaryKeyDataTable = CType(MyBase.Clone,PropertyInfoByPrimaryKeyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PropertyInfoByPrimaryKeyDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropCon = MyBase.Columns("propCon")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnpropPhone = MyBase.Columns("propPhone")
            Me.columnpropFax = MyBase.Columns("propFax")
            Me.columnpropEmail = MyBase.Columns("propEmail")
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnpropPrevManNo = MyBase.Columns("propPrevManNo")
            Me.columnretestTo = MyBase.Columns("retestTo")
            Me.columnpropNotes = MyBase.Columns("propNotes")
            Me.columnpropDeleted = MyBase.Columns("propDeleted")
            Me.columnpropAdded = MyBase.Columns("propAdded")
            Me.columnupsize_ts = MyBase.Columns("upsize_ts")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropCon = New System.Data.DataColumn("propCon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCon)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnpropPhone = New System.Data.DataColumn("propPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPhone)
            Me.columnpropFax = New System.Data.DataColumn("propFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropFax)
            Me.columnpropEmail = New System.Data.DataColumn("propEmail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropEmail)
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnpropPrevManNo = New System.Data.DataColumn("propPrevManNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPrevManNo)
            Me.columnretestTo = New System.Data.DataColumn("retestTo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnretestTo)
            Me.columnpropNotes = New System.Data.DataColumn("propNotes", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNotes)
            Me.columnpropDeleted = New System.Data.DataColumn("propDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropDeleted)
            Me.columnpropAdded = New System.Data.DataColumn("propAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropAdded)
            Me.columnupsize_ts = New System.Data.DataColumn("upsize_ts", GetType(Byte()), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupsize_ts)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnpropNo}, true))
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.AllowDBNull = false
            Me.columnpropNo.ReadOnly = true
            Me.columnpropNo.Unique = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropCon.MaxLength = 150
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnpropPhone.MaxLength = 30
            Me.columnpropFax.MaxLength = 30
            Me.columnpropEmail.MaxLength = 50
            Me.columnretestTo.MaxLength = 30
            Me.columnpropNotes.MaxLength = 1073741823
            Me.columnpropDeleted.AllowDBNull = false
            Me.columnupsize_ts.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPropertyInfoByPrimaryKeyRow() As PropertyInfoByPrimaryKeyRow
            Return CType(Me.NewRow,PropertyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PropertyInfoByPrimaryKeyRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PropertyInfoByPrimaryKeyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PropertyInfoByPrimaryKeyRowChangedEvent) Is Nothing) Then
                RaiseEvent PropertyInfoByPrimaryKeyRowChanged(Me, New PropertyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,PropertyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PropertyInfoByPrimaryKeyRowChangingEvent) Is Nothing) Then
                RaiseEvent PropertyInfoByPrimaryKeyRowChanging(Me, New PropertyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,PropertyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PropertyInfoByPrimaryKeyRowDeletedEvent) Is Nothing) Then
                RaiseEvent PropertyInfoByPrimaryKeyRowDeleted(Me, New PropertyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,PropertyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PropertyInfoByPrimaryKeyRowDeletingEvent) Is Nothing) Then
                RaiseEvent PropertyInfoByPrimaryKeyRowDeleting(Me, New PropertyInfoByPrimaryKeyRowChangeEvent(CType(e.Row,PropertyInfoByPrimaryKeyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePropertyInfoByPrimaryKeyRow(ByVal row As PropertyInfoByPrimaryKeyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PropertyInfoByPrimaryKeyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SelectTestInfoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columntestPerformed As System.Data.DataColumn
        
        Private columntestPass As System.Data.DataColumn
        
        Private columntstrNo As System.Data.DataColumn
        
        Private columntestDate As System.Data.DataColumn
        
        Private columntstrName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SelectTestInfo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPerformedColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPerformed
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testPassColumn() As System.Data.DataColumn
            Get
                Return Me.columntestPass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tstrNameColumn() As System.Data.DataColumn
            Get
                Return Me.columntstrName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SelectTestInfoRow
            Get
                Return CType(Me.Rows(index),SelectTestInfoRow)
            End Get
        End Property
        
        Public Event SelectTestInfoRowChanging As SelectTestInfoRowChangeEventHandler
        
        Public Event SelectTestInfoRowChanged As SelectTestInfoRowChangeEventHandler
        
        Public Event SelectTestInfoRowDeleting As SelectTestInfoRowChangeEventHandler
        
        Public Event SelectTestInfoRowDeleted As SelectTestInfoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSelectTestInfoRow(ByVal row As SelectTestInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSelectTestInfoRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal assemSerial As String,  _
                    ByVal testPerformed As Boolean,  _
                    ByVal testPass As Boolean,  _
                    ByVal tstrNo As Integer,  _
                    ByVal testDate As Date,  _
                    ByVal tstrName As String) As SelectTestInfoRow
            Dim rowSelectTestInfoRow As SelectTestInfoRow = CType(Me.NewRow,SelectTestInfoRow)
            rowSelectTestInfoRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manCity, manState, manZip, Nothing, propName, storeNo, propStrt, propCity, propState, propZip, Nothing, assemSerial, testPerformed, testPass, tstrNo, testDate, tstrName}
            Me.Rows.Add(rowSelectTestInfoRow)
            Return rowSelectTestInfoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SelectTestInfoDataTable = CType(MyBase.Clone,SelectTestInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SelectTestInfoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columntestPerformed = MyBase.Columns("testPerformed")
            Me.columntestPass = MyBase.Columns("testPass")
            Me.columntstrNo = MyBase.Columns("tstrNo")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columntstrName = MyBase.Columns("tstrName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columntestPerformed = New System.Data.DataColumn("testPerformed", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPerformed)
            Me.columntestPass = New System.Data.DataColumn("testPass", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestPass)
            Me.columntstrNo = New System.Data.DataColumn("tstrNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrNo)
            Me.columntestDate = New System.Data.DataColumn("testDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columntstrName = New System.Data.DataColumn("tstrName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntstrName)
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
            Me.columntstrName.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSelectTestInfoRow() As SelectTestInfoRow
            Return CType(Me.NewRow,SelectTestInfoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SelectTestInfoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SelectTestInfoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SelectTestInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent SelectTestInfoRowChanged(Me, New SelectTestInfoRowChangeEvent(CType(e.Row,SelectTestInfoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SelectTestInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent SelectTestInfoRowChanging(Me, New SelectTestInfoRowChangeEvent(CType(e.Row,SelectTestInfoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SelectTestInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent SelectTestInfoRowDeleted(Me, New SelectTestInfoRowChangeEvent(CType(e.Row,SelectTestInfoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SelectTestInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent SelectTestInfoRowDeleting(Me, New SelectTestInfoRowChangeEvent(CType(e.Row,SelectTestInfoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSelectTestInfoRow(ByVal row As SelectTestInfoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SelectTestInfoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TestReports_SELDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanStrtAdd As System.Data.DataColumn
        
        Private columnmanCity As System.Data.DataColumn
        
        Private columnmanState As System.Data.DataColumn
        
        Private columnmanZip As System.Data.DataColumn
        
        Private columnmanCntct As System.Data.DataColumn
        
        Private columnmanPhone As System.Data.DataColumn
        
        Private columnmanLogoPath As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnpropStrt As System.Data.DataColumn
        
        Private columnpropCity As System.Data.DataColumn
        
        Private columnpropState As System.Data.DataColumn
        
        Private columnpropZip As System.Data.DataColumn
        
        Private columnpropCon As System.Data.DataColumn
        
        Private columnpropPhone As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemMan As System.Data.DataColumn
        
        Private columnassemMod As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemType As System.Data.DataColumn
        
        Private columnassemUsage As System.Data.DataColumn
        
        Private columnassemLoc As System.Data.DataColumn
        
        Private columnassemSize As System.Data.DataColumn
        
        Private columntestNo As System.Data.DataColumn
        
        Private columntestDate As System.Data.DataColumn
        
        Private columnmunPref As System.Data.DataColumn
        
        Private columnmunName As System.Data.DataColumn
        
        Private columnmunFax As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TestReports_SEL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStrtAddColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanStrtAdd
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manCntctColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanCntct
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manLogoPathColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanLogoPath
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStrtColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropStrt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propCityColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCity
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propStateColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropState
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propZipColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropZip
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propConColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropCon
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propPhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropPhone
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemManColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMan
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemModColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemMod
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemType
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemUsageColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemUsage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemLocColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemLoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSizeColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSize
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testNoColumn() As System.Data.DataColumn
            Get
                Return Me.columntestNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property testDateColumn() As System.Data.DataColumn
            Get
                Return Me.columntestDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munPrefColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunPref
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munFaxColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunFax
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TestReports_SELRow
            Get
                Return CType(Me.Rows(index),TestReports_SELRow)
            End Get
        End Property
        
        Public Event TestReports_SELRowChanging As TestReports_SELRowChangeEventHandler
        
        Public Event TestReports_SELRowChanged As TestReports_SELRowChangeEventHandler
        
        Public Event TestReports_SELRowDeleting As TestReports_SELRowChangeEventHandler
        
        Public Event TestReports_SELRowDeleted As TestReports_SELRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTestReports_SELRow(ByVal row As TestReports_SELRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTestReports_SELRow( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal manCntct As String,  _
                    ByVal manPhone As String,  _
                    ByVal manLogoPath As String,  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propCon As String,  _
                    ByVal propPhone As String,  _
                    ByVal assemMan As String,  _
                    ByVal assemMod As String,  _
                    ByVal assemSerial As String,  _
                    ByVal assemType As String,  _
                    ByVal assemUsage As String,  _
                    ByVal assemLoc As String,  _
                    ByVal assemSize As String,  _
                    ByVal testDate As Date,  _
                    ByVal munPref As String,  _
                    ByVal munName As String,  _
                    ByVal munFax As String) As TestReports_SELRow
            Dim rowTestReports_SELRow As TestReports_SELRow = CType(Me.NewRow,TestReports_SELRow)
            rowTestReports_SELRow.ItemArray = New Object() {Nothing, manName, manStrtAdd, manCity, manState, manZip, manCntct, manPhone, manLogoPath, Nothing, propName, storeNo, propStrt, propCity, propState, propZip, propCon, propPhone, Nothing, assemMan, assemMod, assemSerial, assemType, assemUsage, assemLoc, assemSize, Nothing, testDate, munPref, munName, munFax}
            Me.Rows.Add(rowTestReports_SELRow)
            Return rowTestReports_SELRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TestReports_SELDataTable = CType(MyBase.Clone,TestReports_SELDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TestReports_SELDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanStrtAdd = MyBase.Columns("manStrtAdd")
            Me.columnmanCity = MyBase.Columns("manCity")
            Me.columnmanState = MyBase.Columns("manState")
            Me.columnmanZip = MyBase.Columns("manZip")
            Me.columnmanCntct = MyBase.Columns("manCntct")
            Me.columnmanPhone = MyBase.Columns("manPhone")
            Me.columnmanLogoPath = MyBase.Columns("manLogoPath")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnpropStrt = MyBase.Columns("propStrt")
            Me.columnpropCity = MyBase.Columns("propCity")
            Me.columnpropState = MyBase.Columns("propState")
            Me.columnpropZip = MyBase.Columns("propZip")
            Me.columnpropCon = MyBase.Columns("propCon")
            Me.columnpropPhone = MyBase.Columns("propPhone")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemMan = MyBase.Columns("assemMan")
            Me.columnassemMod = MyBase.Columns("assemMod")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemType = MyBase.Columns("assemType")
            Me.columnassemUsage = MyBase.Columns("assemUsage")
            Me.columnassemLoc = MyBase.Columns("assemLoc")
            Me.columnassemSize = MyBase.Columns("assemSize")
            Me.columntestNo = MyBase.Columns("testNo")
            Me.columntestDate = MyBase.Columns("testDate")
            Me.columnmunPref = MyBase.Columns("munPref")
            Me.columnmunName = MyBase.Columns("munName")
            Me.columnmunFax = MyBase.Columns("munFax")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanStrtAdd = New System.Data.DataColumn("manStrtAdd", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanStrtAdd)
            Me.columnmanCity = New System.Data.DataColumn("manCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCity)
            Me.columnmanState = New System.Data.DataColumn("manState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanState)
            Me.columnmanZip = New System.Data.DataColumn("manZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanZip)
            Me.columnmanCntct = New System.Data.DataColumn("manCntct", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanCntct)
            Me.columnmanPhone = New System.Data.DataColumn("manPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanPhone)
            Me.columnmanLogoPath = New System.Data.DataColumn("manLogoPath", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanLogoPath)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropStrt = New System.Data.DataColumn("propStrt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropStrt)
            Me.columnpropCity = New System.Data.DataColumn("propCity", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCity)
            Me.columnpropState = New System.Data.DataColumn("propState", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropState)
            Me.columnpropZip = New System.Data.DataColumn("propZip", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropZip)
            Me.columnpropCon = New System.Data.DataColumn("propCon", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropCon)
            Me.columnpropPhone = New System.Data.DataColumn("propPhone", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropPhone)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemMan = New System.Data.DataColumn("assemMan", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMan)
            Me.columnassemMod = New System.Data.DataColumn("assemMod", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemMod)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemType = New System.Data.DataColumn("assemType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemType)
            Me.columnassemUsage = New System.Data.DataColumn("assemUsage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemUsage)
            Me.columnassemLoc = New System.Data.DataColumn("assemLoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemLoc)
            Me.columnassemSize = New System.Data.DataColumn("assemSize", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSize)
            Me.columntestNo = New System.Data.DataColumn("testNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestNo)
            Me.columntestDate = New System.Data.DataColumn("testDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntestDate)
            Me.columnmunPref = New System.Data.DataColumn("munPref", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunPref)
            Me.columnmunName = New System.Data.DataColumn("munName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunName)
            Me.columnmunFax = New System.Data.DataColumn("munFax", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunFax)
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanStrtAdd.MaxLength = 255
            Me.columnmanCity.MaxLength = 50
            Me.columnmanState.MaxLength = 2
            Me.columnmanZip.MaxLength = 20
            Me.columnmanCntct.MaxLength = 150
            Me.columnmanPhone.MaxLength = 30
            Me.columnmanLogoPath.MaxLength = 255
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.AllowDBNull = false
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnpropStrt.MaxLength = 255
            Me.columnpropCity.MaxLength = 50
            Me.columnpropState.MaxLength = 2
            Me.columnpropZip.MaxLength = 20
            Me.columnpropCon.MaxLength = 150
            Me.columnpropPhone.MaxLength = 30
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.AllowDBNull = false
            Me.columnassemNo.ReadOnly = true
            Me.columnassemMan.MaxLength = 50
            Me.columnassemMod.MaxLength = 60
            Me.columnassemSerial.MaxLength = 50
            Me.columnassemType.MaxLength = 50
            Me.columnassemUsage.MaxLength = 100
            Me.columnassemLoc.MaxLength = 150
            Me.columnassemSize.MaxLength = 10
            Me.columntestNo.AutoIncrement = true
            Me.columntestNo.AllowDBNull = false
            Me.columntestNo.ReadOnly = true
            Me.columnmunPref.MaxLength = 50
            Me.columnmunName.MaxLength = 255
            Me.columnmunFax.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTestReports_SELRow() As TestReports_SELRow
            Return CType(Me.NewRow,TestReports_SELRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TestReports_SELRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TestReports_SELRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TestReports_SELRowChangedEvent) Is Nothing) Then
                RaiseEvent TestReports_SELRowChanged(Me, New TestReports_SELRowChangeEvent(CType(e.Row,TestReports_SELRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TestReports_SELRowChangingEvent) Is Nothing) Then
                RaiseEvent TestReports_SELRowChanging(Me, New TestReports_SELRowChangeEvent(CType(e.Row,TestReports_SELRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TestReports_SELRowDeletedEvent) Is Nothing) Then
                RaiseEvent TestReports_SELRowDeleted(Me, New TestReports_SELRowChangeEvent(CType(e.Row,TestReports_SELRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TestReports_SELRowDeletingEvent) Is Nothing) Then
                RaiseEvent TestReports_SELRowDeleting(Me, New TestReports_SELRowChangeEvent(CType(e.Row,TestReports_SELRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTestReports_SELRow(ByVal row As TestReports_SELRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TestReports_SELDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TreeView_SPDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnmanDeleted As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnpropDeleted As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        Private columnassemDeleted As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TreeView_SP"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemDeletedColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemDeleted
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TreeView_SPRow
            Get
                Return CType(Me.Rows(index),TreeView_SPRow)
            End Get
        End Property
        
        Public Event TreeView_SPRowChanging As TreeView_SPRowChangeEventHandler
        
        Public Event TreeView_SPRowChanged As TreeView_SPRowChangeEventHandler
        
        Public Event TreeView_SPRowDeleting As TreeView_SPRowChangeEventHandler
        
        Public Event TreeView_SPRowDeleted As TreeView_SPRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTreeView_SPRow(ByVal row As TreeView_SPRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTreeView_SPRow(ByVal manName As String, ByVal manDeleted As Boolean, ByVal propName As String, ByVal propDeleted As Boolean, ByVal storeNo As String, ByVal assemSerial As String, ByVal assemDeleted As Boolean) As TreeView_SPRow
            Dim rowTreeView_SPRow As TreeView_SPRow = CType(Me.NewRow,TreeView_SPRow)
            rowTreeView_SPRow.ItemArray = New Object() {Nothing, manName, manDeleted, Nothing, propName, propDeleted, storeNo, Nothing, assemSerial, assemDeleted}
            Me.Rows.Add(rowTreeView_SPRow)
            Return rowTreeView_SPRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TreeView_SPDataTable = CType(MyBase.Clone,TreeView_SPDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TreeView_SPDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnmanDeleted = MyBase.Columns("manDeleted")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnpropDeleted = MyBase.Columns("propDeleted")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
            Me.columnassemDeleted = MyBase.Columns("assemDeleted")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanDeleted = New System.Data.DataColumn("manDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanDeleted)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnpropDeleted = New System.Data.DataColumn("propDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropDeleted)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemDeleted = New System.Data.DataColumn("assemDeleted", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemDeleted)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo, Me.columnpropNo, Me.columnassemNo}, false))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnmanDeleted.AllowDBNull = false
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTreeView_SPRow() As TreeView_SPRow
            Return CType(Me.NewRow,TreeView_SPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TreeView_SPRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TreeView_SPRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TreeView_SPRowChangedEvent) Is Nothing) Then
                RaiseEvent TreeView_SPRowChanged(Me, New TreeView_SPRowChangeEvent(CType(e.Row,TreeView_SPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TreeView_SPRowChangingEvent) Is Nothing) Then
                RaiseEvent TreeView_SPRowChanging(Me, New TreeView_SPRowChangeEvent(CType(e.Row,TreeView_SPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TreeView_SPRowDeletedEvent) Is Nothing) Then
                RaiseEvent TreeView_SPRowDeleted(Me, New TreeView_SPRowChangeEvent(CType(e.Row,TreeView_SPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TreeView_SPRowDeletingEvent) Is Nothing) Then
                RaiseEvent TreeView_SPRowDeleting(Me, New TreeView_SPRowChangeEvent(CType(e.Row,TreeView_SPRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTreeView_SPRow(ByVal row As TreeView_SPRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TreeView_SPDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TreeViewAssembliesSearchQueryDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TreeViewAssembliesSearchQuery"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TreeViewAssembliesSearchQueryRow
            Get
                Return CType(Me.Rows(index),TreeViewAssembliesSearchQueryRow)
            End Get
        End Property
        
        Public Event TreeViewAssembliesSearchQueryRowChanging As TreeViewAssembliesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewAssembliesSearchQueryRowChanged As TreeViewAssembliesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewAssembliesSearchQueryRowDeleting As TreeViewAssembliesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewAssembliesSearchQueryRowDeleted As TreeViewAssembliesSearchQueryRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTreeViewAssembliesSearchQueryRow(ByVal row As TreeViewAssembliesSearchQueryRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTreeViewAssembliesSearchQueryRow(ByVal assemSerial As String) As TreeViewAssembliesSearchQueryRow
            Dim rowTreeViewAssembliesSearchQueryRow As TreeViewAssembliesSearchQueryRow = CType(Me.NewRow,TreeViewAssembliesSearchQueryRow)
            rowTreeViewAssembliesSearchQueryRow.ItemArray = New Object() {Nothing, Nothing, assemSerial}
            Me.Rows.Add(rowTreeViewAssembliesSearchQueryRow)
            Return rowTreeViewAssembliesSearchQueryRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TreeViewAssembliesSearchQueryDataTable = CType(MyBase.Clone,TreeViewAssembliesSearchQueryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TreeViewAssembliesSearchQueryDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTreeViewAssembliesSearchQueryRow() As TreeViewAssembliesSearchQueryRow
            Return CType(Me.NewRow,TreeViewAssembliesSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TreeViewAssembliesSearchQueryRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TreeViewAssembliesSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TreeViewAssembliesSearchQueryRowChangedEvent) Is Nothing) Then
                RaiseEvent TreeViewAssembliesSearchQueryRowChanged(Me, New TreeViewAssembliesSearchQueryRowChangeEvent(CType(e.Row,TreeViewAssembliesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TreeViewAssembliesSearchQueryRowChangingEvent) Is Nothing) Then
                RaiseEvent TreeViewAssembliesSearchQueryRowChanging(Me, New TreeViewAssembliesSearchQueryRowChangeEvent(CType(e.Row,TreeViewAssembliesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TreeViewAssembliesSearchQueryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TreeViewAssembliesSearchQueryRowDeleted(Me, New TreeViewAssembliesSearchQueryRowChangeEvent(CType(e.Row,TreeViewAssembliesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TreeViewAssembliesSearchQueryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TreeViewAssembliesSearchQueryRowDeleting(Me, New TreeViewAssembliesSearchQueryRowChangeEvent(CType(e.Row,TreeViewAssembliesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTreeViewAssembliesSearchQueryRow(ByVal row As TreeViewAssembliesSearchQueryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TreeViewAssembliesSearchQueryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TreeViewManagersSearchQueryDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TreeViewManagersSearchQuery"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TreeViewManagersSearchQueryRow
            Get
                Return CType(Me.Rows(index),TreeViewManagersSearchQueryRow)
            End Get
        End Property
        
        Public Event TreeViewManagersSearchQueryRowChanging As TreeViewManagersSearchQueryRowChangeEventHandler
        
        Public Event TreeViewManagersSearchQueryRowChanged As TreeViewManagersSearchQueryRowChangeEventHandler
        
        Public Event TreeViewManagersSearchQueryRowDeleting As TreeViewManagersSearchQueryRowChangeEventHandler
        
        Public Event TreeViewManagersSearchQueryRowDeleted As TreeViewManagersSearchQueryRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTreeViewManagersSearchQueryRow(ByVal row As TreeViewManagersSearchQueryRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTreeViewManagersSearchQueryRow(ByVal manName As String) As TreeViewManagersSearchQueryRow
            Dim rowTreeViewManagersSearchQueryRow As TreeViewManagersSearchQueryRow = CType(Me.NewRow,TreeViewManagersSearchQueryRow)
            rowTreeViewManagersSearchQueryRow.ItemArray = New Object() {Nothing, manName}
            Me.Rows.Add(rowTreeViewManagersSearchQueryRow)
            Return rowTreeViewManagersSearchQueryRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TreeViewManagersSearchQueryDataTable = CType(MyBase.Clone,TreeViewManagersSearchQueryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TreeViewManagersSearchQueryDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTreeViewManagersSearchQueryRow() As TreeViewManagersSearchQueryRow
            Return CType(Me.NewRow,TreeViewManagersSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TreeViewManagersSearchQueryRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TreeViewManagersSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TreeViewManagersSearchQueryRowChangedEvent) Is Nothing) Then
                RaiseEvent TreeViewManagersSearchQueryRowChanged(Me, New TreeViewManagersSearchQueryRowChangeEvent(CType(e.Row,TreeViewManagersSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TreeViewManagersSearchQueryRowChangingEvent) Is Nothing) Then
                RaiseEvent TreeViewManagersSearchQueryRowChanging(Me, New TreeViewManagersSearchQueryRowChangeEvent(CType(e.Row,TreeViewManagersSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TreeViewManagersSearchQueryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TreeViewManagersSearchQueryRowDeleted(Me, New TreeViewManagersSearchQueryRowChangeEvent(CType(e.Row,TreeViewManagersSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TreeViewManagersSearchQueryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TreeViewManagersSearchQueryRowDeleting(Me, New TreeViewManagersSearchQueryRowChangeEvent(CType(e.Row,TreeViewManagersSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTreeViewManagersSearchQueryRow(ByVal row As TreeViewManagersSearchQueryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TreeViewManagersSearchQueryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TreeViewPropertiesSearchQueryDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TreeViewPropertiesSearchQuery"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TreeViewPropertiesSearchQueryRow
            Get
                Return CType(Me.Rows(index),TreeViewPropertiesSearchQueryRow)
            End Get
        End Property
        
        Public Event TreeViewPropertiesSearchQueryRowChanging As TreeViewPropertiesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewPropertiesSearchQueryRowChanged As TreeViewPropertiesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewPropertiesSearchQueryRowDeleting As TreeViewPropertiesSearchQueryRowChangeEventHandler
        
        Public Event TreeViewPropertiesSearchQueryRowDeleted As TreeViewPropertiesSearchQueryRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTreeViewPropertiesSearchQueryRow(ByVal row As TreeViewPropertiesSearchQueryRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTreeViewPropertiesSearchQueryRow(ByVal propName As String, ByVal storeNo As String) As TreeViewPropertiesSearchQueryRow
            Dim rowTreeViewPropertiesSearchQueryRow As TreeViewPropertiesSearchQueryRow = CType(Me.NewRow,TreeViewPropertiesSearchQueryRow)
            rowTreeViewPropertiesSearchQueryRow.ItemArray = New Object() {Nothing, Nothing, propName, storeNo}
            Me.Rows.Add(rowTreeViewPropertiesSearchQueryRow)
            Return rowTreeViewPropertiesSearchQueryRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TreeViewPropertiesSearchQueryDataTable = CType(MyBase.Clone,TreeViewPropertiesSearchQueryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TreeViewPropertiesSearchQueryDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTreeViewPropertiesSearchQueryRow() As TreeViewPropertiesSearchQueryRow
            Return CType(Me.NewRow,TreeViewPropertiesSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TreeViewPropertiesSearchQueryRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TreeViewPropertiesSearchQueryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TreeViewPropertiesSearchQueryRowChangedEvent) Is Nothing) Then
                RaiseEvent TreeViewPropertiesSearchQueryRowChanged(Me, New TreeViewPropertiesSearchQueryRowChangeEvent(CType(e.Row,TreeViewPropertiesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TreeViewPropertiesSearchQueryRowChangingEvent) Is Nothing) Then
                RaiseEvent TreeViewPropertiesSearchQueryRowChanging(Me, New TreeViewPropertiesSearchQueryRowChangeEvent(CType(e.Row,TreeViewPropertiesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TreeViewPropertiesSearchQueryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TreeViewPropertiesSearchQueryRowDeleted(Me, New TreeViewPropertiesSearchQueryRowChangeEvent(CType(e.Row,TreeViewPropertiesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TreeViewPropertiesSearchQueryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TreeViewPropertiesSearchQueryRowDeleting(Me, New TreeViewPropertiesSearchQueryRowChangeEvent(CType(e.Row,TreeViewPropertiesSearchQueryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTreeViewPropertiesSearchQueryRow(ByVal row As TreeViewPropertiesSearchQueryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TreeViewPropertiesSearchQueryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class f_ManXPropXAssemSearchDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanName As System.Data.DataColumn
        
        Private columnpropNo As System.Data.DataColumn
        
        Private columnpropName As System.Data.DataColumn
        
        Private columnstoreNo As System.Data.DataColumn
        
        Private columnassemNo As System.Data.DataColumn
        
        Private columnassemSerial As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "f_ManXPropXAssemSearch"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property propNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnpropName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property storeNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstoreNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property assemSerialColumn() As System.Data.DataColumn
            Get
                Return Me.columnassemSerial
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As f_ManXPropXAssemSearchRow
            Get
                Return CType(Me.Rows(index),f_ManXPropXAssemSearchRow)
            End Get
        End Property
        
        Public Event f_ManXPropXAssemSearchRowChanging As f_ManXPropXAssemSearchRowChangeEventHandler
        
        Public Event f_ManXPropXAssemSearchRowChanged As f_ManXPropXAssemSearchRowChangeEventHandler
        
        Public Event f_ManXPropXAssemSearchRowDeleting As f_ManXPropXAssemSearchRowChangeEventHandler
        
        Public Event f_ManXPropXAssemSearchRowDeleted As f_ManXPropXAssemSearchRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addf_ManXPropXAssemSearchRow(ByVal row As f_ManXPropXAssemSearchRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addf_ManXPropXAssemSearchRow(ByVal manName As String, ByVal propName As String, ByVal storeNo As String, ByVal assemSerial As String) As f_ManXPropXAssemSearchRow
            Dim rowf_ManXPropXAssemSearchRow As f_ManXPropXAssemSearchRow = CType(Me.NewRow,f_ManXPropXAssemSearchRow)
            rowf_ManXPropXAssemSearchRow.ItemArray = New Object() {Nothing, manName, Nothing, propName, storeNo, Nothing, assemSerial}
            Me.Rows.Add(rowf_ManXPropXAssemSearchRow)
            Return rowf_ManXPropXAssemSearchRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As f_ManXPropXAssemSearchDataTable = CType(MyBase.Clone,f_ManXPropXAssemSearchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New f_ManXPropXAssemSearchDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanName = MyBase.Columns("manName")
            Me.columnpropNo = MyBase.Columns("propNo")
            Me.columnpropName = MyBase.Columns("propName")
            Me.columnstoreNo = MyBase.Columns("storeNo")
            Me.columnassemNo = MyBase.Columns("assemNo")
            Me.columnassemSerial = MyBase.Columns("assemSerial")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanName = New System.Data.DataColumn("manName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanName)
            Me.columnpropNo = New System.Data.DataColumn("propNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropNo)
            Me.columnpropName = New System.Data.DataColumn("propName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpropName)
            Me.columnstoreNo = New System.Data.DataColumn("storeNo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstoreNo)
            Me.columnassemNo = New System.Data.DataColumn("assemNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemNo)
            Me.columnassemSerial = New System.Data.DataColumn("assemSerial", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassemSerial)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo, Me.columnpropNo, Me.columnassemNo}, false))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanName.MaxLength = 125
            Me.columnpropNo.AutoIncrement = true
            Me.columnpropNo.ReadOnly = true
            Me.columnpropName.MaxLength = 125
            Me.columnstoreNo.MaxLength = 40
            Me.columnassemNo.AutoIncrement = true
            Me.columnassemNo.ReadOnly = true
            Me.columnassemSerial.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newf_ManXPropXAssemSearchRow() As f_ManXPropXAssemSearchRow
            Return CType(Me.NewRow,f_ManXPropXAssemSearchRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New f_ManXPropXAssemSearchRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(f_ManXPropXAssemSearchRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.f_ManXPropXAssemSearchRowChangedEvent) Is Nothing) Then
                RaiseEvent f_ManXPropXAssemSearchRowChanged(Me, New f_ManXPropXAssemSearchRowChangeEvent(CType(e.Row,f_ManXPropXAssemSearchRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.f_ManXPropXAssemSearchRowChangingEvent) Is Nothing) Then
                RaiseEvent f_ManXPropXAssemSearchRowChanging(Me, New f_ManXPropXAssemSearchRowChangeEvent(CType(e.Row,f_ManXPropXAssemSearchRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.f_ManXPropXAssemSearchRowDeletedEvent) Is Nothing) Then
                RaiseEvent f_ManXPropXAssemSearchRowDeleted(Me, New f_ManXPropXAssemSearchRowChangeEvent(CType(e.Row,f_ManXPropXAssemSearchRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.f_ManXPropXAssemSearchRowDeletingEvent) Is Nothing) Then
                RaiseEvent f_ManXPropXAssemSearchRowDeleting(Me, New f_ManXPropXAssemSearchRowChangeEvent(CType(e.Row,f_ManXPropXAssemSearchRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removef_ManXPropXAssemSearchRow(ByVal row As f_ManXPropXAssemSearchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "f_ManXPropXAssemSearchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ManagersWOutDeletedListDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmanNo As System.Data.DataColumn
        
        Private columnmanNameStreet As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ManagersWOutDeletedList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manNameStreetColumn() As System.Data.DataColumn
            Get
                Return Me.columnmanNameStreet
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ManagersWOutDeletedListRow
            Get
                Return CType(Me.Rows(index),ManagersWOutDeletedListRow)
            End Get
        End Property
        
        Public Event ManagersWOutDeletedListRowChanging As ManagersWOutDeletedListRowChangeEventHandler
        
        Public Event ManagersWOutDeletedListRowChanged As ManagersWOutDeletedListRowChangeEventHandler
        
        Public Event ManagersWOutDeletedListRowDeleting As ManagersWOutDeletedListRowChangeEventHandler
        
        Public Event ManagersWOutDeletedListRowDeleted As ManagersWOutDeletedListRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddManagersWOutDeletedListRow(ByVal row As ManagersWOutDeletedListRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddManagersWOutDeletedListRow(ByVal manNameStreet As String) As ManagersWOutDeletedListRow
            Dim rowManagersWOutDeletedListRow As ManagersWOutDeletedListRow = CType(Me.NewRow,ManagersWOutDeletedListRow)
            rowManagersWOutDeletedListRow.ItemArray = New Object() {Nothing, manNameStreet}
            Me.Rows.Add(rowManagersWOutDeletedListRow)
            Return rowManagersWOutDeletedListRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymanNo(ByVal manNo As Integer) As ManagersWOutDeletedListRow
            Return CType(Me.Rows.Find(New Object() {manNo}),ManagersWOutDeletedListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ManagersWOutDeletedListDataTable = CType(MyBase.Clone,ManagersWOutDeletedListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ManagersWOutDeletedListDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmanNo = MyBase.Columns("manNo")
            Me.columnmanNameStreet = MyBase.Columns("manNameStreet")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmanNo = New System.Data.DataColumn("manNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNo)
            Me.columnmanNameStreet = New System.Data.DataColumn("manNameStreet", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanNameStreet)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmanNo}, true))
            Me.columnmanNo.AutoIncrement = true
            Me.columnmanNo.AllowDBNull = false
            Me.columnmanNo.ReadOnly = true
            Me.columnmanNo.Unique = true
            Me.columnmanNameStreet.ReadOnly = true
            Me.columnmanNameStreet.MaxLength = 383
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewManagersWOutDeletedListRow() As ManagersWOutDeletedListRow
            Return CType(Me.NewRow,ManagersWOutDeletedListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ManagersWOutDeletedListRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ManagersWOutDeletedListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ManagersWOutDeletedListRowChangedEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeletedListRowChanged(Me, New ManagersWOutDeletedListRowChangeEvent(CType(e.Row,ManagersWOutDeletedListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ManagersWOutDeletedListRowChangingEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeletedListRowChanging(Me, New ManagersWOutDeletedListRowChangeEvent(CType(e.Row,ManagersWOutDeletedListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ManagersWOutDeletedListRowDeletedEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeletedListRowDeleted(Me, New ManagersWOutDeletedListRowChangeEvent(CType(e.Row,ManagersWOutDeletedListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ManagersWOutDeletedListRowDeletingEvent) Is Nothing) Then
                RaiseEvent ManagersWOutDeletedListRowDeleting(Me, New ManagersWOutDeletedListRowChangeEvent(CType(e.Row,ManagersWOutDeletedListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveManagersWOutDeletedListRow(ByVal row As ManagersWOutDeletedListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ManagersWOutDeletedListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MunicipalitiesListDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmunNo As System.Data.DataColumn
        
        Private columnmunName As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MunicipalitiesList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNoColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunNo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property munNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnmunName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MunicipalitiesListRow
            Get
                Return CType(Me.Rows(index),MunicipalitiesListRow)
            End Get
        End Property
        
        Public Event MunicipalitiesListRowChanging As MunicipalitiesListRowChangeEventHandler
        
        Public Event MunicipalitiesListRowChanged As MunicipalitiesListRowChangeEventHandler
        
        Public Event MunicipalitiesListRowDeleting As MunicipalitiesListRowChangeEventHandler
        
        Public Event MunicipalitiesListRowDeleted As MunicipalitiesListRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMunicipalitiesListRow(ByVal row As MunicipalitiesListRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMunicipalitiesListRow(ByVal munName As String) As MunicipalitiesListRow
            Dim rowMunicipalitiesListRow As MunicipalitiesListRow = CType(Me.NewRow,MunicipalitiesListRow)
            rowMunicipalitiesListRow.ItemArray = New Object() {Nothing, munName}
            Me.Rows.Add(rowMunicipalitiesListRow)
            Return rowMunicipalitiesListRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBymunNo(ByVal munNo As Integer) As MunicipalitiesListRow
            Return CType(Me.Rows.Find(New Object() {munNo}),MunicipalitiesListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MunicipalitiesListDataTable = CType(MyBase.Clone,MunicipalitiesListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MunicipalitiesListDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmunNo = MyBase.Columns("munNo")
            Me.columnmunName = MyBase.Columns("munName")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmunNo = New System.Data.DataColumn("munNo", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunNo)
            Me.columnmunName = New System.Data.DataColumn("munName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmunName)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnmunNo}, true))
            Me.columnmunNo.AutoIncrement = true
            Me.columnmunNo.AllowDBNull = false
            Me.columnmunNo.ReadOnly = true
            Me.columnmunNo.Unique = true
            Me.columnmunName.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMunicipalitiesListRow() As MunicipalitiesListRow
            Return CType(Me.NewRow,MunicipalitiesListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MunicipalitiesListRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MunicipalitiesListRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MunicipalitiesListRowChangedEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesListRowChanged(Me, New MunicipalitiesListRowChangeEvent(CType(e.Row,MunicipalitiesListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MunicipalitiesListRowChangingEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesListRowChanging(Me, New MunicipalitiesListRowChangeEvent(CType(e.Row,MunicipalitiesListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MunicipalitiesListRowDeletedEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesListRowDeleted(Me, New MunicipalitiesListRowChangeEvent(CType(e.Row,MunicipalitiesListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MunicipalitiesListRowDeletingEvent) Is Nothing) Then
                RaiseEvent MunicipalitiesListRowDeleting(Me, New MunicipalitiesListRowChangeEvent(CType(e.Row,MunicipalitiesListRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMunicipalitiesListRow(ByVal row As MunicipalitiesListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As qbDataSet = New qbDataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MunicipalitiesListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssembliesRow
        Inherits System.Data.DataRow
        
        Private tableAssemblies As AssembliesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblies = CType(Me.Table,AssembliesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblies.assemNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblies.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMan' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMod() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemModColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMod' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemModColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemInstDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemInstDtColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemInstDt' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemInstDtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemLocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemLoc' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemLocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNotes' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemDeleted() As Boolean
            Get
                Return CType(Me(Me.tableAssemblies.assemDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAssemblies.assemDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.AssemManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemManNo' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.AssemManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemTypeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblies.assemTypeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemTypeNo' in table 'Assemblies' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblies.assemTypeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblySizesRow() As AssemblySizesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Assemblies_FK00")),AssemblySizesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Assemblies_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropertiesRow() As PropertiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Assemblies_FK01")),PropertiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Assemblies_FK01"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableAssemblies.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableAssemblies.assemTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemManNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemManNull()
            Me(Me.tableAssemblies.assemManColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemModNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemModColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemModNull()
            Me(Me.tableAssemblies.assemModColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tableAssemblies.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableAssemblies.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableAssemblies.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tableAssemblies.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemInstDtNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemInstDtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemInstDtNull()
            Me(Me.tableAssemblies.assemInstDtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemLocNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemLocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemLocNull()
            Me(Me.tableAssemblies.assemLocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNotesNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNotesNull()
            Me(Me.tableAssemblies.assemNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableAssemblies.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemManNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.AssemManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemManNoNull()
            Me(Me.tableAssemblies.AssemManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblies.assemTypeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNoNull()
            Me(Me.tableAssemblies.assemTypeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTestsRows() As TestsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Tests_FK00")),TestsRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblyManufacturerRow
        Inherits System.Data.DataRow
        
        Private tableAssemblyManufacturer As AssemblyManufacturerDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblyManufacturer = CType(Me.Table,AssemblyManufacturerDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemManNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblyManufacturer.AssemManNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblyManufacturer.AssemManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyManufacturer.AssemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemMan' in table 'AssemblyManufacturer' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyManufacturer.AssemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemManNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyManufacturer.AssemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemManNull()
            Me(Me.tableAssemblyManufacturer.AssemManColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblySizesRow
        Inherits System.Data.DataRow
        
        Private tableAssemblySizes As AssemblySizesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblySizes = CType(Me.Table,AssemblySizesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemSizeNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblySizes.AssemSizeNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblySizes.AssemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemSize() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblySizes.AssemSizeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemSize' in table 'AssemblySizes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblySizes.AssemSizeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemSizeNull() As Boolean
            Return Me.IsNull(Me.tableAssemblySizes.AssemSizeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemSizeNull()
            Me(Me.tableAssemblySizes.AssemSizeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAssembliesRows() As AssembliesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Assemblies_FK00")),AssembliesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPriceRows() As PriceRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Price_FK00")),PriceRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblyTypesRow
        Inherits System.Data.DataRow
        
        Private tableAssemblyTypes As AssemblyTypesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblyTypes = CType(Me.Table,AssemblyTypesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemTypeNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblyTypes.assemTypeNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblyTypes.assemTypeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyTypes.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'AssemblyTypes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyTypes.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyTypes.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableAssemblyTypes.assemTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblyUsageRow
        Inherits System.Data.DataRow
        
        Private tableAssemblyUsage As AssemblyUsageDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblyUsage = CType(Me.Table,AssemblyUsageDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsageNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblyUsage.assemUsageNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblyUsage.assemUsageNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyUsage.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'AssemblyUsage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyUsage.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyUsage.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'AssemblyUsage' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyUsage.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblyUsagePriceRow() As AssemblyUsagePriceRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("AssemblyUsage_FK00")),AssemblyUsagePriceRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("AssemblyUsage_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyUsage.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableAssemblyUsage.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyUsage.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tableAssemblyUsage.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblyUsagePriceRow
        Inherits System.Data.DataRow
        
        Private tableAssemblyUsagePrice As AssemblyUsagePriceDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblyUsagePrice = CType(Me.Table,AssemblyUsagePriceDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblyUsagePrice.assemUsagePriceNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblyUsagePrice.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceName() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyUsagePrice.assemUsagePriceNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceName' in table 'AssemblyUsagePrice' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyUsagePrice.assemUsagePriceNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNameNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyUsagePrice.assemUsagePriceNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNameNull()
            Me(Me.tableAssemblyUsagePrice.assemUsagePriceNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAssemblyUsageRows() As AssemblyUsageRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("AssemblyUsage_FK00")),AssemblyUsageRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPriceRows() As PriceRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Price_FK01")),PriceRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatesRow
        Inherits System.Data.DataRow
        
        Private tableDates As DatesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDates = CType(Me.Table,DatesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Record() As Integer
            Get
                Return CType(Me(Me.tableDates.RecordColumn),Integer)
            End Get
            Set
                Me(Me.tableDates.RecordColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDates.StartDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StartDate' in table 'Dates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDates.StartDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinishDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDates.FinishDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'FinishDate' in table 'Dates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDates.FinishDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SingleDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDates.SingleDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'SingleDate' in table 'Dates' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDates.SingleDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tableDates.StartDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDateNull()
            Me(Me.tableDates.StartDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinishDateNull() As Boolean
            Return Me.IsNull(Me.tableDates.FinishDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinishDateNull()
            Me(Me.tableDates.FinishDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSingleDateNull() As Boolean
            Return Me.IsNull(Me.tableDates.SingleDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSingleDateNull()
            Me(Me.tableDates.SingleDateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagersRow
        Inherits System.Data.DataRow
        
        Private tableManagers As ManagersDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagers = CType(Me.Table,ManagersDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagers.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagers.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manFax' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manEmail' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNotes' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCurAcct() As Boolean
            Get
                Return CType(Me(Me.tableManagers.manCurAcctColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagers.manCurAcctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableManagers.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagers.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableManagers.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manLogoPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagers.manLogoPathColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manLogoPath' in table 'Managers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagers.manLogoPathColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PricingSchemesRow() As PricingSchemesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Managers_FK00")),PricingSchemesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Managers_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagers.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagers.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableManagers.manSuiteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableManagers.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableManagers.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableManagers.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableManagers.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableManagers.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanFaxNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanFaxNull()
            Me(Me.tableManagers.manFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanEmailNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanEmailNull()
            Me(Me.tableManagers.manEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNotesNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNotesNull()
            Me(Me.tableManagers.manNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tableManagers.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableManagers.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableManagers.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanLogoPathNull() As Boolean
            Return Me.IsNull(Me.tableManagers.manLogoPathColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanLogoPathNull()
            Me(Me.tableManagers.manLogoPathColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPropertiesRows() As PropertiesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Properties_FK00")),PropertiesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MunicipalitiesRow
        Inherits System.Data.DataRow
        
        Private tableMunicipalities As MunicipalitiesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMunicipalities = CType(Me.Table,MunicipalitiesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Return CType(Me(Me.tableMunicipalities.munNoColumn),Integer)
            End Get
            Set
                Me(Me.tableMunicipalities.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munName' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munStrtAddr() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munStrtAddrColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munStrtAddr' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munStrtAddrColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munCity' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munState() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munState' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munZip' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munPhone' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munFax' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munCntct' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munEmail' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munDept() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munDeptColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munDept' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munDeptColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munPref() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalities.munPrefColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munPref' in table 'Municipalities' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalities.munPrefColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munDeleted() As Boolean
            Get
                Return CType(Me(Me.tableMunicipalities.munDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableMunicipalities.munDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNameNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNameNull()
            Me(Me.tableMunicipalities.munNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunStrtAddrNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munStrtAddrColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunStrtAddrNull()
            Me(Me.tableMunicipalities.munStrtAddrColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunCityNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunCityNull()
            Me(Me.tableMunicipalities.munCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunStateNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunStateNull()
            Me(Me.tableMunicipalities.munStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunZipNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunZipNull()
            Me(Me.tableMunicipalities.munZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunPhoneNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunPhoneNull()
            Me(Me.tableMunicipalities.munPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunFaxNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunFaxNull()
            Me(Me.tableMunicipalities.munFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunCntctNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunCntctNull()
            Me(Me.tableMunicipalities.munCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunEmailNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunEmailNull()
            Me(Me.tableMunicipalities.munEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunDeptNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munDeptColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunDeptNull()
            Me(Me.tableMunicipalities.munDeptColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunPrefNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalities.munPrefColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunPrefNull()
            Me(Me.tableMunicipalities.munPrefColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPropertiesRows() As PropertiesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Properties_FK01")),PropertiesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PriceRow
        Inherits System.Data.DataRow
        
        Private tablePrice As PriceDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePrice = CType(Me.Table,PriceDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priceNo() As Integer
            Get
                Return CType(Me(Me.tablePrice.priceNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePrice.priceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrice.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'Price' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrice.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrice.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'Price' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrice.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePrice.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'Price' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrice.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePrice.priceColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'price' in table 'Price' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrice.priceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePrice.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'Price' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePrice.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblySizesRow() As AssemblySizesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Price_FK00")),AssemblySizesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Price_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemblyUsagePriceRow() As AssemblyUsagePriceRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Price_FK01")),AssemblyUsagePriceRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Price_FK01"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PricingSchemesRow() As PricingSchemesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Price_FK02")),PricingSchemesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Price_FK02"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tablePrice.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tablePrice.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tablePrice.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tablePrice.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tablePrice.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tablePrice.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tablePrice.priceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriceNull()
            Me(Me.tablePrice.priceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tablePrice.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tablePrice.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PricingSchemesRow
        Inherits System.Data.DataRow
        
        Private tablePricingSchemes As PricingSchemesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePricingSchemes = CType(Me.Table,PricingSchemesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Return CType(Me(Me.tablePricingSchemes.manSchemeNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePricingSchemes.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemes.manSchemeNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeName' in table 'PricingSchemes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemes.manSchemeNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNameNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemes.manSchemeNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNameNull()
            Me(Me.tablePricingSchemes.manSchemeNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetManagersRows() As ManagersRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Managers_FK00")),ManagersRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPriceRows() As PriceRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Price_FK02")),PriceRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PropertiesRow
        Inherits System.Data.DataRow
        
        Private tableProperties As PropertiesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProperties = CType(Me.Table,PropertiesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Return CType(Me(Me.tableProperties.propNoColumn),Integer)
            End Get
            Set
                Me(Me.tableProperties.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProperties.manNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNo' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCon() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propConColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCon' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propConColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPhone' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propFax' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propEmail' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProperties.munNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munNo' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPrevManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propPrevManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPrevManNo' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propPrevManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retestTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.retestToColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'retestTo' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.retestToColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNotes' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propDeleted() As Boolean
            Get
                Return CType(Me(Me.tableProperties.propDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableProperties.propDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propAdded() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProperties.propAddedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propAdded' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.propAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableProperties.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'Properties' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProperties.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManagersRow() As ManagersRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Properties_FK00")),ManagersRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Properties_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipalitiesRow() As MunicipalitiesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Properties_FK01")),MunicipalitiesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Properties_FK01"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipalitiesListRow() As MunicipalitiesListRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Properties_FK011")),MunicipalitiesListRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Properties_FK011"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNoNull() As Boolean
            Return Me.IsNull(Me.tableProperties.manNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNoNull()
            Me(Me.tableProperties.manNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableProperties.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableProperties.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableProperties.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropConNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propConColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropConNull()
            Me(Me.tableProperties.propConColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableProperties.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableProperties.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableProperties.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableProperties.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPhoneNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPhoneNull()
            Me(Me.tableProperties.propPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropFaxNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropFaxNull()
            Me(Me.tableProperties.propFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropEmailNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropEmailNull()
            Me(Me.tableProperties.propEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNoNull() As Boolean
            Return Me.IsNull(Me.tableProperties.munNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNoNull()
            Me(Me.tableProperties.munNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPrevManNoNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propPrevManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPrevManNoNull()
            Me(Me.tableProperties.propPrevManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsretestToNull() As Boolean
            Return Me.IsNull(Me.tableProperties.retestToColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetretestToNull()
            Me(Me.tableProperties.retestToColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNotesNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNotesNull()
            Me(Me.tableProperties.propNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropAddedNull() As Boolean
            Return Me.IsNull(Me.tableProperties.propAddedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropAddedNull()
            Me(Me.tableProperties.propAddedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableProperties.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableProperties.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAssembliesRows() As AssembliesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Assemblies_FK01")),AssembliesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TestersRow
        Inherits System.Data.DataRow
        
        Private tableTesters As TestersDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTesters = CType(Me.Table,TestersDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrNo() As Integer
            Get
                Return CType(Me(Me.tableTesters.tstrNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTesters.tstrNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTesters.tstrNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrName' in table 'Testers' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTesters.tstrNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNameNull() As Boolean
            Return Me.IsNull(Me.tableTesters.tstrNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNameNull()
            Me(Me.tableTesters.tstrNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TestsRow
        Inherits System.Data.DataRow
        
        Private tableTests As TestsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTests = CType(Me.Table,TestsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testNo() As Integer
            Get
                Return CType(Me(Me.tableTests.testNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTests.testNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTests.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTests.testDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testDate' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.testDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPerformed() As Boolean
            Get
                Return CType(Me(Me.tableTests.testPerformedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTests.testPerformedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPass() As Boolean
            Get
                Return CType(Me(Me.tableTests.testPassColumn),Boolean)
            End Get
            Set
                Me(Me.tableTests.testPassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testHours() As Double
            Get
                Try 
                    Return CType(Me(Me.tableTests.testHoursColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testHours' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.testHoursColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Return CType(Me(Me.tableTests.PONoColumn),String)
            End Get
            Set
                Me(Me.tableTests.PONoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTests.tstrNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrName' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.tstrNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableTests.NotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Notes' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.NotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDeleted() As Boolean
            Get
                Return CType(Me(Me.tableTests.testDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTests.testDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableTests.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTests.tstrNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrNo' in table 'Tests' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTests.tstrNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssembliesRow() As AssembliesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Tests_FK00")),AssembliesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Tests_FK00"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableTests.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableTests.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestDateNull() As Boolean
            Return Me.IsNull(Me.tableTests.testDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestDateNull()
            Me(Me.tableTests.testDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestHoursNull() As Boolean
            Return Me.IsNull(Me.tableTests.testHoursColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestHoursNull()
            Me(Me.tableTests.testHoursColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNameNull() As Boolean
            Return Me.IsNull(Me.tableTests.tstrNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNameNull()
            Me(Me.tableTests.tstrNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableTests.NotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableTests.NotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableTests.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableTests.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNoNull() As Boolean
            Return Me.IsNull(Me.tableTests.tstrNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNoNull()
            Me(Me.tableTests.tstrNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssembliesWOutDeleted_VWRow
        Inherits System.Data.DataRow
        
        Private tableAssembliesWOutDeleted_VW As AssembliesWOutDeleted_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssembliesWOutDeleted_VW = CType(Me.Table,AssembliesWOutDeleted_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMan' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMod() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemModColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMod' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemModColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'AssembliesWOutDeleted_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'AssembliesWOutDeleted_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'AssembliesWOutDeleted_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemInstDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemInstDtColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemInstDt' in table 'AssembliesWOutDeleted_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemInstDtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemLocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemLoc' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemLocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNotes' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemDeleted() As Boolean
            Get
                Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.AssemManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemManNo' in table 'AssembliesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.AssemManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemTypeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssembliesWOutDeleted_VW.assemTypeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemTypeNo' in table 'AssembliesWOutDeleted_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssembliesWOutDeleted_VW.assemTypeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableAssembliesWOutDeleted_VW.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemManNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemManNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemManColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemModNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemModColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemModNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemModColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemInstDtNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemInstDtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemInstDtNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemInstDtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemLocNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemLocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemLocNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemLocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNotesNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNotesNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableAssembliesWOutDeleted_VW.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemManNoNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.AssemManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemManNoNull()
            Me(Me.tableAssembliesWOutDeleted_VW.AssemManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssembliesWOutDeleted_VW.assemTypeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNoNull()
            Me(Me.tableAssembliesWOutDeleted_VW.assemTypeNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DeviceTestsInLastYear_VWRow
        Inherits System.Data.DataRow
        
        Private tableDeviceTestsInLastYear_VW As DeviceTestsInLastYear_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDeviceTestsInLastYear_VW = CType(Me.Table,DeviceTestsInLastYear_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manFax' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manEmail' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNotes' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCurAcct() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manCurAcctColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manCurAcctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manLogoPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.manLogoPathColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manLogoPath' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.manLogoPathColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propNoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCon() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propConColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCon' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propConColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPhone' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propFax' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propEmail' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.munNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munNo' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPrevManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propPrevManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPrevManNo' in table 'DeviceTestsInLastYear_VW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propPrevManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retestTo() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.retestToColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'retestTo' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.retestToColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNotes' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propDeleted() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propAdded() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.propAddedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propAdded' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.propAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemNoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMan' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMod() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemModColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMod' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemModColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'DeviceTestsInLastYear_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemInstDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemInstDtColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemInstDt' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemInstDtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemLocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemLoc' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemLocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNotes' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemDeleted() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.AssemManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemManNo' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.AssemManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemTypeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.assemTypeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemTypeNo' in table 'DeviceTestsInLastYear_VW' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.assemTypeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testNo() As Integer
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testNoColumn),Integer)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testDate' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPerformed() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testPerformedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testPerformedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPass() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testPassColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testPassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testHours() As Double
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testHoursColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testHours' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testHoursColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONo() As String
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.PONoColumn),String)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.PONoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.tstrNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrName' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.tstrNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notes() As String
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.NotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Notes' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.NotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDeleted() As Boolean
            Get
                Return CType(Me(Me.tableDeviceTestsInLastYear_VW.testDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.testDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDeviceTestsInLastYear_VW.tstrNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrNo' in table 'DeviceTestsInLastYear_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDeviceTestsInLastYear_VW.tstrNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manSuiteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanFaxNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanFaxNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanEmailNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanEmailNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNotesNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNotesNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanLogoPathNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.manLogoPathColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanLogoPathNull()
            Me(Me.tableDeviceTestsInLastYear_VW.manLogoPathColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropConNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propConColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropConNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propConColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPhoneNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPhoneNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropFaxNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropFaxNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropEmailNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropEmailNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.munNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.munNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPrevManNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propPrevManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPrevManNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propPrevManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsretestToNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.retestToColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetretestToNull()
            Me(Me.tableDeviceTestsInLastYear_VW.retestToColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNotesNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNotesNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropAddedNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.propAddedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropAddedNull()
            Me(Me.tableDeviceTestsInLastYear_VW.propAddedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemManNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemManNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemManColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemModNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemModColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemModNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemModColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemInstDtNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemInstDtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemInstDtNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemInstDtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemLocNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemLocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemLocNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemLocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNotesNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNotesNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemManNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.AssemManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemManNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.AssemManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.assemTypeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.assemTypeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestDateNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.testDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestDateNull()
            Me(Me.tableDeviceTestsInLastYear_VW.testDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestHoursNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.testHoursColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestHoursNull()
            Me(Me.tableDeviceTestsInLastYear_VW.testHoursColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNameNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.tstrNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNameNull()
            Me(Me.tableDeviceTestsInLastYear_VW.tstrNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotesNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.NotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotesNull()
            Me(Me.tableDeviceTestsInLastYear_VW.NotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNoNull() As Boolean
            Return Me.IsNull(Me.tableDeviceTestsInLastYear_VW.tstrNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNoNull()
            Me(Me.tableDeviceTestsInLastYear_VW.tstrNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagersWOutDeleted_VWRow
        Inherits System.Data.DataRow
        
        Private tableManagersWOutDeleted_VW As ManagersWOutDeleted_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagersWOutDeleted_VW = CType(Me.Table,ManagersWOutDeleted_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagersWOutDeleted_VW.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manFax' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manEmail' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNotes' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCurAcct() As Boolean
            Get
                Return CType(Me(Me.tableManagersWOutDeleted_VW.manCurAcctColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manCurAcctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableManagersWOutDeleted_VW.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manLogoPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.manLogoPathColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manLogoPath' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.manLogoPathColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeleted_VW.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'ManagersWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeleted_VW.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagersWOutDeleted_VW.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagersWOutDeleted_VW.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableManagersWOutDeleted_VW.manSuiteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableManagersWOutDeleted_VW.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableManagersWOutDeleted_VW.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableManagersWOutDeleted_VW.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableManagersWOutDeleted_VW.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableManagersWOutDeleted_VW.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanFaxNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanFaxNull()
            Me(Me.tableManagersWOutDeleted_VW.manFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanEmailNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanEmailNull()
            Me(Me.tableManagersWOutDeleted_VW.manEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNotesNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNotesNull()
            Me(Me.tableManagersWOutDeleted_VW.manNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tableManagersWOutDeleted_VW.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanLogoPathNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.manLogoPathColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanLogoPathNull()
            Me(Me.tableManagersWOutDeleted_VW.manLogoPathColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeleted_VW.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableManagersWOutDeleted_VW.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagersXPropertiesXAssemblies_VWRow
        Inherits System.Data.DataRow
        
        Private tableManagersXPropertiesXAssemblies_VW As ManagersXPropertiesXAssemblies_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagersXPropertiesXAssemblies_VW = CType(Me.Table,ManagersXPropertiesXAssemblies_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'ManagersXPropertiesXAssemblies_VW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'ManagersXPropertiesXAssemblies_VW' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'ManagersXPropertiesXAssemblies_VW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'ManagersXPropertiesXAssemblies_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'ManagersXPropertiesXAssemblies_VW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'ManagersXPropertiesXAssemblies_VW' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'ManagersXPropertiesXAssemblies_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'ManagersXPropertiesXAssemblies_VW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'ManagersXPropertiesXAssemblies_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'ManagersXPropertiesXAssemblies_VW' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'ManagersXPropertiesXAssemblies_VW' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'ManagersXPropertiesXAssemblies_VW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'ManagersXPropertiesXAssemblies_VW' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssemblies_VW.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'ManagersXPropertiesXAssemblies_VW' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssemblies_VW.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssemblies_VW.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableManagersXPropertiesXAssemblies_VW.assemSerialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagersXPropertiesXAssembliesXTests_VWRow
        Inherits System.Data.DataRow
        
        Private tableManagersXPropertiesXAssembliesXTests_VW As ManagersXPropertiesXAssembliesXTests_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagersXPropertiesXAssembliesXTests_VW = CType(Me.Table,ManagersXPropertiesXAssembliesXTests_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'ManagersXPropertiesXAssembliesXTests_VW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'ManagersXPropertiesXAssembliesXTests_"& _ 
                            "VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'ManagersXPropertiesXAssembliesXTests_VW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'ManagersXPropertiesXAssembliesXTests_VW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'ManagersXPropertiesXAssembliesXTests_VW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'ManagersXPropertiesXAssembliesXTests_VW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'ManagersXPropertiesXAssembliesXTests_V"& _ 
                            "W' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'ManagersXPropertiesXAssembliesXTests_VW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'ManagersXPropertiesXAssembliesXTests_VW'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'ManagersXPropertiesXAssembliesXTests"& _ 
                            "_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testNo' in table 'ManagersXPropertiesXAssembliesXTests_VW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPerformed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPerformedColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testPerformed' in table 'ManagersXPropertiesXAssembliesXTes"& _ 
                            "ts_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPerformedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPass() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPassColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testPass' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrNo' in table 'ManagersXPropertiesXAssembliesXTests_VW' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testDate' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrName' in table 'ManagersXPropertiesXAssembliesXTests_VW"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.testNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestNoNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestPerformedNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPerformedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestPerformedNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPerformedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestPassNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPassColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestPassNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testPassColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNoNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNoNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestDateNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.testDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestDateNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.testDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNameNull() As Boolean
            Return Me.IsNull(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNameNull()
            Me(Me.tableManagersXPropertiesXAssembliesXTests_VW.tstrNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PricingSchemeViewRow
        Inherits System.Data.DataRow
        
        Private tablePricingSchemeView As PricingSchemeViewDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePricingSchemeView = CType(Me.Table,PricingSchemeViewDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priceNo() As Integer
            Get
                Return CType(Me(Me.tablePricingSchemeView.priceNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePricingSchemeView.priceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemeView.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'PricingSchemeView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemeView.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemeView.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'PricingSchemeView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemeView.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemeView.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'PricingSchemeView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemeView.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemeView.priceColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'price' in table 'PricingSchemeView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemeView.priceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePricingSchemeView.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'PricingSchemeView' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingSchemeView.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemeView.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tablePricingSchemeView.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemeView.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tablePricingSchemeView.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemeView.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tablePricingSchemeView.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemeView.priceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriceNull()
            Me(Me.tablePricingSchemeView.priceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tablePricingSchemeView.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tablePricingSchemeView.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PropertiesWOutDeleted_VWRow
        Inherits System.Data.DataRow
        
        Private tablePropertiesWOutDeleted_VW As PropertiesWOutDeleted_VWDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePropertiesWOutDeleted_VW = CType(Me.Table,PropertiesWOutDeleted_VWDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.manNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNo' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCon() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propConColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCon' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propConColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPhone' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propFax() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propFax' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propEmail' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.munNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munNo' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPrevManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propPrevManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPrevManNo' in table 'PropertiesWOutDeleted_VW' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propPrevManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retestTo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.retestToColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'retestTo' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.retestToColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNotes' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propDeleted() As Boolean
            Get
                Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propAdded() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.propAddedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propAdded' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.propAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePropertiesWOutDeleted_VW.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'PropertiesWOutDeleted_VW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertiesWOutDeleted_VW.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.manNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNoNull()
            Me(Me.tablePropertiesWOutDeleted_VW.manNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tablePropertiesWOutDeleted_VW.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropConNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propConColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropConNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propConColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPhoneNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPhoneNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropFaxNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropFaxNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropEmailNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropEmailNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.munNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNoNull()
            Me(Me.tablePropertiesWOutDeleted_VW.munNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPrevManNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propPrevManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPrevManNoNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propPrevManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsretestToNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.retestToColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetretestToNull()
            Me(Me.tablePropertiesWOutDeleted_VW.retestToColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNotesNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNotesNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropAddedNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.propAddedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropAddedNull()
            Me(Me.tablePropertiesWOutDeleted_VW.propAddedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tablePropertiesWOutDeleted_VW.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tablePropertiesWOutDeleted_VW.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AssemblyInfoByPrimaryKeyRow
        Inherits System.Data.DataRow
        
        Private tableAssemblyInfoByPrimaryKey As AssemblyInfoByPrimaryKeyDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAssemblyInfoByPrimaryKey = CType(Me.Table,AssemblyInfoByPrimaryKeyDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemNoColumn),Integer)
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMan' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMod() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemModColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMod' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemModColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'AssemblyInfoByPrimaryKey' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'AssemblyInfoByPrimaryKey' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'AssemblyInfoByPrimaryKey' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemInstDt() As Date
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemInstDtColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemInstDt' in table 'AssemblyInfoByPrimaryKey' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemInstDtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemLocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemLoc' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemLocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNotes' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemDeleted() As Boolean
            Get
                Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.AssemManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemManNo' in table 'AssemblyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.AssemManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemTypeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemTypeNo' in table 'AssemblyInfoByPrimaryKey' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemManNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemManNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemManColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemModNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemModColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemModNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemModColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemInstDtNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemInstDtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemInstDtNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemInstDtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemLocNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemLocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemLocNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemLocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNotesNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNotesNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.upsize_tsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemManNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.AssemManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemManNoNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.AssemManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNoNull() As Boolean
            Return Me.IsNull(Me.tableAssemblyInfoByPrimaryKey.assemTypeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNoNull()
            Me(Me.tableAssemblyInfoByPrimaryKey.assemTypeNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class GetManagersListRow
        Inherits System.Data.DataRow
        
        Private tableGetManagersList As GetManagersListDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableGetManagersList = CType(Me.Table,GetManagersListDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableGetManagersList.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableGetManagersList.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manFax' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manEmail' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNotes' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCurAcct() As Boolean
            Get
                Return CType(Me(Me.tableGetManagersList.manCurAcctColumn),Boolean)
            End Get
            Set
                Me(Me.tableGetManagersList.manCurAcctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableGetManagersList.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableGetManagersList.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableGetManagersList.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'GetManagersList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableGetManagersList.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableGetManagersList.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableGetManagersList.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableGetManagersList.manSuiteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableGetManagersList.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableGetManagersList.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableGetManagersList.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableGetManagersList.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableGetManagersList.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanFaxNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanFaxNull()
            Me(Me.tableGetManagersList.manFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanEmailNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanEmailNull()
            Me(Me.tableGetManagersList.manEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNotesNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNotesNull()
            Me(Me.tableGetManagersList.manNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tableGetManagersList.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableGetManagersList.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableGetManagersList.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagerInfoByPrimaryKeyRow
        Inherits System.Data.DataRow
        
        Private tableManagerInfoByPrimaryKey As ManagerInfoByPrimaryKeyDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagerInfoByPrimaryKey = CType(Me.Table,ManagerInfoByPrimaryKeyDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagerInfoByPrimaryKey.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manFax' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manEmail' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNotes' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCurAcct() As Boolean
            Get
                Return CType(Me(Me.tableManagerInfoByPrimaryKey.manCurAcctColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manCurAcctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableManagerInfoByPrimaryKey.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableManagerInfoByPrimaryKey.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'ManagerInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerInfoByPrimaryKey.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagerInfoByPrimaryKey.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagerInfoByPrimaryKey.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableManagerInfoByPrimaryKey.manSuiteColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableManagerInfoByPrimaryKey.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableManagerInfoByPrimaryKey.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableManagerInfoByPrimaryKey.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableManagerInfoByPrimaryKey.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableManagerInfoByPrimaryKey.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanFaxNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanFaxNull()
            Me(Me.tableManagerInfoByPrimaryKey.manFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanEmailNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanEmailNull()
            Me(Me.tableManagerInfoByPrimaryKey.manEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNotesNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNotesNull()
            Me(Me.tableManagerInfoByPrimaryKey.manNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tableManagerInfoByPrimaryKey.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tableManagerInfoByPrimaryKey.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tableManagerInfoByPrimaryKey.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagerNameNoStrtSuite_selRow
        Inherits System.Data.DataRow
        
        Private tableManagerNameNoStrtSuite_sel As ManagerNameNoStrtSuite_selDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagerNameNoStrtSuite_sel = CType(Me.Table,ManagerNameNoStrtSuite_selDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagerNameNoStrtSuite_sel.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagerNameNoStrtSuite_sel.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerNameNoStrtSuite_sel.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'ManagerNameNoStrtSuite_sel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerNameNoStrtSuite_sel.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerNameNoStrtSuite_sel.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'ManagerNameNoStrtSuite_sel' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerNameNoStrtSuite_sel.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSuite() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagerNameNoStrtSuite_sel.manSuiteColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSuite' in table 'ManagerNameNoStrtSuite_sel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableManagerNameNoStrtSuite_sel.manSuiteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableManagerNameNoStrtSuite_sel.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableManagerNameNoStrtSuite_sel.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableManagerNameNoStrtSuite_sel.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableManagerNameNoStrtSuite_sel.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSuiteNull() As Boolean
            Return Me.IsNull(Me.tableManagerNameNoStrtSuite_sel.manSuiteColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSuiteNull()
            Me(Me.tableManagerNameNoStrtSuite_sel.manSuiteColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PricingListRow
        Inherits System.Data.DataRow
        
        Private tablePricingList As PricingListDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePricingList = CType(Me.Table,PricingListDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssemSize() As String
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.AssemSizeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'AssemSize' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.AssemSizeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property priceNo() As Integer
            Get
                Return CType(Me(Me.tablePricingList.priceNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePricingList.priceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manSchemeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.manSchemeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manSchemeNo' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.manSchemeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSizeNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.assemSizeNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSizeNo' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.assemSizeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsagePriceNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.assemUsagePriceNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsagePriceNo' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.assemUsagePriceNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property price() As Double
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.priceColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'price' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.priceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePricingList.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'PricingList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePricingList.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssemSizeNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.AssemSizeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssemSizeNull()
            Me(Me.tablePricingList.AssemSizeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanSchemeNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.manSchemeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanSchemeNoNull()
            Me(Me.tablePricingList.manSchemeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.assemSizeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNoNull()
            Me(Me.tablePricingList.assemSizeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsagePriceNoNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.assemUsagePriceNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsagePriceNoNull()
            Me(Me.tablePricingList.assemUsagePriceNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspriceNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.priceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpriceNull()
            Me(Me.tablePricingList.priceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tablePricingList.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tablePricingList.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PropertyInfoByPrimaryKeyRow
        Inherits System.Data.DataRow
        
        Private tablePropertyInfoByPrimaryKey As PropertyInfoByPrimaryKeyDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePropertyInfoByPrimaryKey = CType(Me.Table,PropertyInfoByPrimaryKeyDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propNoColumn),Integer)
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.manNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNo' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCon() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propConColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCon' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propConColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPhone' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propFax() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propFax' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propEmail() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propEmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propEmail' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propEmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.munNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munNo' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPrevManNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propPrevManNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPrevManNo' in table 'PropertyInfoByPrimaryKey' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propPrevManNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property retestTo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.retestToColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'retestTo' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.retestToColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNotes() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propNotesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNotes' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propNotesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propDeleted() As Boolean
            Get
                Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propAdded() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.propAddedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propAdded' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.propAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property upsize_ts() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablePropertyInfoByPrimaryKey.upsize_tsColumn),Byte())
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'upsize_ts' in table 'PropertyInfoByPrimaryKey' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropertyInfoByPrimaryKey.upsize_tsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.manNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNoNull()
            Me(Me.tablePropertyInfoByPrimaryKey.manNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tablePropertyInfoByPrimaryKey.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropConNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propConColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropConNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propConColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPhoneNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPhoneNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropFaxNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropFaxNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propFaxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropEmailNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propEmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropEmailNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propEmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.munNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNoNull()
            Me(Me.tablePropertyInfoByPrimaryKey.munNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPrevManNoNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propPrevManNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPrevManNoNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propPrevManNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsretestToNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.retestToColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetretestToNull()
            Me(Me.tablePropertyInfoByPrimaryKey.retestToColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNotesNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propNotesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNotesNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propNotesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropAddedNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.propAddedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropAddedNull()
            Me(Me.tablePropertyInfoByPrimaryKey.propAddedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isupsize_tsNull() As Boolean
            Return Me.IsNull(Me.tablePropertyInfoByPrimaryKey.upsize_tsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setupsize_tsNull()
            Me(Me.tablePropertyInfoByPrimaryKey.upsize_tsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SelectTestInfoRow
        Inherits System.Data.DataRow
        
        Private tableSelectTestInfo As SelectTestInfoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSelectTestInfo = CType(Me.Table,SelectTestInfoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableSelectTestInfo.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableSelectTestInfo.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPerformed() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.testPerformedColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testPerformed' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.testPerformedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testPass() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.testPassColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testPass' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.testPassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.tstrNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrNo' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.tstrNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.testDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testDate' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.testDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tstrName() As String
            Get
                Try 
                    Return CType(Me(Me.tableSelectTestInfo.tstrNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'tstrName' in table 'SelectTestInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSelectTestInfo.tstrNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableSelectTestInfo.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableSelectTestInfo.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableSelectTestInfo.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableSelectTestInfo.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableSelectTestInfo.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableSelectTestInfo.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableSelectTestInfo.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableSelectTestInfo.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableSelectTestInfo.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableSelectTestInfo.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableSelectTestInfo.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableSelectTestInfo.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableSelectTestInfo.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableSelectTestInfo.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestPerformedNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.testPerformedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestPerformedNull()
            Me(Me.tableSelectTestInfo.testPerformedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestPassNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.testPassColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestPassNull()
            Me(Me.tableSelectTestInfo.testPassColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNoNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.tstrNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNoNull()
            Me(Me.tableSelectTestInfo.tstrNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestDateNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.testDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestDateNull()
            Me(Me.tableSelectTestInfo.testDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IststrNameNull() As Boolean
            Return Me.IsNull(Me.tableSelectTestInfo.tstrNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettstrNameNull()
            Me(Me.tableSelectTestInfo.tstrNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TestReports_SELRow
        Inherits System.Data.DataRow
        
        Private tableTestReports_SEL As TestReports_SELDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTestReports_SEL = CType(Me.Table,TestReports_SELDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableTestReports_SEL.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTestReports_SEL.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manStrtAdd() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manStrtAddColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manStrtAdd' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manStrtAddColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCity' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manState() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manState' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manZip' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manCntct() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manCntctColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manCntct' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manCntctColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manPhone' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manLogoPath() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.manLogoPathColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manLogoPath' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.manLogoPathColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Return CType(Me(Me.tableTestReports_SEL.propNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTestReports_SEL.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propStrt() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propStrtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propStrt' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propStrtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propCityColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCity' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propCityColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propState() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propStateColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propState' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propStateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propZipColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propZip' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propZipColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propCon() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propConColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propCon' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propConColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propPhone() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.propPhoneColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propPhone' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.propPhoneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Return CType(Me(Me.tableTestReports_SEL.assemNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMan() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemManColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMan' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemManColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemMod() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemModColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemMod' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemModColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemTypeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemType' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemUsage() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemUsageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemUsage' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemUsageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemLoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemLocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemLoc' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemLocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSize() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.assemSizeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSize' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.assemSizeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testNo() As Integer
            Get
                Return CType(Me(Me.tableTestReports_SEL.testNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTestReports_SEL.testNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property testDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.testDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'testDate' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.testDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munPref() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.munPrefColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munPref' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.munPrefColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.munNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munName' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.munNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munFax() As String
            Get
                Try 
                    Return CType(Me(Me.tableTestReports_SEL.munFaxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munFax' in table 'TestReports_SEL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTestReports_SEL.munFaxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableTestReports_SEL.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStrtAddNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manStrtAddColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStrtAddNull()
            Me(Me.tableTestReports_SEL.manStrtAddColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCityNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCityNull()
            Me(Me.tableTestReports_SEL.manCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanStateNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanStateNull()
            Me(Me.tableTestReports_SEL.manStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanZipNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanZipNull()
            Me(Me.tableTestReports_SEL.manZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanCntctNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manCntctColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanCntctNull()
            Me(Me.tableTestReports_SEL.manCntctColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanPhoneNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanPhoneNull()
            Me(Me.tableTestReports_SEL.manPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanLogoPathNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.manLogoPathColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanLogoPathNull()
            Me(Me.tableTestReports_SEL.manLogoPathColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableTestReports_SEL.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableTestReports_SEL.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStrtNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propStrtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStrtNull()
            Me(Me.tableTestReports_SEL.propStrtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropCityNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propCityColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropCityNull()
            Me(Me.tableTestReports_SEL.propCityColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropStateNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propStateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropStateNull()
            Me(Me.tableTestReports_SEL.propStateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropZipNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propZipColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropZipNull()
            Me(Me.tableTestReports_SEL.propZipColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropConNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propConColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropConNull()
            Me(Me.tableTestReports_SEL.propConColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropPhoneNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.propPhoneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropPhoneNull()
            Me(Me.tableTestReports_SEL.propPhoneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemManNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemManColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemManNull()
            Me(Me.tableTestReports_SEL.assemManColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemModNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemModColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemModNull()
            Me(Me.tableTestReports_SEL.assemModColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableTestReports_SEL.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemTypeNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemTypeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemTypeNull()
            Me(Me.tableTestReports_SEL.assemTypeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemUsageNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemUsageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemUsageNull()
            Me(Me.tableTestReports_SEL.assemUsageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemLocNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemLocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemLocNull()
            Me(Me.tableTestReports_SEL.assemLocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSizeNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.assemSizeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSizeNull()
            Me(Me.tableTestReports_SEL.assemSizeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstestDateNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.testDateColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettestDateNull()
            Me(Me.tableTestReports_SEL.testDateColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunPrefNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.munPrefColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunPrefNull()
            Me(Me.tableTestReports_SEL.munPrefColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNameNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.munNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNameNull()
            Me(Me.tableTestReports_SEL.munNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunFaxNull() As Boolean
            Return Me.IsNull(Me.tableTestReports_SEL.munFaxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunFaxNull()
            Me(Me.tableTestReports_SEL.munFaxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TreeView_SPRow
        Inherits System.Data.DataRow
        
        Private tableTreeView_SP As TreeView_SPDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTreeView_SP = CType(Me.Table,TreeView_SPDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableTreeView_SP.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTreeView_SP.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manDeleted() As Boolean
            Get
                Return CType(Me(Me.tableTreeView_SP.manDeletedColumn),Boolean)
            End Get
            Set
                Me(Me.tableTreeView_SP.manDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.propDeletedColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propDeleted' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.propDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemDeleted() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTreeView_SP.assemDeletedColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemDeleted' in table 'TreeView_SP' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeView_SP.assemDeletedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableTreeView_SP.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableTreeView_SP.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableTreeView_SP.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropDeletedNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.propDeletedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropDeletedNull()
            Me(Me.tableTreeView_SP.propDeletedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableTreeView_SP.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableTreeView_SP.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableTreeView_SP.assemSerialColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemDeletedNull() As Boolean
            Return Me.IsNull(Me.tableTreeView_SP.assemDeletedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemDeletedNull()
            Me(Me.tableTreeView_SP.assemDeletedColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TreeViewAssembliesSearchQueryRow
        Inherits System.Data.DataRow
        
        Private tableTreeViewAssembliesSearchQuery As TreeViewAssembliesSearchQueryDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTreeViewAssembliesSearchQuery = CType(Me.Table,TreeViewAssembliesSearchQueryDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewAssembliesSearchQuery.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'TreeViewAssembliesSearchQuery' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewAssembliesSearchQuery.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewAssembliesSearchQuery.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'TreeViewAssembliesSearchQuery' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewAssembliesSearchQuery.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewAssembliesSearchQuery.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'TreeViewAssembliesSearchQuery' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewAssembliesSearchQuery.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewAssembliesSearchQuery.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tableTreeViewAssembliesSearchQuery.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewAssembliesSearchQuery.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableTreeViewAssembliesSearchQuery.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewAssembliesSearchQuery.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tableTreeViewAssembliesSearchQuery.assemSerialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TreeViewManagersSearchQueryRow
        Inherits System.Data.DataRow
        
        Private tableTreeViewManagersSearchQuery As TreeViewManagersSearchQueryDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTreeViewManagersSearchQuery = CType(Me.Table,TreeViewManagersSearchQueryDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableTreeViewManagersSearchQuery.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTreeViewManagersSearchQuery.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewManagersSearchQuery.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'TreeViewManagersSearchQuery' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewManagersSearchQuery.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewManagersSearchQuery.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tableTreeViewManagersSearchQuery.manNameColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TreeViewPropertiesSearchQueryRow
        Inherits System.Data.DataRow
        
        Private tableTreeViewPropertiesSearchQuery As TreeViewPropertiesSearchQueryDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTreeViewPropertiesSearchQuery = CType(Me.Table,TreeViewPropertiesSearchQueryDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewPropertiesSearchQuery.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'TreeViewPropertiesSearchQuery' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewPropertiesSearchQuery.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableTreeViewPropertiesSearchQuery.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableTreeViewPropertiesSearchQuery.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewPropertiesSearchQuery.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'TreeViewPropertiesSearchQuery' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewPropertiesSearchQuery.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTreeViewPropertiesSearchQuery.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'TreeViewPropertiesSearchQuery' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableTreeViewPropertiesSearchQuery.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewPropertiesSearchQuery.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tableTreeViewPropertiesSearchQuery.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewPropertiesSearchQuery.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tableTreeViewPropertiesSearchQuery.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tableTreeViewPropertiesSearchQuery.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tableTreeViewPropertiesSearchQuery.storeNoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class f_ManXPropXAssemSearchRow
        Inherits System.Data.DataRow
        
        Private tablef_ManXPropXAssemSearch As f_ManXPropXAssemSearchDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablef_ManXPropXAssemSearch = CType(Me.Table,f_ManXPropXAssemSearchDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tablef_ManXPropXAssemSearch.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manName() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.manNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manName' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.manNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.propNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propNo' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.propNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property propName() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.propNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'propName' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.propNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property storeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.storeNoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'storeNo' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.storeNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemNo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.assemNoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemNo' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.assemNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property assemSerial() As String
            Get
                Try 
                    Return CType(Me(Me.tablef_ManXPropXAssemSearch.assemSerialColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'assemSerial' in table 'f_ManXPropXAssemSearch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablef_ManXPropXAssemSearch.assemSerialColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.manNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameNull()
            Me(Me.tablef_ManXPropXAssemSearch.manNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNoNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.propNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNoNull()
            Me(Me.tablef_ManXPropXAssemSearch.propNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspropNameNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.propNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpropNameNull()
            Me(Me.tablef_ManXPropXAssemSearch.propNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsstoreNoNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.storeNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetstoreNoNull()
            Me(Me.tablef_ManXPropXAssemSearch.storeNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemNoNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.assemNoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemNoNull()
            Me(Me.tablef_ManXPropXAssemSearch.assemNoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsassemSerialNull() As Boolean
            Return Me.IsNull(Me.tablef_ManXPropXAssemSearch.assemSerialColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetassemSerialNull()
            Me(Me.tablef_ManXPropXAssemSearch.assemSerialColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ManagersWOutDeletedListRow
        Inherits System.Data.DataRow
        
        Private tableManagersWOutDeletedList As ManagersWOutDeletedListDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableManagersWOutDeletedList = CType(Me.Table,ManagersWOutDeletedListDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNo() As Integer
            Get
                Return CType(Me(Me.tableManagersWOutDeletedList.manNoColumn),Integer)
            End Get
            Set
                Me(Me.tableManagersWOutDeletedList.manNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manNameStreet() As String
            Get
                Try 
                    Return CType(Me(Me.tableManagersWOutDeletedList.manNameStreetColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'manNameStreet' in table 'ManagersWOutDeletedList' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableManagersWOutDeletedList.manNameStreetColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmanNameStreetNull() As Boolean
            Return Me.IsNull(Me.tableManagersWOutDeletedList.manNameStreetColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmanNameStreetNull()
            Me(Me.tableManagersWOutDeletedList.manNameStreetColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MunicipalitiesListRow
        Inherits System.Data.DataRow
        
        Private tableMunicipalitiesList As MunicipalitiesListDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMunicipalitiesList = CType(Me.Table,MunicipalitiesListDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munNo() As Integer
            Get
                Return CType(Me(Me.tableMunicipalitiesList.munNoColumn),Integer)
            End Get
            Set
                Me(Me.tableMunicipalitiesList.munNoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property munName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMunicipalitiesList.munNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'munName' in table 'MunicipalitiesList' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMunicipalitiesList.munNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmunNameNull() As Boolean
            Return Me.IsNull(Me.tableMunicipalitiesList.munNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmunNameNull()
            Me(Me.tableMunicipalitiesList.munNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPropertiesRows() As PropertiesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Properties_FK011")),PropertiesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssembliesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssembliesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssembliesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssembliesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblyManufacturerRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblyManufacturerRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblyManufacturerRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblyManufacturerRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblySizesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblySizesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblySizesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblySizesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblyTypesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblyTypesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblyTypesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblyTypesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblyUsageRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblyUsageRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblyUsageRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblyUsageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblyUsagePriceRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblyUsagePriceRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblyUsagePriceRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblyUsagePriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DatesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagersRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagersRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagersRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MunicipalitiesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MunicipalitiesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MunicipalitiesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MunicipalitiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PriceRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PriceRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PriceRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PricingSchemesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PricingSchemesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PricingSchemesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PricingSchemesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PropertiesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PropertiesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PropertiesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PropertiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TestersRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TestersRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TestersRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TestersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TestsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TestsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TestsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TestsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssembliesWOutDeleted_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssembliesWOutDeleted_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssembliesWOutDeleted_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssembliesWOutDeleted_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DeviceTestsInLastYear_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DeviceTestsInLastYear_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DeviceTestsInLastYear_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DeviceTestsInLastYear_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagersWOutDeleted_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagersWOutDeleted_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagersWOutDeleted_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagersWOutDeleted_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagersXPropertiesXAssemblies_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagersXPropertiesXAssemblies_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagersXPropertiesXAssemblies_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagersXPropertiesXAssemblies_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagersXPropertiesXAssembliesXTests_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagersXPropertiesXAssembliesXTests_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagersXPropertiesXAssembliesXTests_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagersXPropertiesXAssembliesXTests_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PricingSchemeViewRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PricingSchemeViewRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PricingSchemeViewRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PricingSchemeViewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PropertiesWOutDeleted_VWRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PropertiesWOutDeleted_VWRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PropertiesWOutDeleted_VWRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PropertiesWOutDeleted_VWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AssemblyInfoByPrimaryKeyRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AssemblyInfoByPrimaryKeyRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AssemblyInfoByPrimaryKeyRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AssemblyInfoByPrimaryKeyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class GetManagersListRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As GetManagersListRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As GetManagersListRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As GetManagersListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagerInfoByPrimaryKeyRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagerInfoByPrimaryKeyRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagerInfoByPrimaryKeyRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagerInfoByPrimaryKeyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagerNameNoStrtSuite_selRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagerNameNoStrtSuite_selRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagerNameNoStrtSuite_selRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagerNameNoStrtSuite_selRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PricingListRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PricingListRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PricingListRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PricingListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PropertyInfoByPrimaryKeyRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PropertyInfoByPrimaryKeyRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PropertyInfoByPrimaryKeyRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PropertyInfoByPrimaryKeyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SelectTestInfoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SelectTestInfoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SelectTestInfoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SelectTestInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TestReports_SELRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TestReports_SELRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TestReports_SELRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TestReports_SELRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TreeView_SPRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TreeView_SPRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TreeView_SPRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TreeView_SPRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TreeViewAssembliesSearchQueryRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TreeViewAssembliesSearchQueryRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TreeViewAssembliesSearchQueryRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TreeViewAssembliesSearchQueryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TreeViewManagersSearchQueryRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TreeViewManagersSearchQueryRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TreeViewManagersSearchQueryRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TreeViewManagersSearchQueryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TreeViewPropertiesSearchQueryRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TreeViewPropertiesSearchQueryRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TreeViewPropertiesSearchQueryRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TreeViewPropertiesSearchQueryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class f_ManXPropXAssemSearchRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As f_ManXPropXAssemSearchRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As f_ManXPropXAssemSearchRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As f_ManXPropXAssemSearchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ManagersWOutDeletedListRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ManagersWOutDeletedListRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ManagersWOutDeletedListRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ManagersWOutDeletedListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MunicipalitiesListRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MunicipalitiesListRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MunicipalitiesListRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MunicipalitiesListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace qbDataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssembliesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Assemblies"
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            tableMapping.ColumnMappings.Add("assemMan", "assemMan")
            tableMapping.ColumnMappings.Add("assemMod", "assemMod")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("assemInstDt", "assemInstDt")
            tableMapping.ColumnMappings.Add("assemLoc", "assemLoc")
            tableMapping.ColumnMappings.Add("assemNotes", "assemNotes")
            tableMapping.ColumnMappings.Add("assemDeleted", "assemDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            tableMapping.ColumnMappings.Add("AssemManNo", "AssemManNo")
            tableMapping.ColumnMappings.Add("assemTypeNo", "assemTypeNo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Assemblies] WHERE (([assemNo] = @Original_assemNo) AND ((@IsNu"& _ 
                "ll_upsize_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Assemblies] ([propNo], [assemType], [assemMan], [assemMod], [a"& _ 
                "ssemSizeNo], [assemSerial], [assemUsage], [assemUsagePriceNo], [assemInstDt], [a"& _ 
                "ssemLoc], [assemNotes], [assemDeleted], [AssemManNo], [assemTypeNo]) VALUES (@pr"& _ 
                "opNo, @assemType, @assemMan, @assemMod, @assemSizeNo, @assemSerial, @assemUsage,"& _ 
                " @assemUsagePriceNo, @assemInstDt, @assemLoc, @assemNotes, @assemDeleted, @Assem"& _ 
                "ManNo, @assemTypeNo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemNo, propNo, assemType, assemMan, assemMod, as"& _ 
                "semSizeNo, assemSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, as"& _ 
                "semNotes, assemDeleted, upsize_ts, AssemManNo, assemTypeNo FROM Assemblies WHERE"& _ 
                " (assemNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemMan", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemMod", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemMod", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSizeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSerial", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSerial", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemInstDt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "assemInstDt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemLoc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemLoc", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "assemDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemManNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemTypeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemTypeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Assemblies] SET [propNo] = @propNo, [assemType] = @assemType, [asse"& _ 
                "mMan] = @assemMan, [assemMod] = @assemMod, [assemSizeNo] = @assemSizeNo, [assemS"& _ 
                "erial] = @assemSerial, [assemUsage] = @assemUsage, [assemUsagePriceNo] = @assemU"& _ 
                "sagePriceNo, [assemInstDt] = @assemInstDt, [assemLoc] = @assemLoc, [assemNotes] "& _ 
                "= @assemNotes, [assemDeleted] = @assemDeleted, [AssemManNo] = @AssemManNo, [asse"& _ 
                "mTypeNo] = @assemTypeNo WHERE (([assemNo] = @Original_assemNo) AND ((@IsNull_ups"& _ 
                "ize_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT assemNo, propNo, assemType, assemMan, assemMod, assemSizeNo, assemSerial, "& _ 
                "assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, "& _ 
                "upsize_ts, AssemManNo, assemTypeNo FROM Assemblies WHERE (assemNo = @assemNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemMan", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemMod", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemMod", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSizeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSerial", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSerial", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemInstDt", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "assemInstDt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemLoc", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemLoc", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "assemDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemManNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemTypeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemTypeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "assemNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT assemNo, propNo, assemType, assemMan, assemMod, assemSizeNo, assemSerial, "& _ 
                "assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, "& _ 
                "upsize_ts, AssemManNo, assemTypeNo FROM dbo.Assemblies"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssembliesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssembliesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssembliesDataTable = New qbDataSet.AssembliesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssembliesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Assemblies")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_assemNo As Integer, ByVal Original_upsize_ts() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_assemNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal propNo As System.Nullable(Of Integer), ByVal assemType As String, ByVal assemMan As String, ByVal assemMod As String, ByVal assemSizeNo As System.Nullable(Of Integer), ByVal assemSerial As String, ByVal assemUsage As String, ByVal assemUsagePriceNo As System.Nullable(Of Integer), ByVal assemInstDt As System.Nullable(Of Date), ByVal assemLoc As String, ByVal assemNotes As String, ByVal assemDeleted As Boolean, ByVal AssemManNo As System.Nullable(Of Integer), ByVal assemTypeNo As System.Nullable(Of Integer)) As Integer
            If (propNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(propNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (assemType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(assemType,String)
            End If
            If (assemMan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(assemMan,String)
            End If
            If (assemMod Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(assemMod,String)
            End If
            If (assemSizeNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(assemSizeNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (assemSerial Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(assemSerial,String)
            End If
            If (assemUsage Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(assemUsage,String)
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (assemInstDt.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assemInstDt.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (assemLoc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(assemLoc,String)
            End If
            If (assemNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(assemNotes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(assemDeleted,Boolean)
            If (AssemManNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(AssemManNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (assemTypeNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(assemTypeNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal propNo As System.Nullable(Of Integer),  _
                    ByVal assemType As String,  _
                    ByVal assemMan As String,  _
                    ByVal assemMod As String,  _
                    ByVal assemSizeNo As System.Nullable(Of Integer),  _
                    ByVal assemSerial As String,  _
                    ByVal assemUsage As String,  _
                    ByVal assemUsagePriceNo As System.Nullable(Of Integer),  _
                    ByVal assemInstDt As System.Nullable(Of Date),  _
                    ByVal assemLoc As String,  _
                    ByVal assemNotes As String,  _
                    ByVal assemDeleted As Boolean,  _
                    ByVal AssemManNo As System.Nullable(Of Integer),  _
                    ByVal assemTypeNo As System.Nullable(Of Integer),  _
                    ByVal Original_assemNo As Integer,  _
                    ByVal Original_upsize_ts() As Byte,  _
                    ByVal assemNo As Integer) As Integer
            If (propNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(propNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (assemType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(assemType,String)
            End If
            If (assemMan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(assemMan,String)
            End If
            If (assemMod Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(assemMod,String)
            End If
            If (assemSizeNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(assemSizeNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (assemSerial Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(assemSerial,String)
            End If
            If (assemUsage Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(assemUsage,String)
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (assemInstDt.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assemInstDt.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (assemLoc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(assemLoc,String)
            End If
            If (assemNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(assemNotes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(assemDeleted,Boolean)
            If (AssemManNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(AssemManNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (assemTypeNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(assemTypeNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_assemNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_upsize_ts,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(assemNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblyManufacturerTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblyManufacturer"
            tableMapping.ColumnMappings.Add("AssemManNo", "AssemManNo")
            tableMapping.ColumnMappings.Add("AssemMan", "AssemMan")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AssemblyManufacturer] WHERE (([AssemManNo] = @Original_AssemMa"& _ 
                "nNo) AND ((@IsNull_AssemMan = 1 AND [AssemMan] IS NULL) OR ([AssemMan] = @Origin"& _ 
                "al_AssemMan)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemManNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_AssemMan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AssemblyManufacturer] ([AssemMan]) VALUES (@AssemMan);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " AssemManNo, AssemMan FROM AssemblyManufacturer WHERE (AssemManNo = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AssemblyManufacturer] SET [AssemMan] = @AssemMan WHERE (([AssemManN"& _ 
                "o] = @Original_AssemManNo) AND ((@IsNull_AssemMan = 1 AND [AssemMan] IS NULL) OR"& _ 
                " ([AssemMan] = @Original_AssemMan)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT AssemManNo, AssemMan FROM Assembly"& _ 
                "Manufacturer WHERE (AssemManNo = @AssemManNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemManNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_AssemMan", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemMan", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemMan", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemManNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "AssemManNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AssemManNo, AssemMan FROM dbo.AssemblyManufacturer"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblyManufacturerDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssemblyManufacturerDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssemblyManufacturerDataTable = New qbDataSet.AssemblyManufacturerDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssemblyManufacturerDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssemblyManufacturer")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_AssemManNo As Integer, ByVal Original_AssemMan As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_AssemManNo,Integer)
            If (Original_AssemMan Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AssemMan,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal AssemMan As String) As Integer
            If (AssemMan Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(AssemMan,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal AssemMan As String, ByVal Original_AssemManNo As Integer, ByVal Original_AssemMan As String, ByVal AssemManNo As Integer) As Integer
            If (AssemMan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AssemMan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_AssemManNo,Integer)
            If (Original_AssemMan Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_AssemMan,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AssemManNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblySizesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblySizes"
            tableMapping.ColumnMappings.Add("AssemSizeNo", "AssemSizeNo")
            tableMapping.ColumnMappings.Add("AssemSize", "AssemSize")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AssemblySizes] WHERE (([AssemSizeNo] = @Original_AssemSizeNo) "& _ 
                "AND ((@IsNull_AssemSize = 1 AND [AssemSize] IS NULL) OR ([AssemSize] = @Original"& _ 
                "_AssemSize)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSizeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_AssemSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemSize", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AssemblySizes] ([AssemSize]) VALUES (@AssemSize);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Asse"& _ 
                "mSizeNo, AssemSize FROM AssemblySizes WHERE (AssemSizeNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemSize", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AssemblySizes] SET [AssemSize] = @AssemSize WHERE (([AssemSizeNo] ="& _ 
                " @Original_AssemSizeNo) AND ((@IsNull_AssemSize = 1 AND [AssemSize] IS NULL) OR "& _ 
                "([AssemSize] = @Original_AssemSize)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT AssemSizeNo, AssemSize FROM Assem"& _ 
                "blySizes WHERE (AssemSizeNo = @AssemSizeNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemSize", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSizeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_AssemSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_AssemSize", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "AssemSize", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@AssemSizeNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "AssemSizeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT AssemSizeNo, AssemSize FROM dbo.AssemblySizes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblySizesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssemblySizesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssemblySizesDataTable = New qbDataSet.AssemblySizesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssemblySizesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssemblySizes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_AssemSizeNo As Integer, ByVal Original_AssemSize As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_AssemSizeNo,Integer)
            If (Original_AssemSize Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AssemSize,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal AssemSize As String) As Integer
            If (AssemSize Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(AssemSize,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal AssemSize As String, ByVal Original_AssemSizeNo As Integer, ByVal Original_AssemSize As String, ByVal AssemSizeNo As Integer) As Integer
            If (AssemSize Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AssemSize,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_AssemSizeNo,Integer)
            If (Original_AssemSize Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_AssemSize,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(AssemSizeNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblyTypesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblyTypes"
            tableMapping.ColumnMappings.Add("assemTypeNo", "assemTypeNo")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AssemblyTypes] WHERE (([assemTypeNo] = @Original_assemTypeNo) "& _ 
                "AND ((@IsNull_assemType = 1 AND [assemType] IS NULL) OR ([assemType] = @Original"& _ 
                "_assemType)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemTypeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemTypeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AssemblyTypes] ([assemType]) VALUES (@assemType);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT asse"& _ 
                "mTypeNo, assemType FROM AssemblyTypes WHERE (assemTypeNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AssemblyTypes] SET [assemType] = @assemType WHERE (([assemTypeNo] ="& _ 
                " @Original_assemTypeNo) AND ((@IsNull_assemType = 1 AND [assemType] IS NULL) OR "& _ 
                "([assemType] = @Original_assemType)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemTypeNo, assemType FROM Assem"& _ 
                "blyTypes WHERE (assemTypeNo = @assemTypeNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemTypeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemTypeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemType", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemType", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemType", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemTypeNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "assemTypeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT assemTypeNo, assemType FROM dbo.AssemblyTypes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblyTypesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssemblyTypesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssemblyTypesDataTable = New qbDataSet.AssemblyTypesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssemblyTypesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssemblyTypes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_assemTypeNo As Integer, ByVal Original_assemType As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_assemTypeNo,Integer)
            If (Original_assemType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_assemType,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal assemType As String) As Integer
            If (assemType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(assemType,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal assemType As String, ByVal Original_assemTypeNo As Integer, ByVal Original_assemType As String, ByVal assemTypeNo As Integer) As Integer
            If (assemType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(assemType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_assemTypeNo,Integer)
            If (Original_assemType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_assemType,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(assemTypeNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblyUsageTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblyUsage"
            tableMapping.ColumnMappings.Add("assemUsageNo", "assemUsageNo")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AssemblyUsage] WHERE (([assemUsageNo] = @Original_assemUsageNo"& _ 
                ") AND ((@IsNull_assemUsage = 1 AND [assemUsage] IS NULL) OR ([assemUsage] = @Ori"& _ 
                "ginal_assemUsage)) AND ((@IsNull_assemUsagePriceNo = 1 AND [assemUsagePriceNo] I"& _ 
                "S NULL) OR ([assemUsagePriceNo] = @Original_assemUsagePriceNo)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsageNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsageNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AssemblyUsage] ([assemUsage], [assemUsagePriceNo]) VALUES (@as"& _ 
                "semUsage, @assemUsagePriceNo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemUsageNo, assemUsage, assemUsagePrice"& _ 
                "No FROM AssemblyUsage WHERE (assemUsageNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AssemblyUsage] SET [assemUsage] = @assemUsage, [assemUsagePriceNo] "& _ 
                "= @assemUsagePriceNo WHERE (([assemUsageNo] = @Original_assemUsageNo) AND ((@IsN"& _ 
                "ull_assemUsage = 1 AND [assemUsage] IS NULL) OR ([assemUsage] = @Original_assemU"& _ 
                "sage)) AND ((@IsNull_assemUsagePriceNo = 1 AND [assemUsagePriceNo] IS NULL) OR ("& _ 
                "[assemUsagePriceNo] = @Original_assemUsagePriceNo)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemUsageNo, asse"& _ 
                "mUsage, assemUsagePriceNo FROM AssemblyUsage WHERE (assemUsageNo = @assemUsageNo"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsageNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsageNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsage", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsage", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsage", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsageNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "assemUsageNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT assemUsageNo, assemUsage, assemUsagePriceNo FROM dbo.AssemblyUsage"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblyUsageDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssemblyUsageDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssemblyUsageDataTable = New qbDataSet.AssemblyUsageDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssemblyUsageDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssemblyUsage")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_assemUsageNo As Integer, ByVal Original_assemUsage As String, ByVal Original_assemUsagePriceNo As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_assemUsageNo,Integer)
            If (Original_assemUsage Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_assemUsage,String)
            End If
            If (Original_assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal assemUsage As String, ByVal assemUsagePriceNo As System.Nullable(Of Integer)) As Integer
            If (assemUsage Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(assemUsage,String)
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal assemUsage As String, ByVal assemUsagePriceNo As System.Nullable(Of Integer), ByVal Original_assemUsageNo As Integer, ByVal Original_assemUsage As String, ByVal Original_assemUsagePriceNo As System.Nullable(Of Integer), ByVal assemUsageNo As Integer) As Integer
            If (assemUsage Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(assemUsage,String)
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_assemUsageNo,Integer)
            If (Original_assemUsage Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_assemUsage,String)
            End If
            If (Original_assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(assemUsageNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblyUsagePriceTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblyUsagePrice"
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("assemUsagePriceName", "assemUsagePriceName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[AssemblyUsagePrice] WHERE (([assemUsagePriceNo] = @Original_as"& _ 
                "semUsagePriceNo) AND ((@IsNull_assemUsagePriceName = 1 AND [assemUsagePriceName]"& _ 
                " IS NULL) OR ([assemUsagePriceName] = @Original_assemUsagePriceName)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsagePriceName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AssemblyUsagePrice] ([assemUsagePriceName]) VALUES (@assemUsag"& _ 
                "ePriceName);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemUsagePriceNo, assemUsagePriceName FROM AssemblyUsagePr"& _ 
                "ice WHERE (assemUsagePriceNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[AssemblyUsagePrice] SET [assemUsagePriceName] = @assemUsagePriceNam"& _ 
                "e WHERE (([assemUsagePriceNo] = @Original_assemUsagePriceNo) AND ((@IsNull_assem"& _ 
                "UsagePriceName = 1 AND [assemUsagePriceName] IS NULL) OR ([assemUsagePriceName] "& _ 
                "= @Original_assemUsagePriceName)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT assemUsagePriceNo, assemUsagePriceNa"& _ 
                "me FROM AssemblyUsagePrice WHERE (assemUsagePriceNo = @assemUsagePriceNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_assemUsagePriceName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_assemUsagePriceName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT assemUsagePriceNo, assemUsagePriceName FROM dbo.AssemblyUsagePrice"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblyUsagePriceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssemblyUsagePriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssemblyUsagePriceDataTable = New qbDataSet.AssemblyUsagePriceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.AssemblyUsagePriceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "AssemblyUsagePrice")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_assemUsagePriceNo As Integer, ByVal Original_assemUsagePriceName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_assemUsagePriceNo,Integer)
            If (Original_assemUsagePriceName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_assemUsagePriceName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal assemUsagePriceName As String) As Integer
            If (assemUsagePriceName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(assemUsagePriceName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal assemUsagePriceName As String, ByVal Original_assemUsagePriceNo As Integer, ByVal Original_assemUsagePriceName As String, ByVal assemUsagePriceNo As Integer) As Integer
            If (assemUsagePriceName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(assemUsagePriceName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_assemUsagePriceNo,Integer)
            If (Original_assemUsagePriceName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_assemUsagePriceName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(assemUsagePriceNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DatesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Dates"
            tableMapping.ColumnMappings.Add("Record", "Record")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("FinishDate", "FinishDate")
            tableMapping.ColumnMappings.Add("SingleDate", "SingleDate")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Dates] WHERE (([Record] = @Original_Record) AND ((@IsNull_Star"& _ 
                "tDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ("& _ 
                "(@IsNull_FinishDate = 1 AND [FinishDate] IS NULL) OR ([FinishDate] = @Original_F"& _ 
                "inishDate)) AND ((@IsNull_SingleDate = 1 AND [SingleDate] IS NULL) OR ([SingleDa"& _ 
                "te] = @Original_SingleDate)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Record", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Record", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_StartDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FinishDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FinishDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SingleDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SingleDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Dates] ([Record], [StartDate], [FinishDate], [SingleDate]) VAL"& _ 
                "UES (@Record, @StartDate, @FinishDate, @SingleDate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Record, StartDate, "& _ 
                "FinishDate, SingleDate FROM Dates WHERE (Record = @Record)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Record", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Record", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FinishDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SingleDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Dates] SET [Record] = @Record, [StartDate] = @StartDate, [FinishDat"& _ 
                "e] = @FinishDate, [SingleDate] = @SingleDate WHERE (([Record] = @Original_Record"& _ 
                ") AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Origin"& _ 
                "al_StartDate)) AND ((@IsNull_FinishDate = 1 AND [FinishDate] IS NULL) OR ([Finis"& _ 
                "hDate] = @Original_FinishDate)) AND ((@IsNull_SingleDate = 1 AND [SingleDate] IS"& _ 
                " NULL) OR ([SingleDate] = @Original_SingleDate)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Record, StartDate, Fi"& _ 
                "nishDate, SingleDate FROM Dates WHERE (Record = @Record)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Record", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Record", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@FinishDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@SingleDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_Record", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Record", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_StartDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_StartDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_FinishDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_FinishDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "FinishDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_SingleDate", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_SingleDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "SingleDate", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Record, StartDate, FinishDate, SingleDate FROM dbo.Dates"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.DatesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.DatesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.DatesDataTable = New qbDataSet.DatesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.DatesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Dates")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Record As Integer, ByVal Original_StartDate As System.Nullable(Of Date), ByVal Original_FinishDate As System.Nullable(Of Date), ByVal Original_SingleDate As System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Record,Integer)
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_FinishDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FinishDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_SingleDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SingleDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Record As Integer, ByVal StartDate As System.Nullable(Of Date), ByVal FinishDate As System.Nullable(Of Date), ByVal SingleDate As System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Record,Integer)
            If (StartDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (FinishDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FinishDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (SingleDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SingleDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Record As Integer, ByVal StartDate As System.Nullable(Of Date), ByVal FinishDate As System.Nullable(Of Date), ByVal SingleDate As System.Nullable(Of Date), ByVal Original_Record As Integer, ByVal Original_StartDate As System.Nullable(Of Date), ByVal Original_FinishDate As System.Nullable(Of Date), ByVal Original_SingleDate As System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Record,Integer)
            If (StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (FinishDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FinishDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (SingleDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SingleDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Record,Integer)
            If (Original_StartDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_StartDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_FinishDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_FinishDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_SingleDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_SingleDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagersTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Managers"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manFax", "manFax")
            tableMapping.ColumnMappings.Add("manEmail", "manEmail")
            tableMapping.ColumnMappings.Add("manNotes", "manNotes")
            tableMapping.ColumnMappings.Add("manCurAcct", "manCurAcct")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            tableMapping.ColumnMappings.Add("manLogoPath", "manLogoPath")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Managers] WHERE (([manNo] = @Original_manNo) AND ((@IsNull_ups"& _ 
                "ize_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Managers] ([manName], [manStrtAdd], [manSuite], [manCity], [ma"& _ 
                "nState], [manZip], [manCntct], [manPhone], [manFax], [manEmail], [manNotes], [ma"& _ 
                "nCurAcct], [manSchemeNo], [manDeleted], [manLogoPath]) VALUES (@manName, @manStr"& _ 
                "tAdd, @manSuite, @manCity, @manState, @manZip, @manCntct, @manPhone, @manFax, @m"& _ 
                "anEmail, @manNotes, @manCurAcct, @manSchemeNo, @manDeleted, @manLogoPath);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT manNo, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct, ma"& _ 
                "nPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, upsize_"& _ 
                "ts, manLogoPath FROM Managers WHERE (manNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manStrtAdd", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manStrtAdd", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSuite", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSuite", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manCntct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "manNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCurAcct", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "manCurAcct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "manDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manLogoPath", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manLogoPath", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Managers] SET [manName] = @manName, [manStrtAdd] = @manStrtAdd, [ma"& _ 
                "nSuite] = @manSuite, [manCity] = @manCity, [manState] = @manState, [manZip] = @m"& _ 
                "anZip, [manCntct] = @manCntct, [manPhone] = @manPhone, [manFax] = @manFax, [manE"& _ 
                "mail] = @manEmail, [manNotes] = @manNotes, [manCurAcct] = @manCurAcct, [manSchem"& _ 
                "eNo] = @manSchemeNo, [manDeleted] = @manDeleted, [manLogoPath] = @manLogoPath WH"& _ 
                "ERE (([manNo] = @Original_manNo) AND ((@IsNull_upsize_ts = 1 AND [upsize_ts] IS "& _ 
                "NULL) OR ([upsize_ts] = @Original_upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT manNo, manName, manStrtA"& _ 
                "dd, manSuite, manCity, manState, manZip, manCntct, manPhone, manFax, manEmail, m"& _ 
                "anNotes, manCurAcct, manSchemeNo, manDeleted, upsize_ts, manLogoPath FROM Manage"& _ 
                "rs WHERE (manNo = @manNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manStrtAdd", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manStrtAdd", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSuite", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSuite", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manCntct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "manNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manCurAcct", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "manCurAcct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "manDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manLogoPath", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manLogoPath", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "manNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct,"& _ 
                " manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, upsi"& _ 
                "ze_ts, manLogoPath FROM dbo.Managers"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagersDataTable = New qbDataSet.ManagersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.ManagersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Managers")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_manNo As Integer, ByVal Original_upsize_ts() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_manNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal manName As String, ByVal manStrtAdd As String, ByVal manSuite As String, ByVal manCity As String, ByVal manState As String, ByVal manZip As String, ByVal manCntct As String, ByVal manPhone As String, ByVal manFax As String, ByVal manEmail As String, ByVal manNotes As String, ByVal manCurAcct As Boolean, ByVal manSchemeNo As System.Nullable(Of Integer), ByVal manDeleted As Boolean, ByVal manLogoPath As String) As Integer
            If (manName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(manName,String)
            End If
            If (manStrtAdd Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(manStrtAdd,String)
            End If
            If (manSuite Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(manSuite,String)
            End If
            If (manCity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(manCity,String)
            End If
            If (manState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(manState,String)
            End If
            If (manZip Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(manZip,String)
            End If
            If (manCntct Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(manCntct,String)
            End If
            If (manPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(manPhone,String)
            End If
            If (manFax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(manFax,String)
            End If
            If (manEmail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(manEmail,String)
            End If
            If (manNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(manNotes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(manCurAcct,Boolean)
            If (manSchemeNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(manSchemeNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(manDeleted,Boolean)
            If (manLogoPath Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(manLogoPath,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal manName As String,  _
                    ByVal manStrtAdd As String,  _
                    ByVal manSuite As String,  _
                    ByVal manCity As String,  _
                    ByVal manState As String,  _
                    ByVal manZip As String,  _
                    ByVal manCntct As String,  _
                    ByVal manPhone As String,  _
                    ByVal manFax As String,  _
                    ByVal manEmail As String,  _
                    ByVal manNotes As String,  _
                    ByVal manCurAcct As Boolean,  _
                    ByVal manSchemeNo As System.Nullable(Of Integer),  _
                    ByVal manDeleted As Boolean,  _
                    ByVal manLogoPath As String,  _
                    ByVal Original_manNo As Integer,  _
                    ByVal Original_upsize_ts() As Byte,  _
                    ByVal manNo As Integer) As Integer
            If (manName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(manName,String)
            End If
            If (manStrtAdd Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(manStrtAdd,String)
            End If
            If (manSuite Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(manSuite,String)
            End If
            If (manCity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(manCity,String)
            End If
            If (manState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(manState,String)
            End If
            If (manZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(manZip,String)
            End If
            If (manCntct Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(manCntct,String)
            End If
            If (manPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(manPhone,String)
            End If
            If (manFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(manFax,String)
            End If
            If (manEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(manEmail,String)
            End If
            If (manNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(manNotes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(manCurAcct,Boolean)
            If (manSchemeNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(manSchemeNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(manDeleted,Boolean)
            If (manLogoPath Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(manLogoPath,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_manNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_upsize_ts,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(manNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MunicipalitiesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Municipalities"
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("munName", "munName")
            tableMapping.ColumnMappings.Add("munStrtAddr", "munStrtAddr")
            tableMapping.ColumnMappings.Add("munCity", "munCity")
            tableMapping.ColumnMappings.Add("munState", "munState")
            tableMapping.ColumnMappings.Add("munZip", "munZip")
            tableMapping.ColumnMappings.Add("munPhone", "munPhone")
            tableMapping.ColumnMappings.Add("munFax", "munFax")
            tableMapping.ColumnMappings.Add("munCntct", "munCntct")
            tableMapping.ColumnMappings.Add("munEmail", "munEmail")
            tableMapping.ColumnMappings.Add("munDept", "munDept")
            tableMapping.ColumnMappings.Add("munPref", "munPref")
            tableMapping.ColumnMappings.Add("munDeleted", "munDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Municipalities] WHERE (([munNo] = @Original_munNo) AND ((@IsNu"& _ 
                "ll_munName = 1 AND [munName] IS NULL) OR ([munName] = @Original_munName)) AND (("& _ 
                "@IsNull_munStrtAddr = 1 AND [munStrtAddr] IS NULL) OR ([munStrtAddr] = @Original"& _ 
                "_munStrtAddr)) AND ((@IsNull_munCity = 1 AND [munCity] IS NULL) OR ([munCity] = "& _ 
                "@Original_munCity)) AND ((@IsNull_munState = 1 AND [munState] IS NULL) OR ([munS"& _ 
                "tate] = @Original_munState)) AND ((@IsNull_munZip = 1 AND [munZip] IS NULL) OR ("& _ 
                "[munZip] = @Original_munZip)) AND ((@IsNull_munPhone = 1 AND [munPhone] IS NULL)"& _ 
                " OR ([munPhone] = @Original_munPhone)) AND ((@IsNull_munFax = 1 AND [munFax] IS "& _ 
                "NULL) OR ([munFax] = @Original_munFax)) AND ((@IsNull_munCntct = 1 AND [munCntct"& _ 
                "] IS NULL) OR ([munCntct] = @Original_munCntct)) AND ((@IsNull_munEmail = 1 AND "& _ 
                "[munEmail] IS NULL) OR ([munEmail] = @Original_munEmail)) AND ((@IsNull_munDept "& _ 
                "= 1 AND [munDept] IS NULL) OR ([munDept] = @Original_munDept)) AND ((@IsNull_mun"& _ 
                "Pref = 1 AND [munPref] IS NULL) OR ([munPref] = @Original_munPref)) AND ([munDel"& _ 
                "eted] = @Original_munDeleted))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munStrtAddr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munStrtAddr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munCity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munState", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munZip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munPhone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munFax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munCntct", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munEmail", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munDept", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munDept", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munPref", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munPref", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "munDeleted", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Municipalities] ([munName], [munStrtAddr], [munCity], [munStat"& _ 
                "e], [munZip], [munPhone], [munFax], [munCntct], [munEmail], [munDept], [munPref]"& _ 
                ", [munDeleted]) VALUES (@munName, @munStrtAddr, @munCity, @munState, @munZip, @m"& _ 
                "unPhone, @munFax, @munCntct, @munEmail, @munDept, @munPref, @munDeleted);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T munNo, munName, munStrtAddr, munCity, munState, munZip, munPhone, munFax, munC"& _ 
                "ntct, munEmail, munDept, munPref, munDeleted FROM Municipalities WHERE (munNo = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munStrtAddr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munDept", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munPref", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "munDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Municipalities] SET [munName] = @munName, [munStrtAddr] = @munStrtA"& _ 
                "ddr, [munCity] = @munCity, [munState] = @munState, [munZip] = @munZip, [munPhone"& _ 
                "] = @munPhone, [munFax] = @munFax, [munCntct] = @munCntct, [munEmail] = @munEmai"& _ 
                "l, [munDept] = @munDept, [munPref] = @munPref, [munDeleted] = @munDeleted WHERE "& _ 
                "(([munNo] = @Original_munNo) AND ((@IsNull_munName = 1 AND [munName] IS NULL) OR"& _ 
                " ([munName] = @Original_munName)) AND ((@IsNull_munStrtAddr = 1 AND [munStrtAddr"& _ 
                "] IS NULL) OR ([munStrtAddr] = @Original_munStrtAddr)) AND ((@IsNull_munCity = 1"& _ 
                " AND [munCity] IS NULL) OR ([munCity] = @Original_munCity)) AND ((@IsNull_munSta"& _ 
                "te = 1 AND [munState] IS NULL) OR ([munState] = @Original_munState)) AND ((@IsNu"& _ 
                "ll_munZip = 1 AND [munZip] IS NULL) OR ([munZip] = @Original_munZip)) AND ((@IsN"& _ 
                "ull_munPhone = 1 AND [munPhone] IS NULL) OR ([munPhone] = @Original_munPhone)) A"& _ 
                "ND ((@IsNull_munFax = 1 AND [munFax] IS NULL) OR ([munFax] = @Original_munFax)) "& _ 
                "AND ((@IsNull_munCntct = 1 AND [munCntct] IS NULL) OR ([munCntct] = @Original_mu"& _ 
                "nCntct)) AND ((@IsNull_munEmail = 1 AND [munEmail] IS NULL) OR ([munEmail] = @Or"& _ 
                "iginal_munEmail)) AND ((@IsNull_munDept = 1 AND [munDept] IS NULL) OR ([munDept]"& _ 
                " = @Original_munDept)) AND ((@IsNull_munPref = 1 AND [munPref] IS NULL) OR ([mun"& _ 
                "Pref] = @Original_munPref)) AND ([munDeleted] = @Original_munDeleted));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT "& _ 
                "munNo, munName, munStrtAddr, munCity, munState, munZip, munPhone, munFax, munCnt"& _ 
                "ct, munEmail, munDept, munPref, munDeleted FROM Municipalities WHERE (munNo = @m"& _ 
                "unNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munStrtAddr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munDept", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munPref", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "munDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munStrtAddr", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munStrtAddr", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munStrtAddr", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munCity", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCity", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munState", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munState", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munZip", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munZip", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munPhone", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPhone", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munFax", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munFax", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munCntct", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munCntct", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munCntct", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munEmail", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munEmail", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munDept", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munDept", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munDept", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munPref", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munPref", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munPref", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "munDeleted", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT munNo, munName, munStrtAddr, munCity, munState, munZip, munPhone, munFax, "& _ 
                "munCntct, munEmail, munDept, munPref, munDeleted FROM dbo.Municipalities"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.MunicipalitiesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.MunicipalitiesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.MunicipalitiesDataTable = New qbDataSet.MunicipalitiesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.MunicipalitiesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Municipalities")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_munNo As Integer, ByVal Original_munName As String, ByVal Original_munStrtAddr As String, ByVal Original_munCity As String, ByVal Original_munState As String, ByVal Original_munZip As String, ByVal Original_munPhone As String, ByVal Original_munFax As String, ByVal Original_munCntct As String, ByVal Original_munEmail As String, ByVal Original_munDept As String, ByVal Original_munPref As String, ByVal Original_munDeleted As Boolean) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_munNo,Integer)
            If (Original_munName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_munName,String)
            End If
            If (Original_munStrtAddr Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_munStrtAddr,String)
            End If
            If (Original_munCity Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_munCity,String)
            End If
            If (Original_munState Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_munState,String)
            End If
            If (Original_munZip Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_munZip,String)
            End If
            If (Original_munPhone Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_munPhone,String)
            End If
            If (Original_munFax Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_munFax,String)
            End If
            If (Original_munCntct Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_munCntct,String)
            End If
            If (Original_munEmail Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_munEmail,String)
            End If
            If (Original_munDept Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_munDept,String)
            End If
            If (Original_munPref Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_munPref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_munDeleted,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal munName As String, ByVal munStrtAddr As String, ByVal munCity As String, ByVal munState As String, ByVal munZip As String, ByVal munPhone As String, ByVal munFax As String, ByVal munCntct As String, ByVal munEmail As String, ByVal munDept As String, ByVal munPref As String, ByVal munDeleted As Boolean) As Integer
            If (munName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(munName,String)
            End If
            If (munStrtAddr Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(munStrtAddr,String)
            End If
            If (munCity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(munCity,String)
            End If
            If (munState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(munState,String)
            End If
            If (munZip Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(munZip,String)
            End If
            If (munPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(munPhone,String)
            End If
            If (munFax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(munFax,String)
            End If
            If (munCntct Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(munCntct,String)
            End If
            If (munEmail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(munEmail,String)
            End If
            If (munDept Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(munDept,String)
            End If
            If (munPref Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(munPref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(munDeleted,Boolean)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal munName As String,  _
                    ByVal munStrtAddr As String,  _
                    ByVal munCity As String,  _
                    ByVal munState As String,  _
                    ByVal munZip As String,  _
                    ByVal munPhone As String,  _
                    ByVal munFax As String,  _
                    ByVal munCntct As String,  _
                    ByVal munEmail As String,  _
                    ByVal munDept As String,  _
                    ByVal munPref As String,  _
                    ByVal munDeleted As Boolean,  _
                    ByVal Original_munNo As Integer,  _
                    ByVal Original_munName As String,  _
                    ByVal Original_munStrtAddr As String,  _
                    ByVal Original_munCity As String,  _
                    ByVal Original_munState As String,  _
                    ByVal Original_munZip As String,  _
                    ByVal Original_munPhone As String,  _
                    ByVal Original_munFax As String,  _
                    ByVal Original_munCntct As String,  _
                    ByVal Original_munEmail As String,  _
                    ByVal Original_munDept As String,  _
                    ByVal Original_munPref As String,  _
                    ByVal Original_munDeleted As Boolean,  _
                    ByVal munNo As Integer) As Integer
            If (munName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(munName,String)
            End If
            If (munStrtAddr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(munStrtAddr,String)
            End If
            If (munCity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(munCity,String)
            End If
            If (munState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(munState,String)
            End If
            If (munZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(munZip,String)
            End If
            If (munPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(munPhone,String)
            End If
            If (munFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(munFax,String)
            End If
            If (munCntct Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(munCntct,String)
            End If
            If (munEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(munEmail,String)
            End If
            If (munDept Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(munDept,String)
            End If
            If (munPref Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(munPref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(munDeleted,Boolean)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_munNo,Integer)
            If (Original_munName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_munName,String)
            End If
            If (Original_munStrtAddr Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_munStrtAddr,String)
            End If
            If (Original_munCity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_munCity,String)
            End If
            If (Original_munState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_munState,String)
            End If
            If (Original_munZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_munZip,String)
            End If
            If (Original_munPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_munPhone,String)
            End If
            If (Original_munFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_munFax,String)
            End If
            If (Original_munCntct Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_munCntct,String)
            End If
            If (Original_munEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_munEmail,String)
            End If
            If (Original_munDept Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_munDept,String)
            End If
            If (Original_munPref Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_munPref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_munDeleted,Boolean)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(munNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PriceTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Price"
            tableMapping.ColumnMappings.Add("priceNo", "priceNo")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Price] WHERE (([priceNo] = @Original_priceNo) AND ((@IsNull_up"& _ 
                "size_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_priceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Price] ([manSchemeNo], [assemSizeNo], [assemUsagePriceNo], [pr"& _ 
                "ice]) VALUES (@manSchemeNo, @assemSizeNo, @assemUsagePriceNo, @price);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT p"& _ 
                "riceNo, manSchemeNo, assemSizeNo, assemUsagePriceNo, price, upsize_ts FROM Price"& _ 
                " WHERE (priceNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSizeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@price", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "price", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Price] SET [manSchemeNo] = @manSchemeNo, [assemSizeNo] = @assemSize"& _ 
                "No, [assemUsagePriceNo] = @assemUsagePriceNo, [price] = @price WHERE (([priceNo]"& _ 
                " = @Original_priceNo) AND ((@IsNull_upsize_ts = 1 AND [upsize_ts] IS NULL) OR (["& _ 
                "upsize_ts] = @Original_upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT priceNo, manSchemeNo, assemSizeNo, "& _ 
                "assemUsagePriceNo, price, upsize_ts FROM Price WHERE (priceNo = @priceNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemSizeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemSizeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemUsagePriceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemUsagePriceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@price", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "price", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_priceNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "priceNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@priceNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "priceNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT priceNo, manSchemeNo, assemSizeNo, assemUsagePriceNo, price, upsize_ts FRO"& _ 
                "M dbo.Price"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PriceDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.PriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.PriceDataTable = New qbDataSet.PriceDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.PriceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Price")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_priceNo As Integer, ByVal Original_upsize_ts() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_priceNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal manSchemeNo As System.Nullable(Of Integer), ByVal assemSizeNo As System.Nullable(Of Integer), ByVal assemUsagePriceNo As System.Nullable(Of Integer), ByVal price As System.Nullable(Of Double)) As Integer
            If (manSchemeNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(manSchemeNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (assemSizeNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(assemSizeNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (price.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(price.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal manSchemeNo As System.Nullable(Of Integer), ByVal assemSizeNo As System.Nullable(Of Integer), ByVal assemUsagePriceNo As System.Nullable(Of Integer), ByVal price As System.Nullable(Of Double), ByVal Original_priceNo As Integer, ByVal Original_upsize_ts() As Byte, ByVal priceNo As Integer) As Integer
            If (manSchemeNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(manSchemeNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (assemSizeNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(assemSizeNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (assemUsagePriceNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(assemUsagePriceNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (price.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(price.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_priceNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_upsize_ts,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(priceNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PricingSchemesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PricingSchemes"
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manSchemeName", "manSchemeName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PricingSchemes] WHERE (([manSchemeNo] = @Original_manSchemeNo)"& _ 
                " AND ((@IsNull_manSchemeName = 1 AND [manSchemeName] IS NULL) OR ([manSchemeName"& _ 
                "] = @Original_manSchemeName)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_manSchemeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manSchemeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PricingSchemes] ([manSchemeName]) VALUES (@manSchemeName);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT manSchemeNo, manSchemeName FROM PricingSchemes WHERE (manSchemeNo = SCOPE_I"& _ 
                "DENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PricingSchemes] SET [manSchemeName] = @manSchemeName WHERE (([manSc"& _ 
                "hemeNo] = @Original_manSchemeNo) AND ((@IsNull_manSchemeName = 1 AND [manSchemeN"& _ 
                "ame] IS NULL) OR ([manSchemeName] = @Original_manSchemeName)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT manSchem"& _ 
                "eNo, manSchemeName FROM PricingSchemes WHERE (manSchemeNo = @manSchemeNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manSchemeNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_manSchemeName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_manSchemeName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "manSchemeName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manSchemeNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "manSchemeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manSchemeNo, manSchemeName FROM dbo.PricingSchemes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PricingSchemesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.PricingSchemesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.PricingSchemesDataTable = New qbDataSet.PricingSchemesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.PricingSchemesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "PricingSchemes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_manSchemeNo As Integer, ByVal Original_manSchemeName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_manSchemeNo,Integer)
            If (Original_manSchemeName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_manSchemeName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal manSchemeName As String) As Integer
            If (manSchemeName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(manSchemeName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal manSchemeName As String, ByVal Original_manSchemeNo As Integer, ByVal Original_manSchemeName As String, ByVal manSchemeNo As Integer) As Integer
            If (manSchemeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(manSchemeName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_manSchemeNo,Integer)
            If (Original_manSchemeName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_manSchemeName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(manSchemeNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PropertiesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Properties"
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propCon", "propCon")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("propPhone", "propPhone")
            tableMapping.ColumnMappings.Add("propFax", "propFax")
            tableMapping.ColumnMappings.Add("propEmail", "propEmail")
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("propPrevManNo", "propPrevManNo")
            tableMapping.ColumnMappings.Add("retestTo", "retestTo")
            tableMapping.ColumnMappings.Add("propNotes", "propNotes")
            tableMapping.ColumnMappings.Add("propDeleted", "propDeleted")
            tableMapping.ColumnMappings.Add("propAdded", "propAdded")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Properties] WHERE (([propNo] = @Original_propNo) AND ((@IsNull"& _ 
                "_upsize_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)))"& _ 
                ""
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_propNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Properties] ([manNo], [propName], [storeNo], [propCon], [propS"& _ 
                "trt], [propCity], [propState], [propZip], [propPhone], [propFax], [propEmail], ["& _ 
                "munNo], [propPrevManNo], [retestTo], [propNotes], [propDeleted], [propAdded]) VA"& _ 
                "LUES (@manNo, @propName, @storeNo, @propCon, @propStrt, @propCity, @propState, @"& _ 
                "propZip, @propPhone, @propFax, @propEmail, @munNo, @propPrevManNo, @retestTo, @p"& _ 
                "ropNotes, @propDeleted, @propAdded);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT propNo, manNo, propName, storeNo, p"& _ 
                "ropCon, propStrt, propCity, propState, propZip, propPhone, propFax, propEmail, m"& _ 
                "unNo, propPrevManNo, retestTo, propNotes, propDeleted, propAdded, upsize_ts FROM"& _ 
                " Properties WHERE (propNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@storeNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "storeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propCon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propCon", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propStrt", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propStrt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propPrevManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propPrevManNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@retestTo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retestTo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "propNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "propDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propAdded", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "propAdded", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Properties] SET [manNo] = @manNo, [propName] = @propName, [storeNo]"& _ 
                " = @storeNo, [propCon] = @propCon, [propStrt] = @propStrt, [propCity] = @propCit"& _ 
                "y, [propState] = @propState, [propZip] = @propZip, [propPhone] = @propPhone, [pr"& _ 
                "opFax] = @propFax, [propEmail] = @propEmail, [munNo] = @munNo, [propPrevManNo] ="& _ 
                " @propPrevManNo, [retestTo] = @retestTo, [propNotes] = @propNotes, [propDeleted]"& _ 
                " = @propDeleted, [propAdded] = @propAdded WHERE (([propNo] = @Original_propNo) A"& _ 
                "ND ((@IsNull_upsize_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_"& _ 
                "upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT propNo, manNo, propName, storeNo, propCon, propStrt, propC"& _ 
                "ity, propState, propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, re"& _ 
                "testTo, propNotes, propDeleted, propAdded, upsize_ts FROM Properties WHERE (prop"& _ 
                "No = @propNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@manNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "manNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@storeNo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "storeNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propCon", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propCon", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propStrt", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propStrt", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propCity", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propCity", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propState", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propState", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propZip", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propZip", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propPhone", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propPhone", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propFax", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propFax", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propEmail", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "propEmail", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propPrevManNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propPrevManNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@retestTo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "retestTo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propNotes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "propNotes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "propDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propAdded", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "propAdded", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_propNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "propNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@propNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "propNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT propNo, manNo, propName, storeNo, propCon, propStrt, propCity, propState, "& _ 
                "propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNote"& _ 
                "s, propDeleted, propAdded, upsize_ts FROM dbo.Properties"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PropertiesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.PropertiesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.PropertiesDataTable = New qbDataSet.PropertiesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.PropertiesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Properties")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_propNo As Integer, ByVal Original_upsize_ts() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_propNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal manNo As System.Nullable(Of Integer),  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal munNo As System.Nullable(Of Integer),  _
                    ByVal propPrevManNo As System.Nullable(Of Integer),  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As System.Nullable(Of Date)) As Integer
            If (manNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(manNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (propName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(propName,String)
            End If
            If (storeNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(storeNo,String)
            End If
            If (propCon Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(propCon,String)
            End If
            If (propStrt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(propStrt,String)
            End If
            If (propCity Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(propCity,String)
            End If
            If (propState Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(propState,String)
            End If
            If (propZip Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(propZip,String)
            End If
            If (propPhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(propPhone,String)
            End If
            If (propFax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(propFax,String)
            End If
            If (propEmail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(propEmail,String)
            End If
            If (munNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(munNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (propPrevManNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(propPrevManNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (retestTo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(retestTo,String)
            End If
            If (propNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(propNotes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(propDeleted,Boolean)
            If (propAdded.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(propAdded.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal manNo As System.Nullable(Of Integer),  _
                    ByVal propName As String,  _
                    ByVal storeNo As String,  _
                    ByVal propCon As String,  _
                    ByVal propStrt As String,  _
                    ByVal propCity As String,  _
                    ByVal propState As String,  _
                    ByVal propZip As String,  _
                    ByVal propPhone As String,  _
                    ByVal propFax As String,  _
                    ByVal propEmail As String,  _
                    ByVal munNo As System.Nullable(Of Integer),  _
                    ByVal propPrevManNo As System.Nullable(Of Integer),  _
                    ByVal retestTo As String,  _
                    ByVal propNotes As String,  _
                    ByVal propDeleted As Boolean,  _
                    ByVal propAdded As System.Nullable(Of Date),  _
                    ByVal Original_propNo As Integer,  _
                    ByVal Original_upsize_ts() As Byte,  _
                    ByVal propNo As Integer) As Integer
            If (manNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(manNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (propName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(propName,String)
            End If
            If (storeNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(storeNo,String)
            End If
            If (propCon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(propCon,String)
            End If
            If (propStrt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(propStrt,String)
            End If
            If (propCity Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(propCity,String)
            End If
            If (propState Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(propState,String)
            End If
            If (propZip Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(propZip,String)
            End If
            If (propPhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(propPhone,String)
            End If
            If (propFax Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(propFax,String)
            End If
            If (propEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(propEmail,String)
            End If
            If (munNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(munNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (propPrevManNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(propPrevManNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (retestTo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(retestTo,String)
            End If
            If (propNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(propNotes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(propDeleted,Boolean)
            If (propAdded.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(propAdded.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_propNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_upsize_ts,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(propNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TestersTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Testers"
            tableMapping.ColumnMappings.Add("tstrNo", "tstrNo")
            tableMapping.ColumnMappings.Add("tstrName", "tstrName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Testers] WHERE (([tstrNo] = @Original_tstrNo) AND ((@IsNull_ts"& _ 
                "trName = 1 AND [tstrName] IS NULL) OR ([tstrName] = @Original_tstrName)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tstrNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_tstrName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Testers] ([tstrName]) VALUES (@tstrName);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT tstrNo, tstr"& _ 
                "Name FROM Testers WHERE (tstrNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Testers] SET [tstrName] = @tstrName WHERE (([tstrNo] = @Original_ts"& _ 
                "trNo) AND ((@IsNull_tstrName = 1 AND [tstrName] IS NULL) OR ([tstrName] = @Origi"& _ 
                "nal_tstrName)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT tstrNo, tstrName FROM Testers WHERE (tstrNo = @tstrNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tstrNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_tstrName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "tstrNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT tstrNo, tstrName FROM dbo.Testers"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TestersDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.TestersDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.TestersDataTable = New qbDataSet.TestersDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.TestersDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Testers")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_tstrNo As Integer, ByVal Original_tstrName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_tstrNo,Integer)
            If (Original_tstrName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tstrName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tstrName As String) As Integer
            If (tstrName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(tstrName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tstrName As String, ByVal Original_tstrNo As Integer, ByVal Original_tstrName As String, ByVal tstrNo As Integer) As Integer
            If (tstrName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tstrName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_tstrNo,Integer)
            If (Original_tstrName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_tstrName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(tstrNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TestsTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Tests"
            tableMapping.ColumnMappings.Add("testNo", "testNo")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("testPerformed", "testPerformed")
            tableMapping.ColumnMappings.Add("testPass", "testPass")
            tableMapping.ColumnMappings.Add("testHours", "testHours")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("tstrName", "tstrName")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("testDeleted", "testDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            tableMapping.ColumnMappings.Add("tstrNo", "tstrNo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tests] WHERE (([testNo] = @Original_testNo) AND ((@IsNull_upsi"& _ 
                "ze_ts = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_testNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "testNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tests] ([assemNo], [testDate], [testPerformed], [testPass], [t"& _ 
                "estHours], [PONo], [tstrName], [Notes], [testDeleted], [tstrNo]) VALUES (@assemN"& _ 
                "o, @testDate, @testPerformed, @testPass, @testHours, @PONo, @tstrName, @Notes, @"& _ 
                "testDeleted, @tstrNo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT testNo, assemNo, testDate, testPerformed, testPas"& _ 
                "s, testHours, PONo, tstrName, Notes, testDeleted, upsize_ts, tstrNo FROM Tests W"& _ 
                "HERE (testNo = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "testDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testPerformed", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testPerformed", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testPass", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testPass", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testHours", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "testHours", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PONo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PONo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Notes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Notes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Tests] SET [assemNo] = @assemNo, [testDate] = @testDate, [testPerfo"& _ 
                "rmed] = @testPerformed, [testPass] = @testPass, [testHours] = @testHours, [PONo]"& _ 
                " = @PONo, [tstrName] = @tstrName, [Notes] = @Notes, [testDeleted] = @testDeleted"& _ 
                ", [tstrNo] = @tstrNo WHERE (([testNo] = @Original_testNo) AND ((@IsNull_upsize_t"& _ 
                "s = 1 AND [upsize_ts] IS NULL) OR ([upsize_ts] = @Original_upsize_ts)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " testNo, assemNo, testDate, testPerformed, testPass, testHours, PONo, tstrName, "& _ 
                "Notes, testDeleted, upsize_ts, tstrNo FROM Tests WHERE (testNo = @testNo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@assemNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "assemNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "testDate", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testPerformed", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testPerformed", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testPass", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testPass", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testHours", System.Data.SqlDbType.Float, 0, System.Data.ParameterDirection.Input, 0, 0, "testHours", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@PONo", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PONo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Notes", System.Data.SqlDbType.NText, 0, System.Data.ParameterDirection.Input, 0, 0, "Notes", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testDeleted", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "testDeleted", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tstrNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "tstrNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_testNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "testNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_upsize_ts", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_upsize_ts", System.Data.SqlDbType.Timestamp, 0, System.Data.ParameterDirection.Input, 0, 0, "upsize_ts", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@testNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "testNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT testNo, assemNo, testDate, testPerformed, testPass, testHours, PONo, tstrN"& _ 
                "ame, Notes, testDeleted, upsize_ts, tstrNo FROM dbo.Tests"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TestsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.TestsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.TestsDataTable = New qbDataSet.TestsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.TestsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Tests")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_testNo As Integer, ByVal Original_upsize_ts() As Byte) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_testNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_upsize_ts,Byte())
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal assemNo As System.Nullable(Of Integer), ByVal testDate As System.Nullable(Of Date), ByVal testPerformed As Boolean, ByVal testPass As Boolean, ByVal testHours As System.Nullable(Of Double), ByVal PONo As String, ByVal tstrName As String, ByVal Notes As String, ByVal testDeleted As Boolean, ByVal tstrNo As System.Nullable(Of Integer)) As Integer
            If (assemNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(assemNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (testDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(testDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(testPerformed,Boolean)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(testPass,Boolean)
            If (testHours.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(testHours.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (PONo Is Nothing) Then
                Throw New System.ArgumentNullException("PONo")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PONo,String)
            End If
            If (tstrName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(tstrName,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Notes,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(testDeleted,Boolean)
            If (tstrNo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(tstrNo.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal assemNo As System.Nullable(Of Integer), ByVal testDate As System.Nullable(Of Date), ByVal testPerformed As Boolean, ByVal testPass As Boolean, ByVal testHours As System.Nullable(Of Double), ByVal PONo As String, ByVal tstrName As String, ByVal Notes As String, ByVal testDeleted As Boolean, ByVal tstrNo As System.Nullable(Of Integer), ByVal Original_testNo As Integer, ByVal Original_upsize_ts() As Byte, ByVal testNo As Integer) As Integer
            If (assemNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(assemNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (testDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(testDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(testPerformed,Boolean)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(testPass,Boolean)
            If (testHours.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(testHours.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (PONo Is Nothing) Then
                Throw New System.ArgumentNullException("PONo")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PONo,String)
            End If
            If (tstrName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(tstrName,String)
            End If
            If (Notes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Notes,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(testDeleted,Boolean)
            If (tstrNo.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(tstrNo.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_testNo,Integer)
            If (Original_upsize_ts Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_upsize_ts,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(testNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssembliesWOutDeleted_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssembliesWOutDeleted_VW"
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            tableMapping.ColumnMappings.Add("assemMan", "assemMan")
            tableMapping.ColumnMappings.Add("assemMod", "assemMod")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("assemInstDt", "assemInstDt")
            tableMapping.ColumnMappings.Add("assemLoc", "assemLoc")
            tableMapping.ColumnMappings.Add("assemNotes", "assemNotes")
            tableMapping.ColumnMappings.Add("assemDeleted", "assemDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            tableMapping.ColumnMappings.Add("AssemManNo", "AssemManNo")
            tableMapping.ColumnMappings.Add("assemTypeNo", "assemTypeNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT assemNo, propNo, assemType, assemMan, assemMod, assemSizeNo, assemSerial, "& _ 
                "assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assemDeleted, "& _ 
                "upsize_ts, AssemManNo, assemTypeNo FROM dbo.AssembliesWOutDeleted_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssembliesWOutDeleted_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.AssembliesWOutDeleted_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.AssembliesWOutDeleted_VWDataTable = New qbDataSet.AssembliesWOutDeleted_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DeviceTestsInLastYear_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DeviceTestsInLastYear_VW"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manFax", "manFax")
            tableMapping.ColumnMappings.Add("manEmail", "manEmail")
            tableMapping.ColumnMappings.Add("manNotes", "manNotes")
            tableMapping.ColumnMappings.Add("manCurAcct", "manCurAcct")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("manLogoPath", "manLogoPath")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propCon", "propCon")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("propPhone", "propPhone")
            tableMapping.ColumnMappings.Add("propFax", "propFax")
            tableMapping.ColumnMappings.Add("propEmail", "propEmail")
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("propPrevManNo", "propPrevManNo")
            tableMapping.ColumnMappings.Add("retestTo", "retestTo")
            tableMapping.ColumnMappings.Add("propNotes", "propNotes")
            tableMapping.ColumnMappings.Add("propDeleted", "propDeleted")
            tableMapping.ColumnMappings.Add("propAdded", "propAdded")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            tableMapping.ColumnMappings.Add("assemMan", "assemMan")
            tableMapping.ColumnMappings.Add("assemMod", "assemMod")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("assemInstDt", "assemInstDt")
            tableMapping.ColumnMappings.Add("assemLoc", "assemLoc")
            tableMapping.ColumnMappings.Add("assemNotes", "assemNotes")
            tableMapping.ColumnMappings.Add("assemDeleted", "assemDeleted")
            tableMapping.ColumnMappings.Add("AssemManNo", "AssemManNo")
            tableMapping.ColumnMappings.Add("assemTypeNo", "assemTypeNo")
            tableMapping.ColumnMappings.Add("testNo", "testNo")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("testPerformed", "testPerformed")
            tableMapping.ColumnMappings.Add("testPass", "testPass")
            tableMapping.ColumnMappings.Add("testHours", "testHours")
            tableMapping.ColumnMappings.Add("PONo", "PONo")
            tableMapping.ColumnMappings.Add("tstrName", "tstrName")
            tableMapping.ColumnMappings.Add("Notes", "Notes")
            tableMapping.ColumnMappings.Add("testDeleted", "testDeleted")
            tableMapping.ColumnMappings.Add("tstrNo", "tstrNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct,"& _ 
                " manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, manL"& _ 
                "ogoPath, propNo, propName, storeNo, propCon, propStrt, propCity, propState, prop"& _ 
                "Zip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNotes, p"& _ 
                "ropDeleted, propAdded, assemNo, assemType, assemMan, assemMod, assemSizeNo, asse"& _ 
                "mSerial, assemUsage, assemUsagePriceNo, assemInstDt, assemLoc, assemNotes, assem"& _ 
                "Deleted, AssemManNo, assemTypeNo, testNo, testDate, testPerformed, testPass, tes"& _ 
                "tHours, PONo, tstrName, Notes, testDeleted, tstrNo FROM dbo.DeviceTestsInLastYea"& _ 
                "r_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.DeviceTestsInLastYear_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.DeviceTestsInLastYear_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.DeviceTestsInLastYear_VWDataTable = New qbDataSet.DeviceTestsInLastYear_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagersWOutDeleted_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagersWOutDeleted_VW"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manFax", "manFax")
            tableMapping.ColumnMappings.Add("manEmail", "manEmail")
            tableMapping.ColumnMappings.Add("manNotes", "manNotes")
            tableMapping.ColumnMappings.Add("manCurAcct", "manCurAcct")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("manLogoPath", "manLogoPath")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, manStrtAdd, manSuite, manCity, manState, manZip, manCntct,"& _ 
                " manPhone, manFax, manEmail, manNotes, manCurAcct, manSchemeNo, manDeleted, manL"& _ 
                "ogoPath, upsize_ts FROM dbo.ManagersWOutDeleted_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagersWOutDeleted_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagersWOutDeleted_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagersWOutDeleted_VWDataTable = New qbDataSet.ManagersWOutDeleted_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagersXPropertiesXAssemblies_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagersXPropertiesXAssemblies_VW"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, manStrtAdd, manCity, manState, manZip, propNo, propName, s"& _ 
                "toreNo, propStrt, propCity, propState, propZip, assemNo, assemSerial FROM dbo.Ma"& _ 
                "nagersXPropertiesXAssemblies_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagersXPropertiesXAssemblies_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagersXPropertiesXAssemblies_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagersXPropertiesXAssemblies_VWDataTable = New qbDataSet.ManagersXPropertiesXAssemblies_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagersXPropertiesXAssembliesXTests_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagersXPropertiesXAssembliesXTests_VW"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("testNo", "testNo")
            tableMapping.ColumnMappings.Add("testPerformed", "testPerformed")
            tableMapping.ColumnMappings.Add("testPass", "testPass")
            tableMapping.ColumnMappings.Add("tstrNo", "tstrNo")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("tstrName", "tstrName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, manStrtAdd, manCity, manState, manZip, propNo, propName, s"& _ 
                "toreNo, propStrt, propCity, propState, propZip, assemNo, assemSerial, testNo, te"& _ 
                "stPerformed, testPass, tstrNo, testDate, tstrName FROM dbo.ManagersXPropertiesXA"& _ 
                "ssembliesXTests_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagersXPropertiesXAssembliesXTests_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagersXPropertiesXAssembliesXTests_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagersXPropertiesXAssembliesXTests_VWDataTable = New qbDataSet.ManagersXPropertiesXAssembliesXTests_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PricingSchemeViewTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PricingSchemeView"
            tableMapping.ColumnMappings.Add("priceNo", "priceNo")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT priceNo, manSchemeNo, assemSizeNo, assemUsagePriceNo, price, upsize_ts FRO"& _ 
                "M dbo.PricingSchemeView"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PricingSchemeViewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.PricingSchemeViewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.PricingSchemeViewDataTable = New qbDataSet.PricingSchemeViewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PropertiesWOutDeleted_VWTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PropertiesWOutDeleted_VW"
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propCon", "propCon")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("propPhone", "propPhone")
            tableMapping.ColumnMappings.Add("propFax", "propFax")
            tableMapping.ColumnMappings.Add("propEmail", "propEmail")
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("propPrevManNo", "propPrevManNo")
            tableMapping.ColumnMappings.Add("retestTo", "retestTo")
            tableMapping.ColumnMappings.Add("propNotes", "propNotes")
            tableMapping.ColumnMappings.Add("propDeleted", "propDeleted")
            tableMapping.ColumnMappings.Add("propAdded", "propAdded")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT propNo, manNo, propName, storeNo, propCon, propStrt, propCity, propState, "& _ 
                "propZip, propPhone, propFax, propEmail, munNo, propPrevManNo, retestTo, propNote"& _ 
                "s, propDeleted, propAdded, upsize_ts FROM dbo.PropertiesWOutDeleted_VW"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PropertiesWOutDeleted_VWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.PropertiesWOutDeleted_VWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.PropertiesWOutDeleted_VWDataTable = New qbDataSet.PropertiesWOutDeleted_VWDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AssemblyInfoByPrimaryKeyTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AssemblyInfoByPrimaryKey"
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            tableMapping.ColumnMappings.Add("assemMan", "assemMan")
            tableMapping.ColumnMappings.Add("assemMod", "assemMod")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("assemInstDt", "assemInstDt")
            tableMapping.ColumnMappings.Add("assemLoc", "assemLoc")
            tableMapping.ColumnMappings.Add("assemNotes", "assemNotes")
            tableMapping.ColumnMappings.Add("assemDeleted", "assemDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            tableMapping.ColumnMappings.Add("AssemManNo", "AssemManNo")
            tableMapping.ColumnMappings.Add("assemTypeNo", "assemTypeNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.AssemblyInfoByPrimaryKey"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@assembly_primarykey", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.AssemblyInfoByPrimaryKeyDataTable, ByVal assembly_primarykey As System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (assembly_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(assembly_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal assembly_primarykey As System.Nullable(Of Integer)) As qbDataSet.AssemblyInfoByPrimaryKeyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (assembly_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(assembly_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.AssemblyInfoByPrimaryKeyDataTable = New qbDataSet.AssemblyInfoByPrimaryKeyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class GetManagersListTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "GetManagersList"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manFax", "manFax")
            tableMapping.ColumnMappings.Add("manEmail", "manEmail")
            tableMapping.ColumnMappings.Add("manNotes", "manNotes")
            tableMapping.ColumnMappings.Add("manCurAcct", "manCurAcct")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.GetManagersList"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.GetManagersListDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.GetManagersListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.GetManagersListDataTable = New qbDataSet.GetManagersListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagerInfoByPrimaryKeyTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagerInfoByPrimaryKey"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manFax", "manFax")
            tableMapping.ColumnMappings.Add("manEmail", "manEmail")
            tableMapping.ColumnMappings.Add("manNotes", "manNotes")
            tableMapping.ColumnMappings.Add("manCurAcct", "manCurAcct")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.ManagerInfoByPrimaryKey"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@manager_primarykey", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagerInfoByPrimaryKeyDataTable, ByVal manager_primarykey As System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (manager_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(manager_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal manager_primarykey As System.Nullable(Of Integer)) As qbDataSet.ManagerInfoByPrimaryKeyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (manager_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(manager_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.ManagerInfoByPrimaryKeyDataTable = New qbDataSet.ManagerInfoByPrimaryKeyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagerNameNoStrtSuite_selTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagerNameNoStrtSuite_sel"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manSuite", "manSuite")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.ManagerNameNoStrtSuite_sel"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagerNameNoStrtSuite_selDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagerNameNoStrtSuite_selDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagerNameNoStrtSuite_selDataTable = New qbDataSet.ManagerNameNoStrtSuite_selDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PricingListTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PricingList"
            tableMapping.ColumnMappings.Add("AssemSize", "AssemSize")
            tableMapping.ColumnMappings.Add("priceNo", "priceNo")
            tableMapping.ColumnMappings.Add("manSchemeNo", "manSchemeNo")
            tableMapping.ColumnMappings.Add("assemSizeNo", "assemSizeNo")
            tableMapping.ColumnMappings.Add("assemUsagePriceNo", "assemUsagePriceNo")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.PricingList"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@pricing_scheme", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PricingListDataTable, ByVal pricing_scheme As System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pricing_scheme.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(pricing_scheme.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal pricing_scheme As System.Nullable(Of Integer)) As qbDataSet.PricingListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (pricing_scheme.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(pricing_scheme.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.PricingListDataTable = New qbDataSet.PricingListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PropertyInfoByPrimaryKeyTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PropertyInfoByPrimaryKey"
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propCon", "propCon")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("propPhone", "propPhone")
            tableMapping.ColumnMappings.Add("propFax", "propFax")
            tableMapping.ColumnMappings.Add("propEmail", "propEmail")
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("propPrevManNo", "propPrevManNo")
            tableMapping.ColumnMappings.Add("retestTo", "retestTo")
            tableMapping.ColumnMappings.Add("propNotes", "propNotes")
            tableMapping.ColumnMappings.Add("propDeleted", "propDeleted")
            tableMapping.ColumnMappings.Add("propAdded", "propAdded")
            tableMapping.ColumnMappings.Add("upsize_ts", "upsize_ts")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.PropertyInfoByPrimaryKey"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@property_primarykey", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.PropertyInfoByPrimaryKeyDataTable, ByVal property_primarykey As System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (property_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(property_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal property_primarykey As System.Nullable(Of Integer)) As qbDataSet.PropertyInfoByPrimaryKeyDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (property_primarykey.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(property_primarykey.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.PropertyInfoByPrimaryKeyDataTable = New qbDataSet.PropertyInfoByPrimaryKeyDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SelectTestInfoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SelectTestInfo"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("testPerformed", "testPerformed")
            tableMapping.ColumnMappings.Add("testPass", "testPass")
            tableMapping.ColumnMappings.Add("tstrNo", "tstrNo")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("tstrName", "tstrName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.SelectTestInfo"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@dateSelected", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.SelectTestInfoDataTable, ByVal dateSelected As System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dateSelected.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateSelected.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal dateSelected As System.Nullable(Of Date)) As qbDataSet.SelectTestInfoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (dateSelected.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(dateSelected.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.SelectTestInfoDataTable = New qbDataSet.SelectTestInfoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TestReports_SELTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TestReports_SEL"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manStrtAdd", "manStrtAdd")
            tableMapping.ColumnMappings.Add("manCity", "manCity")
            tableMapping.ColumnMappings.Add("manState", "manState")
            tableMapping.ColumnMappings.Add("manZip", "manZip")
            tableMapping.ColumnMappings.Add("manCntct", "manCntct")
            tableMapping.ColumnMappings.Add("manPhone", "manPhone")
            tableMapping.ColumnMappings.Add("manLogoPath", "manLogoPath")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("propStrt", "propStrt")
            tableMapping.ColumnMappings.Add("propCity", "propCity")
            tableMapping.ColumnMappings.Add("propState", "propState")
            tableMapping.ColumnMappings.Add("propZip", "propZip")
            tableMapping.ColumnMappings.Add("propCon", "propCon")
            tableMapping.ColumnMappings.Add("propPhone", "propPhone")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemMan", "assemMan")
            tableMapping.ColumnMappings.Add("assemMod", "assemMod")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemType", "assemType")
            tableMapping.ColumnMappings.Add("assemUsage", "assemUsage")
            tableMapping.ColumnMappings.Add("assemLoc", "assemLoc")
            tableMapping.ColumnMappings.Add("assemSize", "assemSize")
            tableMapping.ColumnMappings.Add("testNo", "testNo")
            tableMapping.ColumnMappings.Add("testDate", "testDate")
            tableMapping.ColumnMappings.Add("munPref", "munPref")
            tableMapping.ColumnMappings.Add("munName", "munName")
            tableMapping.ColumnMappings.Add("munFax", "munFax")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.TestReports_SEL"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@test_startdate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@test_enddate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 23, 3, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TestReports_SELDataTable, ByVal test_startdate As System.Nullable(Of Date), ByVal test_enddate As System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (test_startdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(test_startdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (test_enddate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(test_enddate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal test_startdate As System.Nullable(Of Date), ByVal test_enddate As System.Nullable(Of Date)) As qbDataSet.TestReports_SELDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (test_startdate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(test_startdate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (test_enddate.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(test_enddate.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim dataTable As qbDataSet.TestReports_SELDataTable = New qbDataSet.TestReports_SELDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TreeView_SPTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TreeView_SP"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("manDeleted", "manDeleted")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("propDeleted", "propDeleted")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            tableMapping.ColumnMappings.Add("assemDeleted", "assemDeleted")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.TreeView_SP"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@searchString", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TreeView_SPDataTable, ByVal searchString As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal searchString As String) As qbDataSet.TreeView_SPDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            Dim dataTable As qbDataSet.TreeView_SPDataTable = New qbDataSet.TreeView_SPDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TreeViewAssembliesSearchQueryTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TreeViewAssembliesSearchQuery"
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.TreeViewAssembliesSearchQuery"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@searchString", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TreeViewAssembliesSearchQueryDataTable, ByVal searchString As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal searchString As String) As qbDataSet.TreeViewAssembliesSearchQueryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            Dim dataTable As qbDataSet.TreeViewAssembliesSearchQueryDataTable = New qbDataSet.TreeViewAssembliesSearchQueryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TreeViewManagersSearchQueryTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TreeViewManagersSearchQuery"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.TreeViewManagersSearchQuery"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@searchString", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TreeViewManagersSearchQueryDataTable, ByVal searchString As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal searchString As String) As qbDataSet.TreeViewManagersSearchQueryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            Dim dataTable As qbDataSet.TreeViewManagersSearchQueryDataTable = New qbDataSet.TreeViewManagersSearchQueryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TreeViewPropertiesSearchQueryTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TreeViewPropertiesSearchQuery"
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.TreeViewPropertiesSearchQuery"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@searchString", System.Data.SqlDbType.NVarChar, 255, System.Data.ParameterDirection.Input, 0, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.TreeViewPropertiesSearchQueryDataTable, ByVal searchString As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal searchString As String) As qbDataSet.TreeViewPropertiesSearchQueryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(searchString,String)
            End If
            Dim dataTable As qbDataSet.TreeViewPropertiesSearchQueryDataTable = New qbDataSet.TreeViewPropertiesSearchQueryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class f_ManXPropXAssemSearchTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "f_ManXPropXAssemSearch"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manName", "manName")
            tableMapping.ColumnMappings.Add("propNo", "propNo")
            tableMapping.ColumnMappings.Add("propName", "propName")
            tableMapping.ColumnMappings.Add("storeNo", "storeNo")
            tableMapping.ColumnMappings.Add("assemNo", "assemNo")
            tableMapping.ColumnMappings.Add("assemSerial", "assemSerial")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT manNo, manName, propNo, propName, storeNo, assemNo, assemSerial FROM dbo.f"& _ 
                "_ManXPropXAssemSearch(@searchString)"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@searchString", System.Data.SqlDbType.NVarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.f_ManXPropXAssemSearchDataTable, ByVal searchString As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Throw New System.ArgumentNullException("searchString")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(searchString,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal searchString As String) As qbDataSet.f_ManXPropXAssemSearchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (searchString Is Nothing) Then
                Throw New System.ArgumentNullException("searchString")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(searchString,String)
            End If
            Dim dataTable As qbDataSet.f_ManXPropXAssemSearchDataTable = New qbDataSet.f_ManXPropXAssemSearchDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ManagersWOutDeletedListTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ManagersWOutDeletedList"
            tableMapping.ColumnMappings.Add("manNo", "manNo")
            tableMapping.ColumnMappings.Add("manNameStreet", "manNameStreet")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     (manName + ' - ' +  manStrtAdd) manNameStreet, manNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Man"& _ 
                "agersWOutDeleted_VW"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY manName, manStrtAdd"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.ManagersWOutDeletedListDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.ManagersWOutDeletedListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.ManagersWOutDeletedListDataTable = New qbDataSet.ManagersWOutDeletedListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MunicipalitiesListTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MunicipalitiesList"
            tableMapping.ColumnMappings.Add("munNo", "munNo")
            tableMapping.ColumnMappings.Add("munName", "munName")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Municipalities] WHERE (([munNo] = @Original_munNo) AND ((@IsNull_mun"& _ 
                "Name = 1 AND [munName] IS NULL) OR ([munName] = @Original_munName)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Municipalities] ([munName]) VALUES (@munName);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT munNo, munNam"& _ 
                "e FROM Municipalities WHERE (munNo = SCOPE_IDENTITY()) ORDER BY munName"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Municipalities] SET [munName] = @munName WHERE (([munNo] = @Original_munN"& _ 
                "o) AND ((@IsNull_munName = 1 AND [munName] IS NULL) OR ([munName] = @Original_mu"& _ 
                "nName)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT munNo, munName FROM Municipalities WHERE (munNo = @munNo) ORDE"& _ 
                "R BY munName"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munNo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_munName", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_munName", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "munName", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@munNo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "munNo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.bftm.My.MySettings.Default.qbConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     munNo, munName"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Municipalities"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"ORDER BY munName"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As qbDataSet.MunicipalitiesListDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As qbDataSet.MunicipalitiesListDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As qbDataSet.MunicipalitiesListDataTable = New qbDataSet.MunicipalitiesListDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As qbDataSet.MunicipalitiesListDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As qbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MunicipalitiesList")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_munNo As Integer, ByVal Original_munName As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_munNo,Integer)
            If (Original_munName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_munName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal munName As String) As Integer
            If (munName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(munName,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal munName As String, ByVal Original_munNo As Integer, ByVal Original_munName As String, ByVal munNo As Integer) As Integer
            If (munName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(munName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_munNo,Integer)
            If (Original_munName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_munName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(munNo,Integer)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
